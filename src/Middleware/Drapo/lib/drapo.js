
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.ES6Promise=e()}(this,function(){"use strict";function t(t){var e=typeof t;return null!==t&&("object"===e||"function"===e)}function e(t){return"function"==typeof t}function n(t){W=t}function r(t){z=t}function o(){return function(){return process.nextTick(a)}}function i(){return"undefined"!=typeof U?function(){U(a)}:c()}function s(){var t=0,e=new H(a),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){return t.port2.postMessage(0)}}function c(){var t=setTimeout;return function(){return t(a,1)}}function a(){for(var t=0;t<N;t+=2){var e=Q[t],n=Q[t+1];e(n),Q[t]=void 0,Q[t+1]=void 0}N=0}function f(){try{var t=Function("return this")().require("vertx");return U=t.runOnLoop||t.runOnContext,i()}catch(e){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[V]&&x(r);var o=n._state;if(o){var i=arguments[o-1];z(function(){return T(o,r,i,n._result)})}else j(n,r,t,e);return r}function h(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(p);return w(n,t),n}function p(){}function v(){return new TypeError("You cannot resolve a promise with itself")}function d(){return new TypeError("A promises callback cannot return that same promise.")}function _(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function y(t,e,n){z(function(t){var r=!1,o=_(n,e,function(n){r||(r=!0,e!==n?w(t,n):A(t,n))},function(e){r||(r=!0,S(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,S(t,o))},t)}function m(t,e){e._state===Z?A(t,e._result):e._state===$?S(t,e._result):j(e,void 0,function(e){return w(t,e)},function(e){return S(t,e)})}function b(t,n,r){n.constructor===t.constructor&&r===l&&n.constructor.resolve===h?m(t,n):void 0===r?A(t,n):e(r)?y(t,n,r):A(t,n)}function w(e,n){if(e===n)S(e,v());else if(t(n)){var r=void 0;try{r=n.then}catch(o){return void S(e,o)}b(e,n,r)}else A(e,n)}function g(t){t._onerror&&t._onerror(t._result),E(t)}function A(t,e){t._state===X&&(t._result=e,t._state=Z,0!==t._subscribers.length&&z(E,t))}function S(t,e){t._state===X&&(t._state=$,t._result=e,z(g,t))}function j(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+Z]=n,o[i+$]=r,0===i&&t._state&&z(E,t)}function E(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?T(n,r,o,i):o(i);t._subscribers.length=0}}function T(t,n,r,o){var i=e(r),s=void 0,u=void 0,c=!0;if(i){try{s=r(o)}catch(a){c=!1,u=a}if(n===s)return void S(n,d())}else s=o;n._state!==X||(i&&c?w(n,s):c===!1?S(n,u):t===Z?A(n,s):t===$&&S(n,s))}function M(t,e){try{e(function(e){w(t,e)},function(e){S(t,e)})}catch(n){S(t,n)}}function P(){return tt++}function x(t){t[V]=tt++,t._state=void 0,t._result=void 0,t._subscribers=[]}function C(){return new Error("Array Methods must be provided an Array")}function O(t){return new et(this,t).promise}function k(t){var e=this;return new e(L(t)?function(n,r){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(n,r)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function F(t){var e=this,n=new e(p);return S(n,t),n}function Y(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function q(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function D(){var t=void 0;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;if(n){var r=null;try{r=Object.prototype.toString.call(n.resolve())}catch(e){}if("[object Promise]"===r&&!n.cast)return}t.Promise=nt}var K=void 0;K=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var L=K,N=0,U=void 0,W=void 0,z=function(t,e){Q[N]=t,Q[N+1]=e,N+=2,2===N&&(W?W(a):R())},B="undefined"!=typeof window?window:void 0,G=B||{},H=G.MutationObserver||G.WebKitMutationObserver,I="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),J="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3),R=void 0;R=I?o():H?s():J?u():void 0===B&&"function"==typeof require?f():c();var V=Math.random().toString(36).substring(2),X=void 0,Z=1,$=2,tt=0,et=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[V]||x(this.promise),L(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?A(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&A(this.promise,this._result))):S(this.promise,C())}return t.prototype._enumerate=function(t){for(var e=0;this._state===X&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===h){var o=void 0,i=void 0,s=!1;try{o=t.then}catch(u){s=!0,i=u}if(o===l&&t._state!==X)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===nt){var c=new n(p);s?S(c,i):b(c,t,o),this._willSettleAt(c,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===X&&(this._remaining--,t===$?S(r,n):this._result[e]=n),0===this._remaining&&A(r,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;j(t,void 0,function(t){return n._settledAt(Z,e,t)},function(t){return n._settledAt($,e,t)})},t}(),nt=function(){function t(e){this[V]=P(),this._result=this._state=void 0,this._subscribers=[],p!==e&&("function"!=typeof e&&Y(),this instanceof t?M(this,e):q())}return t.prototype["catch"]=function(t){return this.then(null,t)},t.prototype["finally"]=function(t){var n=this,r=n.constructor;return e(t)?n.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})}):n.then(t,t)},t}();return nt.prototype.then=l,nt.all=O,nt.race=k,nt.resolve=h,nt.reject=F,nt._setScheduler=n,nt._setAsap=r,nt._asap=z,nt.polyfill=D,nt.Promise=nt,nt.polyfill(),nt});
(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module==="object")module.exports=factory();else if(typeof define==="function"&&define.amd)define([],factory);else if(typeof exports==="object")exports["signalR"]=factory();else root["signalR"]=factory()})(window,function(){return function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var es6_promise_dist_es6_promise_auto_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);var es6_promise_dist_es6_promise_auto_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(es6_promise_dist_es6_promise_auto_js__WEBPACK_IMPORTED_MODULE_0__);var _index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3);__webpack_require__.d(__webpack_exports__,"VERSION",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["VERSION"]});__webpack_require__.d(__webpack_exports__,"AbortError",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["AbortError"]});__webpack_require__.d(__webpack_exports__,"HttpError",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HttpError"]});__webpack_require__.d(__webpack_exports__,"TimeoutError",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["TimeoutError"]});__webpack_require__.d(__webpack_exports__,"HttpClient",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]});__webpack_require__.d(__webpack_exports__,"HttpResponse",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HttpResponse"]});__webpack_require__.d(__webpack_exports__,"DefaultHttpClient",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["DefaultHttpClient"]});__webpack_require__.d(__webpack_exports__,"HubConnection",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HubConnection"]});__webpack_require__.d(__webpack_exports__,"HubConnectionState",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HubConnectionState"]});__webpack_require__.d(__webpack_exports__,"HubConnectionBuilder",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HubConnectionBuilder"]});__webpack_require__.d(__webpack_exports__,"MessageType",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["MessageType"]});__webpack_require__.d(__webpack_exports__,"LogLevel",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["LogLevel"]});__webpack_require__.d(__webpack_exports__,"HttpTransportType",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["HttpTransportType"]});__webpack_require__.d(__webpack_exports__,"TransferFormat",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["TransferFormat"]});__webpack_require__.d(__webpack_exports__,"NullLogger",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["NullLogger"]});__webpack_require__.d(__webpack_exports__,"JsonHubProtocol",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["JsonHubProtocol"]});__webpack_require__.d(__webpack_exports__,"Subject",function(){return _index__WEBPACK_IMPORTED_MODULE_1__["Subject"]});if(!Uint8Array.prototype.indexOf){Object.defineProperty(Uint8Array.prototype,"indexOf",{value:Array.prototype.indexOf,writable:true})}if(!Uint8Array.prototype.slice){Object.defineProperty(Uint8Array.prototype,"slice",{value:function(start,end){return new Uint8Array(Array.prototype.slice.call(this,start,end))},writable:true})}if(!Uint8Array.prototype.forEach){Object.defineProperty(Uint8Array.prototype,"forEach",{value:Array.prototype.forEach,writable:true})}},function(module,exports,__webpack_require__){(function(global){var require;
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.2+97478eb6
 */
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.2+97478eb6
 */
(function(global,factory){true?module.exports=factory():undefined})(this,function(){"use strict";function objectOrFunction(x){var type=typeof x;return x!==null&&(type==="object"||type==="function")}function isFunction(x){return typeof x==="function"}var _isArray=void 0;if(Array.isArray){_isArray=Array.isArray}else{_isArray=function(x){return Object.prototype.toString.call(x)==="[object Array]"}}var isArray=_isArray;var len=0;var vertxNext=void 0;var customSchedulerFn=void 0;var asap=function asap(callback,arg){queue[len]=callback;queue[len+1]=arg;len+=2;if(len===2){if(customSchedulerFn){customSchedulerFn(flush)}else{scheduleFlush()}}};function setScheduler(scheduleFn){customSchedulerFn=scheduleFn}function setAsap(asapFn){asap=asapFn}var browserWindow=typeof window!=="undefined"?window:undefined;var browserGlobal=browserWindow||{};var BrowserMutationObserver=browserGlobal.MutationObserver||browserGlobal.WebKitMutationObserver;var isNode=typeof self==="undefined"&&typeof process!=="undefined"&&{}.toString.call(process)==="[object process]";var isWorker=typeof Uint8ClampedArray!=="undefined"&&typeof importScripts!=="undefined"&&typeof MessageChannel!=="undefined";function useNextTick(){return function(){return process.nextTick(flush)}}function useVertxTimer(){if(typeof vertxNext!=="undefined"){return function(){vertxNext(flush)}}return useSetTimeout()}function useMutationObserver(){var iterations=0;var observer=new BrowserMutationObserver(flush);var node=document.createTextNode("");observer.observe(node,{characterData:true});return function(){node.data=iterations=++iterations%2}}function useMessageChannel(){var channel=new MessageChannel;channel.port1.onmessage=flush;return function(){return channel.port2.postMessage(0)}}function useSetTimeout(){var globalSetTimeout=setTimeout;return function(){return globalSetTimeout(flush,1)}}var queue=new Array(1e3);function flush(){for(var i=0;i<len;i+=2){var callback=queue[i];var arg=queue[i+1];callback(arg);queue[i]=undefined;queue[i+1]=undefined}len=0}function attemptVertx(){try{var r=require;var vertx=__webpack_require__(!function webpackMissingModule(){var e=new Error("Cannot find module 'vertx'");e.code="MODULE_NOT_FOUND";throw e}());vertxNext=vertx.runOnLoop||vertx.runOnContext;return useVertxTimer()}catch(e){return useSetTimeout()}}var scheduleFlush=void 0;if(isNode){scheduleFlush=useNextTick()}else if(BrowserMutationObserver){scheduleFlush=useMutationObserver()}else if(isWorker){scheduleFlush=useMessageChannel()}else if(browserWindow===undefined&&"function"==="function"){scheduleFlush=attemptVertx()}else{scheduleFlush=useSetTimeout()}function then(onFulfillment,onRejection){var parent=this;var child=new this.constructor(noop);if(child[PROMISE_ID]===undefined){makePromise(child)}var _state=parent._state;if(_state){var callback=arguments[_state-1];asap(function(){return invokeCallback(_state,child,callback,parent._result)})}else{subscribe(parent,child,onFulfillment,onRejection)}return child}function resolve$1(object){var Constructor=this;if(object&&typeof object==="object"&&object.constructor===Constructor){return object}var promise=new Constructor(noop);resolve(promise,object);return promise}var PROMISE_ID=Math.random().toString(36).substring(16);function noop(){}var PENDING=void 0;var FULFILLED=1;var REJECTED=2;var GET_THEN_ERROR=new ErrorObject;function selfFulfillment(){return new TypeError("You cannot resolve a promise with itself")}function cannotReturnOwn(){return new TypeError("A promises callback cannot return that same promise.")}function getThen(promise){try{return promise.then}catch(error){GET_THEN_ERROR.error=error;return GET_THEN_ERROR}}function tryThen(then$$1,value,fulfillmentHandler,rejectionHandler){try{then$$1.call(value,fulfillmentHandler,rejectionHandler)}catch(e){return e}}function handleForeignThenable(promise,thenable,then$$1){asap(function(promise){var sealed=false;var error=tryThen(then$$1,thenable,function(value){if(sealed){return}sealed=true;if(thenable!==value){resolve(promise,value)}else{fulfill(promise,value)}},function(reason){if(sealed){return}sealed=true;reject(promise,reason)},"Settle: "+(promise._label||" unknown promise"));if(!sealed&&error){sealed=true;reject(promise,error)}},promise)}function handleOwnThenable(promise,thenable){if(thenable._state===FULFILLED){fulfill(promise,thenable._result)}else if(thenable._state===REJECTED){reject(promise,thenable._result)}else{subscribe(thenable,undefined,function(value){return resolve(promise,value)},function(reason){return reject(promise,reason)})}}function handleMaybeThenable(promise,maybeThenable,then$$1){if(maybeThenable.constructor===promise.constructor&&then$$1===then&&maybeThenable.constructor.resolve===resolve$1){handleOwnThenable(promise,maybeThenable)}else{if(then$$1===GET_THEN_ERROR){reject(promise,GET_THEN_ERROR.error);GET_THEN_ERROR.error=null}else if(then$$1===undefined){fulfill(promise,maybeThenable)}else if(isFunction(then$$1)){handleForeignThenable(promise,maybeThenable,then$$1)}else{fulfill(promise,maybeThenable)}}}function resolve(promise,value){if(promise===value){reject(promise,selfFulfillment())}else if(objectOrFunction(value)){handleMaybeThenable(promise,value,getThen(value))}else{fulfill(promise,value)}}function publishRejection(promise){if(promise._onerror){promise._onerror(promise._result)}publish(promise)}function fulfill(promise,value){if(promise._state!==PENDING){return}promise._result=value;promise._state=FULFILLED;if(promise._subscribers.length!==0){asap(publish,promise)}}function reject(promise,reason){if(promise._state!==PENDING){return}promise._state=REJECTED;promise._result=reason;asap(publishRejection,promise)}function subscribe(parent,child,onFulfillment,onRejection){var _subscribers=parent._subscribers;var length=_subscribers.length;parent._onerror=null;_subscribers[length]=child;_subscribers[length+FULFILLED]=onFulfillment;_subscribers[length+REJECTED]=onRejection;if(length===0&&parent._state){asap(publish,parent)}}function publish(promise){var subscribers=promise._subscribers;var settled=promise._state;if(subscribers.length===0){return}var child=void 0,callback=void 0,detail=promise._result;for(var i=0;i<subscribers.length;i+=3){child=subscribers[i];callback=subscribers[i+settled];if(child){invokeCallback(settled,child,callback,detail)}else{callback(detail)}}promise._subscribers.length=0}function ErrorObject(){this.error=null}var TRY_CATCH_ERROR=new ErrorObject;function tryCatch(callback,detail){try{return callback(detail)}catch(e){TRY_CATCH_ERROR.error=e;return TRY_CATCH_ERROR}}function invokeCallback(settled,promise,callback,detail){var hasCallback=isFunction(callback),value=void 0,error=void 0,succeeded=void 0,failed=void 0;if(hasCallback){value=tryCatch(callback,detail);if(value===TRY_CATCH_ERROR){failed=true;error=value.error;value.error=null}else{succeeded=true}if(promise===value){reject(promise,cannotReturnOwn());return}}else{value=detail;succeeded=true}if(promise._state!==PENDING){}else if(hasCallback&&succeeded){resolve(promise,value)}else if(failed){reject(promise,error)}else if(settled===FULFILLED){fulfill(promise,value)}else if(settled===REJECTED){reject(promise,value)}}function initializePromise(promise,resolver){try{resolver(function resolvePromise(value){resolve(promise,value)},function rejectPromise(reason){reject(promise,reason)})}catch(e){reject(promise,e)}}var id=0;function nextId(){return id++}function makePromise(promise){promise[PROMISE_ID]=id++;promise._state=undefined;promise._result=undefined;promise._subscribers=[]}function validationError(){return new Error("Array Methods must be provided an Array")}function validationError(){return new Error("Array Methods must be provided an Array")}var Enumerator=function(){function Enumerator(Constructor,input){this._instanceConstructor=Constructor;this.promise=new Constructor(noop);if(!this.promise[PROMISE_ID]){makePromise(this.promise)}if(isArray(input)){this.length=input.length;this._remaining=input.length;this._result=new Array(this.length);if(this.length===0){fulfill(this.promise,this._result)}else{this.length=this.length||0;this._enumerate(input);if(this._remaining===0){fulfill(this.promise,this._result)}}}else{reject(this.promise,validationError())}}Enumerator.prototype._enumerate=function _enumerate(input){for(var i=0;this._state===PENDING&&i<input.length;i++){this._eachEntry(input[i],i)}};Enumerator.prototype._eachEntry=function _eachEntry(entry,i){var c=this._instanceConstructor;var resolve$$1=c.resolve;if(resolve$$1===resolve$1){var _then=getThen(entry);if(_then===then&&entry._state!==PENDING){this._settledAt(entry._state,i,entry._result)}else if(typeof _then!=="function"){this._remaining--;this._result[i]=entry}else if(c===Promise$2){var promise=new c(noop);handleMaybeThenable(promise,entry,_then);this._willSettleAt(promise,i)}else{this._willSettleAt(new c(function(resolve$$1){return resolve$$1(entry)}),i)}}else{this._willSettleAt(resolve$$1(entry),i)}};Enumerator.prototype._settledAt=function _settledAt(state,i,value){var promise=this.promise;if(promise._state===PENDING){this._remaining--;if(state===REJECTED){reject(promise,value)}else{this._result[i]=value}}if(this._remaining===0){fulfill(promise,this._result)}};Enumerator.prototype._willSettleAt=function _willSettleAt(promise,i){var enumerator=this;subscribe(promise,undefined,function(value){return enumerator._settledAt(FULFILLED,i,value)},function(reason){return enumerator._settledAt(REJECTED,i,reason)})};return Enumerator}();function all(entries){return new Enumerator(this,entries).promise}function race(entries){var Constructor=this;if(!isArray(entries)){return new Constructor(function(_,reject){return reject(new TypeError("You must pass an array to race."))})}else{return new Constructor(function(resolve,reject){var length=entries.length;for(var i=0;i<length;i++){Constructor.resolve(entries[i]).then(resolve,reject)}})}}function reject$1(reason){var Constructor=this;var promise=new Constructor(noop);reject(promise,reason);return promise}function needsResolver(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function needsNew(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}var Promise$2=function(){function Promise(resolver){this[PROMISE_ID]=nextId();this._result=this._state=undefined;this._subscribers=[];if(noop!==resolver){typeof resolver!=="function"&&needsResolver();this instanceof Promise?initializePromise(this,resolver):needsNew()}}Promise.prototype.catch=function _catch(onRejection){return this.then(null,onRejection)};Promise.prototype.finally=function _finally(callback){var promise=this;var constructor=promise.constructor;return promise.then(function(value){return constructor.resolve(callback()).then(function(){return value})},function(reason){return constructor.resolve(callback()).then(function(){throw reason})})};return Promise}();Promise$2.prototype.then=then;Promise$2.all=all;Promise$2.race=race;Promise$2.resolve=resolve$1;Promise$2.reject=reject$1;Promise$2._setScheduler=setScheduler;Promise$2._setAsap=setAsap;Promise$2._asap=asap;function polyfill(){var local=void 0;if(typeof global!=="undefined"){local=global}else if(typeof self!=="undefined"){local=self}else{try{local=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}}var P=local.Promise;if(P){var promiseToString=null;try{promiseToString=Object.prototype.toString.call(P.resolve())}catch(e){}if(promiseToString==="[object Promise]"&&!P.cast){return}}local.Promise=Promise$2}Promise$2.polyfill=polyfill;Promise$2.Promise=Promise$2;Promise$2.polyfill();return Promise$2})}).call(this,__webpack_require__(2))},function(module,exports){var g;g=function(){return this}();try{g=g||new Function("return this")()}catch(e){if(typeof window==="object")g=window}module.exports=g},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"VERSION",function(){return VERSION});var _Errors__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(4);__webpack_require__.d(__webpack_exports__,"AbortError",function(){return _Errors__WEBPACK_IMPORTED_MODULE_0__["AbortError"]});__webpack_require__.d(__webpack_exports__,"HttpError",function(){return _Errors__WEBPACK_IMPORTED_MODULE_0__["HttpError"]});__webpack_require__.d(__webpack_exports__,"TimeoutError",function(){return _Errors__WEBPACK_IMPORTED_MODULE_0__["TimeoutError"]});var _HttpClient__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(5);__webpack_require__.d(__webpack_exports__,"HttpClient",function(){return _HttpClient__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]});__webpack_require__.d(__webpack_exports__,"HttpResponse",function(){return _HttpClient__WEBPACK_IMPORTED_MODULE_1__["HttpResponse"]});var _DefaultHttpClient__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(6);__webpack_require__.d(__webpack_exports__,"DefaultHttpClient",function(){return _DefaultHttpClient__WEBPACK_IMPORTED_MODULE_2__["DefaultHttpClient"]});var _HubConnection__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(10);__webpack_require__.d(__webpack_exports__,"HubConnection",function(){return _HubConnection__WEBPACK_IMPORTED_MODULE_3__["HubConnection"]});__webpack_require__.d(__webpack_exports__,"HubConnectionState",function(){return _HubConnection__WEBPACK_IMPORTED_MODULE_3__["HubConnectionState"]});var _HubConnectionBuilder__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(17);__webpack_require__.d(__webpack_exports__,"HubConnectionBuilder",function(){return _HubConnectionBuilder__WEBPACK_IMPORTED_MODULE_4__["HubConnectionBuilder"]});var _IHubProtocol__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(15);__webpack_require__.d(__webpack_exports__,"MessageType",function(){return _IHubProtocol__WEBPACK_IMPORTED_MODULE_5__["MessageType"]});var _ILogger__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(9);__webpack_require__.d(__webpack_exports__,"LogLevel",function(){return _ILogger__WEBPACK_IMPORTED_MODULE_6__["LogLevel"]});var _ITransport__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(20);__webpack_require__.d(__webpack_exports__,"HttpTransportType",function(){return _ITransport__WEBPACK_IMPORTED_MODULE_7__["HttpTransportType"]});__webpack_require__.d(__webpack_exports__,"TransferFormat",function(){return _ITransport__WEBPACK_IMPORTED_MODULE_7__["TransferFormat"]});var _Loggers__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(14);__webpack_require__.d(__webpack_exports__,"NullLogger",function(){return _Loggers__WEBPACK_IMPORTED_MODULE_8__["NullLogger"]});var _JsonHubProtocol__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(25);__webpack_require__.d(__webpack_exports__,"JsonHubProtocol",function(){return _JsonHubProtocol__WEBPACK_IMPORTED_MODULE_9__["JsonHubProtocol"]});var _Subject__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(16);__webpack_require__.d(__webpack_exports__,"Subject",function(){return _Subject__WEBPACK_IMPORTED_MODULE_10__["Subject"]});var VERSION="3.1.17"},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HttpError",function(){return HttpError});__webpack_require__.d(__webpack_exports__,"TimeoutError",function(){return TimeoutError});__webpack_require__.d(__webpack_exports__,"AbortError",function(){return AbortError});var __extends=undefined&&undefined.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var HttpError=function(_super){__extends(HttpError,_super);function HttpError(errorMessage,statusCode){var _newTarget=this.constructor;var _this=this;var trueProto=_newTarget.prototype;_this=_super.call(this,errorMessage)||this;_this.statusCode=statusCode;_this.__proto__=trueProto;return _this}return HttpError}(Error);var TimeoutError=function(_super){__extends(TimeoutError,_super);function TimeoutError(errorMessage){var _newTarget=this.constructor;if(errorMessage===void 0){errorMessage="A timeout occurred."}var _this=this;var trueProto=_newTarget.prototype;_this=_super.call(this,errorMessage)||this;_this.__proto__=trueProto;return _this}return TimeoutError}(Error);var AbortError=function(_super){__extends(AbortError,_super);function AbortError(errorMessage){var _newTarget=this.constructor;if(errorMessage===void 0){errorMessage="An abort occurred."}var _this=this;var trueProto=_newTarget.prototype;_this=_super.call(this,errorMessage)||this;_this.__proto__=trueProto;return _this}return AbortError}(Error)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HttpResponse",function(){return HttpResponse});__webpack_require__.d(__webpack_exports__,"HttpClient",function(){return HttpClient});var __assign=undefined&&undefined.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};var HttpResponse=function(){function HttpResponse(statusCode,statusText,content){this.statusCode=statusCode;this.statusText=statusText;this.content=content}return HttpResponse}();var HttpClient=function(){function HttpClient(){}HttpClient.prototype.get=function(url,options){return this.send(__assign({},options,{method:"GET",url:url}))};HttpClient.prototype.post=function(url,options){return this.send(__assign({},options,{method:"POST",url:url}))};HttpClient.prototype.delete=function(url,options){return this.send(__assign({},options,{method:"DELETE",url:url}))};HttpClient.prototype.getCookieString=function(url){return""};return HttpClient}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"DefaultHttpClient",function(){return DefaultHttpClient});var _Errors__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(4);var _HttpClient__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(5);var _NodeHttpClient__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(7);var _XhrHttpClient__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(8);var __extends=undefined&&undefined.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var DefaultHttpClient=function(_super){__extends(DefaultHttpClient,_super);function DefaultHttpClient(logger){var _this=_super.call(this)||this;if(typeof XMLHttpRequest!=="undefined"){_this.httpClient=new _XhrHttpClient__WEBPACK_IMPORTED_MODULE_3__["XhrHttpClient"](logger)}else{_this.httpClient=new _NodeHttpClient__WEBPACK_IMPORTED_MODULE_2__["NodeHttpClient"](logger)}return _this}DefaultHttpClient.prototype.send=function(request){if(request.abortSignal&&request.abortSignal.aborted){return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_0__["AbortError"])}if(!request.method){return Promise.reject(new Error("No method defined."))}if(!request.url){return Promise.reject(new Error("No url defined."))}return this.httpClient.send(request)};DefaultHttpClient.prototype.getCookieString=function(url){return this.httpClient.getCookieString(url)};return DefaultHttpClient}(_HttpClient__WEBPACK_IMPORTED_MODULE_1__["HttpClient"])},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"NodeHttpClient",function(){return NodeHttpClient});var _HttpClient__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(5);var __extends=undefined&&undefined.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var NodeHttpClient=function(_super){__extends(NodeHttpClient,_super);function NodeHttpClient(logger){return _super.call(this)||this}NodeHttpClient.prototype.send=function(){return Promise.reject(new Error("If using Node either provide an XmlHttpRequest polyfill or consume the cjs or esm script instead of the browser/signalr.js one."))};return NodeHttpClient}(_HttpClient__WEBPACK_IMPORTED_MODULE_0__["HttpClient"])},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"XhrHttpClient",function(){return XhrHttpClient});var _Errors__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(4);var _HttpClient__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(5);var _ILogger__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(9);var __extends=undefined&&undefined.__extends||function(){var extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return function(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)}}();var XhrHttpClient=function(_super){__extends(XhrHttpClient,_super);function XhrHttpClient(logger){var _this=_super.call(this)||this;_this.logger=logger;return _this}XhrHttpClient.prototype.send=function(request){var _this=this;if(request.abortSignal&&request.abortSignal.aborted){return Promise.reject(new _Errors__WEBPACK_IMPORTED_MODULE_0__["AbortError"])}if(!request.method){return Promise.reject(new Error("No method defined."))}if(!request.url){return Promise.reject(new Error("No url defined."))}return new Promise(function(resolve,reject){var xhr=new XMLHttpRequest;xhr.open(request.method,request.url,true);xhr.withCredentials=true;xhr.setRequestHeader("X-Requested-With","XMLHttpRequest");xhr.setRequestHeader("Content-Type","text/plain;charset=UTF-8");var headers=request.headers;if(headers){Object.keys(headers).forEach(function(header){xhr.setRequestHeader(header,headers[header])})}if(request.responseType){xhr.responseType=request.responseType}if(request.abortSignal){request.abortSignal.onabort=function(){xhr.abort();reject(new _Errors__WEBPACK_IMPORTED_MODULE_0__["AbortError"])}}if(request.timeout){xhr.timeout=request.timeout}xhr.onload=function(){if(request.abortSignal){request.abortSignal.onabort=null}if(xhr.status>=200&&xhr.status<300){resolve(new _HttpClient__WEBPACK_IMPORTED_MODULE_1__["HttpResponse"](xhr.status,xhr.statusText,xhr.response||xhr.responseText))}else{reject(new _Errors__WEBPACK_IMPORTED_MODULE_0__["HttpError"](xhr.statusText,xhr.status))}};xhr.onerror=function(){_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Warning,"Error from HTTP request. "+xhr.status+": "+xhr.statusText+".");reject(new _Errors__WEBPACK_IMPORTED_MODULE_0__["HttpError"](xhr.statusText,xhr.status))};xhr.ontimeout=function(){_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Warning,"Timeout from HTTP request.");reject(new _Errors__WEBPACK_IMPORTED_MODULE_0__["TimeoutError"])};xhr.send(request.content||"")})};return XhrHttpClient}(_HttpClient__WEBPACK_IMPORTED_MODULE_1__["HttpClient"])},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"LogLevel",function(){return LogLevel});var LogLevel;(function(LogLevel){LogLevel[LogLevel["Trace"]=0]="Trace";LogLevel[LogLevel["Debug"]=1]="Debug";LogLevel[LogLevel["Information"]=2]="Information";LogLevel[LogLevel["Warning"]=3]="Warning";LogLevel[LogLevel["Error"]=4]="Error";LogLevel[LogLevel["Critical"]=5]="Critical";LogLevel[LogLevel["None"]=6]="None"})(LogLevel||(LogLevel={}))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HubConnectionState",function(){return HubConnectionState});__webpack_require__.d(__webpack_exports__,"HubConnection",function(){return HubConnection});var _HandshakeProtocol__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(11);var _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(15);var _ILogger__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(9);var _Subject__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(16);var _Utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(13);var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=undefined&&undefined.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var DEFAULT_TIMEOUT_IN_MS=30*1e3;var DEFAULT_PING_INTERVAL_IN_MS=15*1e3;var HubConnectionState;(function(HubConnectionState){HubConnectionState["Disconnected"]="Disconnected";HubConnectionState["Connecting"]="Connecting";HubConnectionState["Connected"]="Connected";HubConnectionState["Disconnecting"]="Disconnecting";HubConnectionState["Reconnecting"]="Reconnecting"})(HubConnectionState||(HubConnectionState={}));var HubConnection=function(){function HubConnection(connection,logger,protocol,reconnectPolicy){var _this=this;this.nextKeepAlive=0;_Utils__WEBPACK_IMPORTED_MODULE_4__["Arg"].isRequired(connection,"connection");_Utils__WEBPACK_IMPORTED_MODULE_4__["Arg"].isRequired(logger,"logger");_Utils__WEBPACK_IMPORTED_MODULE_4__["Arg"].isRequired(protocol,"protocol");this.serverTimeoutInMilliseconds=DEFAULT_TIMEOUT_IN_MS;this.keepAliveIntervalInMilliseconds=DEFAULT_PING_INTERVAL_IN_MS;this.logger=logger;this.protocol=protocol;this.connection=connection;this.reconnectPolicy=reconnectPolicy;this.handshakeProtocol=new _HandshakeProtocol__WEBPACK_IMPORTED_MODULE_0__["HandshakeProtocol"];this.connection.onreceive=function(data){return _this.processIncomingData(data)};this.connection.onclose=function(error){return _this.connectionClosed(error)};this.callbacks={};this.methods={};this.closedCallbacks=[];this.reconnectingCallbacks=[];this.reconnectedCallbacks=[];this.invocationId=0;this.receivedHandshakeResponse=false;this.connectionState=HubConnectionState.Disconnected;this.connectionStarted=false;this.cachedPingMessage=this.protocol.writeMessage({type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Ping})}HubConnection.create=function(connection,logger,protocol,reconnectPolicy){return new HubConnection(connection,logger,protocol,reconnectPolicy)};Object.defineProperty(HubConnection.prototype,"state",{get:function(){return this.connectionState},enumerable:true,configurable:true});Object.defineProperty(HubConnection.prototype,"connectionId",{get:function(){return this.connection?this.connection.connectionId||null:null},enumerable:true,configurable:true});Object.defineProperty(HubConnection.prototype,"baseUrl",{get:function(){return this.connection.baseUrl||""},set:function(url){if(this.connectionState!==HubConnectionState.Disconnected&&this.connectionState!==HubConnectionState.Reconnecting){throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.")}if(!url){throw new Error("The HubConnection url must be a valid url.")}this.connection.baseUrl=url},enumerable:true,configurable:true});HubConnection.prototype.start=function(){this.startPromise=this.startWithStateTransitions();return this.startPromise};HubConnection.prototype.startWithStateTransitions=function(){return __awaiter(this,void 0,void 0,function(){var e_1;return __generator(this,function(_a){switch(_a.label){case 0:if(this.connectionState!==HubConnectionState.Disconnected){return[2,Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."))]}this.connectionState=HubConnectionState.Connecting;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Starting HubConnection.");_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.startInternal()];case 2:_a.sent();this.connectionState=HubConnectionState.Connected;this.connectionStarted=true;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"HubConnection connected successfully.");return[3,4];case 3:e_1=_a.sent();this.connectionState=HubConnectionState.Disconnected;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"HubConnection failed to start successfully because of error '"+e_1+"'.");return[2,Promise.reject(e_1)];case 4:return[2]}})})};HubConnection.prototype.startInternal=function(){return __awaiter(this,void 0,void 0,function(){var handshakePromise,handshakeRequest,e_2;var _this=this;return __generator(this,function(_a){switch(_a.label){case 0:this.stopDuringStartError=undefined;this.receivedHandshakeResponse=false;handshakePromise=new Promise(function(resolve,reject){_this.handshakeResolver=resolve;_this.handshakeRejecter=reject});return[4,this.connection.start(this.protocol.transferFormat)];case 1:_a.sent();_a.label=2;case 2:_a.trys.push([2,5,,7]);handshakeRequest={protocol:this.protocol.name,version:this.protocol.version};this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Sending handshake request.");return[4,this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];case 3:_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Using HubProtocol '"+this.protocol.name+"'.");this.cleanupTimeout();this.resetTimeoutPeriod();this.resetKeepAliveInterval();return[4,handshakePromise];case 4:_a.sent();if(this.stopDuringStartError){throw this.stopDuringStartError}return[3,7];case 5:e_2=_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Hub handshake failed with error '"+e_2+"' during start(). Stopping HubConnection.");this.cleanupTimeout();this.cleanupPingTimer();return[4,this.connection.stop(e_2)];case 6:_a.sent();throw e_2;case 7:return[2]}})})};HubConnection.prototype.stop=function(){return __awaiter(this,void 0,void 0,function(){var startPromise,e_3;return __generator(this,function(_a){switch(_a.label){case 0:startPromise=this.startPromise;this.stopPromise=this.stopInternal();return[4,this.stopPromise];case 1:_a.sent();_a.label=2;case 2:_a.trys.push([2,4,,5]);return[4,startPromise];case 3:_a.sent();return[3,5];case 4:e_3=_a.sent();return[3,5];case 5:return[2]}})})};HubConnection.prototype.stopInternal=function(error){if(this.connectionState===HubConnectionState.Disconnected){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Call to HubConnection.stop("+error+") ignored because it is already in the disconnected state.");return Promise.resolve()}if(this.connectionState===HubConnectionState.Disconnecting){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Call to HttpConnection.stop("+error+") ignored because the connection is already in the disconnecting state.");return this.stopPromise}this.connectionState=HubConnectionState.Disconnecting;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Stopping HubConnection.");if(this.reconnectDelayHandle){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Connection stopped during reconnect delay. Done reconnecting.");clearTimeout(this.reconnectDelayHandle);this.reconnectDelayHandle=undefined;this.completeClose();return Promise.resolve()}this.cleanupTimeout();this.cleanupPingTimer();this.stopDuringStartError=error||new Error("The connection was stopped before the hub handshake could complete.");return this.connection.stop(error)};HubConnection.prototype.stream=function(methodName){var _this=this;var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}var _a=this.replaceStreamingParams(args),streams=_a[0],streamIds=_a[1];var invocationDescriptor=this.createStreamInvocation(methodName,args,streamIds);var promiseQueue;var subject=new _Subject__WEBPACK_IMPORTED_MODULE_3__["Subject"];subject.cancelCallback=function(){var cancelInvocation=_this.createCancelInvocation(invocationDescriptor.invocationId);delete _this.callbacks[invocationDescriptor.invocationId];return promiseQueue.then(function(){return _this.sendWithProtocol(cancelInvocation)})};this.callbacks[invocationDescriptor.invocationId]=function(invocationEvent,error){if(error){subject.error(error);return}else if(invocationEvent){if(invocationEvent.type===_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Completion){if(invocationEvent.error){subject.error(new Error(invocationEvent.error))}else{subject.complete()}}else{subject.next(invocationEvent.item)}}};promiseQueue=this.sendWithProtocol(invocationDescriptor).catch(function(e){subject.error(e);delete _this.callbacks[invocationDescriptor.invocationId]});this.launchStreams(streams,promiseQueue);return subject};HubConnection.prototype.sendMessage=function(message){this.resetKeepAliveInterval();return this.connection.send(message)};HubConnection.prototype.sendWithProtocol=function(message){return this.sendMessage(this.protocol.writeMessage(message))};HubConnection.prototype.send=function(methodName){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}var _a=this.replaceStreamingParams(args),streams=_a[0],streamIds=_a[1];var sendPromise=this.sendWithProtocol(this.createInvocation(methodName,args,true,streamIds));this.launchStreams(streams,sendPromise);return sendPromise};HubConnection.prototype.invoke=function(methodName){var _this=this;var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}var _a=this.replaceStreamingParams(args),streams=_a[0],streamIds=_a[1];var invocationDescriptor=this.createInvocation(methodName,args,false,streamIds);var p=new Promise(function(resolve,reject){_this.callbacks[invocationDescriptor.invocationId]=function(invocationEvent,error){if(error){reject(error);return}else if(invocationEvent){if(invocationEvent.type===_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Completion){if(invocationEvent.error){reject(new Error(invocationEvent.error))}else{resolve(invocationEvent.result)}}else{reject(new Error("Unexpected message type: "+invocationEvent.type))}}};var promiseQueue=_this.sendWithProtocol(invocationDescriptor).catch(function(e){reject(e);delete _this.callbacks[invocationDescriptor.invocationId]});_this.launchStreams(streams,promiseQueue)});return p};HubConnection.prototype.on=function(methodName,newMethod){if(!methodName||!newMethod){return}methodName=methodName.toLowerCase();if(!this.methods[methodName]){this.methods[methodName]=[]}if(this.methods[methodName].indexOf(newMethod)!==-1){return}this.methods[methodName].push(newMethod)};HubConnection.prototype.off=function(methodName,method){if(!methodName){return}methodName=methodName.toLowerCase();var handlers=this.methods[methodName];if(!handlers){return}if(method){var removeIdx=handlers.indexOf(method);if(removeIdx!==-1){handlers.splice(removeIdx,1);if(handlers.length===0){delete this.methods[methodName]}}}else{delete this.methods[methodName]}};HubConnection.prototype.onclose=function(callback){if(callback){this.closedCallbacks.push(callback)}};HubConnection.prototype.onreconnecting=function(callback){if(callback){this.reconnectingCallbacks.push(callback)}};HubConnection.prototype.onreconnected=function(callback){if(callback){this.reconnectedCallbacks.push(callback)}};HubConnection.prototype.processIncomingData=function(data){this.cleanupTimeout();if(!this.receivedHandshakeResponse){data=this.processHandshakeResponse(data);this.receivedHandshakeResponse=true}if(data){var messages=this.protocol.parseMessages(data,this.logger);for(var _i=0,messages_1=messages;_i<messages_1.length;_i++){var message=messages_1[_i];switch(message.type){case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Invocation:this.invokeClientMethod(message);break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].StreamItem:case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Completion:var callback=this.callbacks[message.invocationId];if(callback){if(message.type===_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Completion){delete this.callbacks[message.invocationId]}callback(message)}break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Ping:break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Close:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Close message received from server.");var error=message.error?new Error("Server returned an error on close: "+message.error):undefined;if(message.allowReconnect===true){this.connection.stop(error)}else{this.stopPromise=this.stopInternal(error)}break;default:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Warning,"Invalid message type: "+message.type+".");break}}}this.resetTimeoutPeriod()};HubConnection.prototype.processHandshakeResponse=function(data){var _a;var responseMessage;var remainingData;try{_a=this.handshakeProtocol.parseHandshakeResponse(data),remainingData=_a[0],responseMessage=_a[1]}catch(e){var message="Error parsing handshake response: "+e;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,message);var error=new Error(message);this.handshakeRejecter(error);throw error}if(responseMessage.error){var message="Server returned handshake error: "+responseMessage.error;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,message);var error=new Error(message);this.handshakeRejecter(error);throw error}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Server handshake complete.")}this.handshakeResolver();return remainingData};HubConnection.prototype.resetKeepAliveInterval=function(){if(this.connection.features.inherentKeepAlive){return}this.nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds;this.cleanupPingTimer()};HubConnection.prototype.resetTimeoutPeriod=function(){var _this=this;if(!this.connection.features||!this.connection.features.inherentKeepAlive){this.timeoutHandle=setTimeout(function(){return _this.serverTimeout()},this.serverTimeoutInMilliseconds);if(this.pingServerHandle===undefined){var nextPing=this.nextKeepAlive-(new Date).getTime();if(nextPing<0){nextPing=0}this.pingServerHandle=setTimeout(function(){return __awaiter(_this,void 0,void 0,function(){var _a;return __generator(this,function(_b){switch(_b.label){case 0:if(!(this.connectionState===HubConnectionState.Connected))return[3,4];_b.label=1;case 1:_b.trys.push([1,3,,4]);return[4,this.sendMessage(this.cachedPingMessage)];case 2:_b.sent();return[3,4];case 3:_a=_b.sent();this.cleanupPingTimer();return[3,4];case 4:return[2]}})})},nextPing)}}};HubConnection.prototype.serverTimeout=function(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))};HubConnection.prototype.invokeClientMethod=function(invocationMessage){var _this=this;var methods=this.methods[invocationMessage.target.toLowerCase()];if(methods){try{methods.forEach(function(m){return m.apply(_this,invocationMessage.arguments)})}catch(e){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"A callback for the method "+invocationMessage.target.toLowerCase()+" threw error '"+e+"'.")}if(invocationMessage.invocationId){var message="Server requested a response, which is not supported in this version of the client.";this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,message);this.stopPromise=this.stopInternal(new Error(message))}}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Warning,"No client method with the name '"+invocationMessage.target+"' found.")}};HubConnection.prototype.connectionClosed=function(error){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"HubConnection.connectionClosed("+error+") called while in state "+this.connectionState+".");this.stopDuringStartError=this.stopDuringStartError||error||new Error("The underlying connection was closed before the hub handshake could complete.");if(this.handshakeResolver){this.handshakeResolver()}this.cancelCallbacksWithError(error||new Error("Invocation canceled due to the underlying connection being closed."));this.cleanupTimeout();this.cleanupPingTimer();if(this.connectionState===HubConnectionState.Disconnecting){this.completeClose(error)}else if(this.connectionState===HubConnectionState.Connected&&this.reconnectPolicy){this.reconnect(error)}else if(this.connectionState===HubConnectionState.Connected){this.completeClose(error)}};HubConnection.prototype.completeClose=function(error){var _this=this;if(this.connectionStarted){this.connectionState=HubConnectionState.Disconnected;this.connectionStarted=false;try{this.closedCallbacks.forEach(function(c){return c.apply(_this,[error])})}catch(e){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"An onclose callback called with error '"+error+"' threw error '"+e+"'.")}}};HubConnection.prototype.reconnect=function(error){return __awaiter(this,void 0,void 0,function(){var reconnectStartTime,previousReconnectAttempts,retryError,nextRetryDelay,e_4;var _this=this;return __generator(this,function(_a){switch(_a.label){case 0:reconnectStartTime=Date.now();previousReconnectAttempts=0;retryError=error!==undefined?error:new Error("Attempting to reconnect due to a unknown error.");nextRetryDelay=this.getNextRetryDelay(previousReconnectAttempts++,0,retryError);if(nextRetryDelay===null){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.");this.completeClose(error);return[2]}this.connectionState=HubConnectionState.Reconnecting;if(error){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Connection reconnecting because of error '"+error+"'.")}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Connection reconnecting.")}if(this.onreconnecting){try{this.reconnectingCallbacks.forEach(function(c){return c.apply(_this,[error])})}catch(e){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"An onreconnecting callback called with error '"+error+"' threw error '"+e+"'.")}if(this.connectionState!==HubConnectionState.Reconnecting){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.");return[2]}}_a.label=1;case 1:if(!(nextRetryDelay!==null))return[3,7];this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Reconnect attempt number "+previousReconnectAttempts+" will start in "+nextRetryDelay+" ms.");return[4,new Promise(function(resolve){_this.reconnectDelayHandle=setTimeout(resolve,nextRetryDelay)})];case 2:_a.sent();this.reconnectDelayHandle=undefined;if(this.connectionState!==HubConnectionState.Reconnecting){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");return[2]}_a.label=3;case 3:_a.trys.push([3,5,,6]);return[4,this.startInternal()];case 4:_a.sent();this.connectionState=HubConnectionState.Connected;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"HubConnection reconnected successfully.");if(this.onreconnected){try{this.reconnectedCallbacks.forEach(function(c){return c.apply(_this,[_this.connection.connectionId])})}catch(e){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"An onreconnected callback called with connectionId '"+this.connection.connectionId+"; threw error '"+e+"'.")}}return[2];case 5:e_4=_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Reconnect attempt failed because of error '"+e_4+"'.");if(this.connectionState!==HubConnectionState.Reconnecting){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Debug,"Connection moved to the '"+this.connectionState+"' from the reconnecting state during reconnect attempt. Done reconnecting.");if(this.connectionState===HubConnectionState.Disconnecting){this.completeClose()}return[2]}retryError=e_4 instanceof Error?e_4:new Error(e_4.toString());nextRetryDelay=this.getNextRetryDelay(previousReconnectAttempts++,Date.now()-reconnectStartTime,retryError);return[3,6];case 6:return[3,1];case 7:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"Reconnect retries have been exhausted after "+(Date.now()-reconnectStartTime)+" ms and "+previousReconnectAttempts+" failed attempts. Connection disconnecting.");this.completeClose();return[2]}})})};HubConnection.prototype.getNextRetryDelay=function(previousRetryCount,elapsedMilliseconds,retryReason){try{return this.reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:elapsedMilliseconds,previousRetryCount:previousRetryCount,retryReason:retryReason})}catch(e){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"IRetryPolicy.nextRetryDelayInMilliseconds("+previousRetryCount+", "+elapsedMilliseconds+") threw error '"+e+"'.");return null}};HubConnection.prototype.cancelCallbacksWithError=function(error){var callbacks=this.callbacks;this.callbacks={};Object.keys(callbacks).forEach(function(key){var callback=callbacks[key];callback(null,error)})};HubConnection.prototype.cleanupPingTimer=function(){if(this.pingServerHandle){clearTimeout(this.pingServerHandle);this.pingServerHandle=undefined}};HubConnection.prototype.cleanupTimeout=function(){if(this.timeoutHandle){clearTimeout(this.timeoutHandle)}};HubConnection.prototype.createInvocation=function(methodName,args,nonblocking,streamIds){if(nonblocking){return{arguments:args,streamIds:streamIds,target:methodName,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Invocation}}else{var invocationId=this.invocationId;this.invocationId++;return{arguments:args,invocationId:invocationId.toString(),streamIds:streamIds,target:methodName,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Invocation}}};HubConnection.prototype.launchStreams=function(streams,promiseQueue){var _this=this;if(streams.length===0){return}if(!promiseQueue){promiseQueue=Promise.resolve()}var _loop_1=function(streamId){streams[streamId].subscribe({complete:function(){promiseQueue=promiseQueue.then(function(){return _this.sendWithProtocol(_this.createCompletionMessage(streamId))})},error:function(err){var message;if(err instanceof Error){message=err.message}else if(err&&err.toString){message=err.toString()}else{message="Unknown error"}promiseQueue=promiseQueue.then(function(){return _this.sendWithProtocol(_this.createCompletionMessage(streamId,message))})},next:function(item){promiseQueue=promiseQueue.then(function(){return _this.sendWithProtocol(_this.createStreamItemMessage(streamId,item))})}})};for(var streamId in streams){_loop_1(streamId)}};HubConnection.prototype.replaceStreamingParams=function(args){var streams=[];var streamIds=[];for(var i=0;i<args.length;i++){var argument=args[i];if(this.isObservable(argument)){var streamId=this.invocationId;this.invocationId++;streams[streamId]=argument;streamIds.push(streamId.toString());args.splice(i,1)}}return[streams,streamIds]};HubConnection.prototype.isObservable=function(arg){return arg&&arg.subscribe&&typeof arg.subscribe==="function"};HubConnection.prototype.createStreamInvocation=function(methodName,args,streamIds){var invocationId=this.invocationId;this.invocationId++;return{arguments:args,invocationId:invocationId.toString(),streamIds:streamIds,target:methodName,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].StreamInvocation}};HubConnection.prototype.createCancelInvocation=function(id){return{invocationId:id,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].CancelInvocation}};HubConnection.prototype.createStreamItemMessage=function(id,item){return{invocationId:id,item:item,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].StreamItem}};HubConnection.prototype.createCompletionMessage=function(id,error,result){if(error){return{error:error,invocationId:id,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Completion}}return{invocationId:id,result:result,type:_IHubProtocol__WEBPACK_IMPORTED_MODULE_1__["MessageType"].Completion}};return HubConnection}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HandshakeProtocol",function(){return HandshakeProtocol});var _TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(12);var _Utils__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(13);var HandshakeProtocol=function(){function HandshakeProtocol(){}HandshakeProtocol.prototype.writeHandshakeRequest=function(handshakeRequest){return _TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__["TextMessageFormat"].write(JSON.stringify(handshakeRequest))};HandshakeProtocol.prototype.parseHandshakeResponse=function(data){var responseMessage;var messageData;var remainingData;if(Object(_Utils__WEBPACK_IMPORTED_MODULE_1__["isArrayBuffer"])(data)||typeof Buffer!=="undefined"&&data instanceof Buffer){var binaryData=new Uint8Array(data);var separatorIndex=binaryData.indexOf(_TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__["TextMessageFormat"].RecordSeparatorCode);if(separatorIndex===-1){throw new Error("Message is incomplete.")}var responseLength=separatorIndex+1;messageData=String.fromCharCode.apply(null,binaryData.slice(0,responseLength));remainingData=binaryData.byteLength>responseLength?binaryData.slice(responseLength).buffer:null}else{var textData=data;var separatorIndex=textData.indexOf(_TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__["TextMessageFormat"].RecordSeparator);if(separatorIndex===-1){throw new Error("Message is incomplete.")}var responseLength=separatorIndex+1;messageData=textData.substring(0,responseLength);remainingData=textData.length>responseLength?textData.substring(responseLength):null}var messages=_TextMessageFormat__WEBPACK_IMPORTED_MODULE_0__["TextMessageFormat"].parse(messageData);var response=JSON.parse(messages[0]);if(response.type){throw new Error("Expected a handshake response from the server.")}responseMessage=response;return[remainingData,responseMessage]};return HandshakeProtocol}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"TextMessageFormat",function(){return TextMessageFormat});var TextMessageFormat=function(){function TextMessageFormat(){}TextMessageFormat.write=function(output){return""+output+TextMessageFormat.RecordSeparator};TextMessageFormat.parse=function(input){if(input[input.length-1]!==TextMessageFormat.RecordSeparator){throw new Error("Message is incomplete.")}var messages=input.split(TextMessageFormat.RecordSeparator);messages.pop();return messages};TextMessageFormat.RecordSeparatorCode=30;TextMessageFormat.RecordSeparator=String.fromCharCode(TextMessageFormat.RecordSeparatorCode);return TextMessageFormat}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"Arg",function(){return Arg});__webpack_require__.d(__webpack_exports__,"Platform",function(){return Platform});__webpack_require__.d(__webpack_exports__,"getDataDetail",function(){return getDataDetail});__webpack_require__.d(__webpack_exports__,"formatArrayBuffer",function(){return formatArrayBuffer});__webpack_require__.d(__webpack_exports__,"isArrayBuffer",function(){return isArrayBuffer});__webpack_require__.d(__webpack_exports__,"sendMessage",function(){return sendMessage});__webpack_require__.d(__webpack_exports__,"createLogger",function(){return createLogger});__webpack_require__.d(__webpack_exports__,"SubjectSubscription",function(){return SubjectSubscription});__webpack_require__.d(__webpack_exports__,"ConsoleLogger",function(){return ConsoleLogger});var _ILogger__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9);var _Loggers__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(14);var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=undefined&&undefined.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var Arg=function(){function Arg(){}Arg.isRequired=function(val,name){if(val===null||val===undefined){throw new Error("The '"+name+"' argument is required.")}};Arg.isIn=function(val,values,name){if(!(val in values)){throw new Error("Unknown "+name+" value: "+val+".")}};return Arg}();var Platform=function(){function Platform(){}Object.defineProperty(Platform,"isBrowser",{get:function(){return typeof window==="object"},enumerable:true,configurable:true});Object.defineProperty(Platform,"isWebWorker",{get:function(){return typeof self==="object"&&"importScripts"in self},enumerable:true,configurable:true});Object.defineProperty(Platform,"isNode",{get:function(){return!this.isBrowser&&!this.isWebWorker},enumerable:true,configurable:true});return Platform}();function getDataDetail(data,includeContent){var detail="";if(isArrayBuffer(data)){detail="Binary data of length "+data.byteLength;if(includeContent){detail+=". Content: '"+formatArrayBuffer(data)+"'"}}else if(typeof data==="string"){detail="String data of length "+data.length;if(includeContent){detail+=". Content: '"+data+"'"}}return detail}function formatArrayBuffer(data){var view=new Uint8Array(data);var str="";view.forEach(function(num){var pad=num<16?"0":"";str+="0x"+pad+num.toString(16)+" "});return str.substr(0,str.length-1)}function isArrayBuffer(val){return val&&typeof ArrayBuffer!=="undefined"&&(val instanceof ArrayBuffer||val.constructor&&val.constructor.name==="ArrayBuffer")}function sendMessage(logger,transportName,httpClient,url,accessTokenFactory,content,logMessageContent){return __awaiter(this,void 0,void 0,function(){var _a,headers,token,responseType,response;return __generator(this,function(_b){switch(_b.label){case 0:if(!accessTokenFactory)return[3,2];return[4,accessTokenFactory()];case 1:token=_b.sent();if(token){headers=(_a={},_a["Authorization"]="Bearer "+token,_a)}_b.label=2;case 2:logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"("+transportName+" transport) sending data. "+getDataDetail(content,logMessageContent)+".");responseType=isArrayBuffer(content)?"arraybuffer":"text";return[4,httpClient.post(url,{content:content,headers:headers,responseType:responseType})];case 3:response=_b.sent();logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"("+transportName+" transport) request complete. Response status: "+response.statusCode+".");return[2]}})})}function createLogger(logger){if(logger===undefined){return new ConsoleLogger(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Information)}if(logger===null){return _Loggers__WEBPACK_IMPORTED_MODULE_1__["NullLogger"].instance}if(logger.log){return logger}return new ConsoleLogger(logger)}var SubjectSubscription=function(){function SubjectSubscription(subject,observer){this.subject=subject;this.observer=observer}SubjectSubscription.prototype.dispose=function(){var index=this.subject.observers.indexOf(this.observer);if(index>-1){this.subject.observers.splice(index,1)}if(this.subject.observers.length===0&&this.subject.cancelCallback){this.subject.cancelCallback().catch(function(_){})}};return SubjectSubscription}();var ConsoleLogger=function(){function ConsoleLogger(minimumLogLevel){this.minimumLogLevel=minimumLogLevel;this.outputConsole=console}ConsoleLogger.prototype.log=function(logLevel,message){if(logLevel>=this.minimumLogLevel){switch(logLevel){case _ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Critical:case _ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Error:this.outputConsole.error("["+(new Date).toISOString()+"] "+_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"][logLevel]+": "+message);break;case _ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Warning:this.outputConsole.warn("["+(new Date).toISOString()+"] "+_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"][logLevel]+": "+message);break;case _ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Information:this.outputConsole.info("["+(new Date).toISOString()+"] "+_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"][logLevel]+": "+message);break;default:this.outputConsole.log("["+(new Date).toISOString()+"] "+_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"][logLevel]+": "+message);break}}};return ConsoleLogger}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"NullLogger",function(){return NullLogger});var NullLogger=function(){function NullLogger(){}NullLogger.prototype.log=function(_logLevel,_message){};NullLogger.instance=new NullLogger;return NullLogger}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"MessageType",function(){return MessageType});var MessageType;(function(MessageType){MessageType[MessageType["Invocation"]=1]="Invocation";MessageType[MessageType["StreamItem"]=2]="StreamItem";MessageType[MessageType["Completion"]=3]="Completion";MessageType[MessageType["StreamInvocation"]=4]="StreamInvocation";MessageType[MessageType["CancelInvocation"]=5]="CancelInvocation";MessageType[MessageType["Ping"]=6]="Ping";MessageType[MessageType["Close"]=7]="Close"})(MessageType||(MessageType={}))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"Subject",function(){return Subject});var _Utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(13);var Subject=function(){function Subject(){this.observers=[]}Subject.prototype.next=function(item){for(var _i=0,_a=this.observers;_i<_a.length;_i++){var observer=_a[_i];observer.next(item)}};Subject.prototype.error=function(err){for(var _i=0,_a=this.observers;_i<_a.length;_i++){var observer=_a[_i];if(observer.error){observer.error(err)}}};Subject.prototype.complete=function(){for(var _i=0,_a=this.observers;_i<_a.length;_i++){var observer=_a[_i];if(observer.complete){observer.complete()}}};Subject.prototype.subscribe=function(observer){this.observers.push(observer);return new _Utils__WEBPACK_IMPORTED_MODULE_0__["SubjectSubscription"](this,observer)};return Subject}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HubConnectionBuilder",function(){return HubConnectionBuilder});var _DefaultReconnectPolicy__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(18);var _HttpConnection__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(19);var _HubConnection__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(10);var _ILogger__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(9);var _JsonHubProtocol__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(25);var _Loggers__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(14);var _Utils__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(13);var __assign=undefined&&undefined.__assign||Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};var LogLevelNameMapping={trace:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Trace,debug:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Debug,info:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Information,information:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Information,warn:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Warning,warning:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Warning,error:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Error,critical:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].Critical,none:_ILogger__WEBPACK_IMPORTED_MODULE_3__["LogLevel"].None};function parseLogLevel(name){var mapping=LogLevelNameMapping[name.toLowerCase()];if(typeof mapping!=="undefined"){return mapping}else{throw new Error("Unknown log level: "+name)}}var HubConnectionBuilder=function(){function HubConnectionBuilder(){}HubConnectionBuilder.prototype.configureLogging=function(logging){_Utils__WEBPACK_IMPORTED_MODULE_6__["Arg"].isRequired(logging,"logging");if(isLogger(logging)){this.logger=logging}else if(typeof logging==="string"){var logLevel=parseLogLevel(logging);this.logger=new _Utils__WEBPACK_IMPORTED_MODULE_6__["ConsoleLogger"](logLevel)}else{this.logger=new _Utils__WEBPACK_IMPORTED_MODULE_6__["ConsoleLogger"](logging)}return this};HubConnectionBuilder.prototype.withUrl=function(url,transportTypeOrOptions){_Utils__WEBPACK_IMPORTED_MODULE_6__["Arg"].isRequired(url,"url");this.url=url;if(typeof transportTypeOrOptions==="object"){this.httpConnectionOptions=__assign({},this.httpConnectionOptions,transportTypeOrOptions)}else{this.httpConnectionOptions=__assign({},this.httpConnectionOptions,{transport:transportTypeOrOptions})}return this};HubConnectionBuilder.prototype.withHubProtocol=function(protocol){_Utils__WEBPACK_IMPORTED_MODULE_6__["Arg"].isRequired(protocol,"protocol");this.protocol=protocol;return this};HubConnectionBuilder.prototype.withAutomaticReconnect=function(retryDelaysOrReconnectPolicy){if(this.reconnectPolicy){throw new Error("A reconnectPolicy has already been set.")}if(!retryDelaysOrReconnectPolicy){this.reconnectPolicy=new _DefaultReconnectPolicy__WEBPACK_IMPORTED_MODULE_0__["DefaultReconnectPolicy"]}else if(Array.isArray(retryDelaysOrReconnectPolicy)){this.reconnectPolicy=new _DefaultReconnectPolicy__WEBPACK_IMPORTED_MODULE_0__["DefaultReconnectPolicy"](retryDelaysOrReconnectPolicy)}else{this.reconnectPolicy=retryDelaysOrReconnectPolicy}return this};HubConnectionBuilder.prototype.build=function(){var httpConnectionOptions=this.httpConnectionOptions||{};if(httpConnectionOptions.logger===undefined){httpConnectionOptions.logger=this.logger}if(!this.url){throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.")}var connection=new _HttpConnection__WEBPACK_IMPORTED_MODULE_1__["HttpConnection"](this.url,httpConnectionOptions);return _HubConnection__WEBPACK_IMPORTED_MODULE_2__["HubConnection"].create(connection,this.logger||_Loggers__WEBPACK_IMPORTED_MODULE_5__["NullLogger"].instance,this.protocol||new _JsonHubProtocol__WEBPACK_IMPORTED_MODULE_4__["JsonHubProtocol"],this.reconnectPolicy)};return HubConnectionBuilder}();function isLogger(logger){return logger.log!==undefined}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"DefaultReconnectPolicy",function(){return DefaultReconnectPolicy});var DEFAULT_RETRY_DELAYS_IN_MILLISECONDS=[0,2e3,1e4,3e4,null];var DefaultReconnectPolicy=function(){function DefaultReconnectPolicy(retryDelays){this.retryDelays=retryDelays!==undefined?retryDelays.concat([null]):DEFAULT_RETRY_DELAYS_IN_MILLISECONDS}DefaultReconnectPolicy.prototype.nextRetryDelayInMilliseconds=function(retryContext){return this.retryDelays[retryContext.previousRetryCount]};return DefaultReconnectPolicy}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HttpConnection",function(){return HttpConnection});__webpack_require__.d(__webpack_exports__,"TransportSendQueue",function(){return TransportSendQueue});var _DefaultHttpClient__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(6);var _ILogger__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(9);var _ITransport__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(20);var _LongPollingTransport__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(21);var _ServerSentEventsTransport__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(23);var _Utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(13);var _WebSocketTransport__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(24);var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=undefined&&undefined.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var MAX_REDIRECTS=100;var WebSocketModule=null;var EventSourceModule=null;if(_Utils__WEBPACK_IMPORTED_MODULE_5__["Platform"].isNode&&"function"!=="undefined"){var requireFunc=true?require:undefined;WebSocketModule=requireFunc("ws");EventSourceModule=requireFunc("eventsource")}var HttpConnection=function(){function HttpConnection(url,options){if(options===void 0){options={}}this.stopPromiseResolver=function(){};this.features={};this.negotiateVersion=1;_Utils__WEBPACK_IMPORTED_MODULE_5__["Arg"].isRequired(url,"url");this.logger=Object(_Utils__WEBPACK_IMPORTED_MODULE_5__["createLogger"])(options.logger);this.baseUrl=this.resolveUrl(url);options=options||{};options.logMessageContent=options.logMessageContent||false;if(!_Utils__WEBPACK_IMPORTED_MODULE_5__["Platform"].isNode&&typeof WebSocket!=="undefined"&&!options.WebSocket){options.WebSocket=WebSocket}else if(_Utils__WEBPACK_IMPORTED_MODULE_5__["Platform"].isNode&&!options.WebSocket){if(WebSocketModule){options.WebSocket=WebSocketModule}}if(!_Utils__WEBPACK_IMPORTED_MODULE_5__["Platform"].isNode&&typeof EventSource!=="undefined"&&!options.EventSource){options.EventSource=EventSource}else if(_Utils__WEBPACK_IMPORTED_MODULE_5__["Platform"].isNode&&!options.EventSource){if(typeof EventSourceModule!=="undefined"){options.EventSource=EventSourceModule}}this.httpClient=options.httpClient||new _DefaultHttpClient__WEBPACK_IMPORTED_MODULE_0__["DefaultHttpClient"](this.logger);this.connectionState="Disconnected";this.connectionStarted=false;this.options=options;this.onreceive=null;this.onclose=null}HttpConnection.prototype.start=function(transferFormat){return __awaiter(this,void 0,void 0,function(){var message,message;return __generator(this,function(_a){switch(_a.label){case 0:transferFormat=transferFormat||_ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"].Binary;_Utils__WEBPACK_IMPORTED_MODULE_5__["Arg"].isIn(transferFormat,_ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"],"transferFormat");this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Starting connection with transfer format '"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"][transferFormat]+"'.");if(this.connectionState!=="Disconnected"){return[2,Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."))]}this.connectionState="Connecting ";this.startInternalPromise=this.startInternal(transferFormat);return[4,this.startInternalPromise];case 1:_a.sent();if(!(this.connectionState==="Disconnecting"))return[3,3];message="Failed to start the HttpConnection before stop() was called.";this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,message);return[4,this.stopPromise];case 2:_a.sent();return[2,Promise.reject(new Error(message))];case 3:if(this.connectionState!=="Connected"){message="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,message);return[2,Promise.reject(new Error(message))]}_a.label=4;case 4:this.connectionStarted=true;return[2]}})})};HttpConnection.prototype.send=function(data){if(this.connectionState!=="Connected"){return Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State."))}if(!this.sendQueue){this.sendQueue=new TransportSendQueue(this.transport)}return this.sendQueue.send(data)};HttpConnection.prototype.stop=function(error){return __awaiter(this,void 0,void 0,function(){var _this=this;return __generator(this,function(_a){switch(_a.label){case 0:if(this.connectionState==="Disconnected"){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Call to HttpConnection.stop("+error+") ignored because the connection is already in the disconnected state.");return[2,Promise.resolve()]}if(this.connectionState==="Disconnecting"){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Call to HttpConnection.stop("+error+") ignored because the connection is already in the disconnecting state.");return[2,this.stopPromise]}this.connectionState="Disconnecting";this.stopPromise=new Promise(function(resolve){_this.stopPromiseResolver=resolve});return[4,this.stopInternal(error)];case 1:_a.sent();return[4,this.stopPromise];case 2:_a.sent();return[2]}})})};HttpConnection.prototype.stopInternal=function(error){return __awaiter(this,void 0,void 0,function(){var e_1,e_2;return __generator(this,function(_a){switch(_a.label){case 0:this.stopError=error;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.startInternalPromise];case 2:_a.sent();return[3,4];case 3:e_1=_a.sent();return[3,4];case 4:if(!this.transport)return[3,9];_a.label=5;case 5:_a.trys.push([5,7,,8]);return[4,this.transport.stop()];case 6:_a.sent();return[3,8];case 7:e_2=_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"HttpConnection.transport.stop() threw error '"+e_2+"'.");this.stopConnection();return[3,8];case 8:this.transport=undefined;return[3,10];case 9:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.");_a.label=10;case 10:return[2]}})})};HttpConnection.prototype.startInternal=function(transferFormat){return __awaiter(this,void 0,void 0,function(){var url,negotiateResponse,redirects,_loop_1,this_1,e_3;return __generator(this,function(_a){switch(_a.label){case 0:url=this.baseUrl;this.accessTokenFactory=this.options.accessTokenFactory;_a.label=1;case 1:_a.trys.push([1,12,,13]);if(!this.options.skipNegotiation)return[3,5];if(!(this.options.transport===_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].WebSockets))return[3,3];this.transport=this.constructTransport(_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].WebSockets);return[4,this.startTransport(url,transferFormat)];case 2:_a.sent();return[3,4];case 3:throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");case 4:return[3,11];case 5:negotiateResponse=null;redirects=0;_loop_1=function(){var accessToken_1;return __generator(this,function(_a){switch(_a.label){case 0:return[4,this_1.getNegotiationResponse(url)];case 1:negotiateResponse=_a.sent();if(this_1.connectionState==="Disconnecting"||this_1.connectionState==="Disconnected"){throw new Error("The connection was stopped during negotiation.")}if(negotiateResponse.error){throw new Error(negotiateResponse.error)}if(negotiateResponse.ProtocolVersion){throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.")}if(negotiateResponse.url){url=negotiateResponse.url}if(negotiateResponse.accessToken){accessToken_1=negotiateResponse.accessToken;this_1.accessTokenFactory=function(){return accessToken_1}}redirects++;return[2]}})};this_1=this;_a.label=6;case 6:return[5,_loop_1()];case 7:_a.sent();_a.label=8;case 8:if(negotiateResponse.url&&redirects<MAX_REDIRECTS)return[3,6];_a.label=9;case 9:if(redirects===MAX_REDIRECTS&&negotiateResponse.url){throw new Error("Negotiate redirection limit exceeded.")}return[4,this.createTransport(url,this.options.transport,negotiateResponse,transferFormat)];case 10:_a.sent();_a.label=11;case 11:if(this.transport instanceof _LongPollingTransport__WEBPACK_IMPORTED_MODULE_3__["LongPollingTransport"]){this.features.inherentKeepAlive=true}if(this.connectionState==="Connecting "){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"The HttpConnection connected successfully.");this.connectionState="Connected"}return[3,13];case 12:e_3=_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"Failed to start the connection: "+e_3);this.connectionState="Disconnected";this.transport=undefined;this.stopPromiseResolver();return[2,Promise.reject(e_3)];case 13:return[2]}})})};HttpConnection.prototype.getNegotiationResponse=function(url){return __awaiter(this,void 0,void 0,function(){var _a,headers,token,negotiateUrl,response,negotiateResponse,e_4;return __generator(this,function(_b){switch(_b.label){case 0:if(!this.accessTokenFactory)return[3,2];return[4,this.accessTokenFactory()];case 1:token=_b.sent();if(token){headers=(_a={},_a["Authorization"]="Bearer "+token,_a)}_b.label=2;case 2:negotiateUrl=this.resolveNegotiateUrl(url);this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Sending negotiation request: "+negotiateUrl+".");_b.label=3;case 3:_b.trys.push([3,5,,6]);return[4,this.httpClient.post(negotiateUrl,{content:"",headers:headers})];case 4:response=_b.sent();if(response.statusCode!==200){return[2,Promise.reject(new Error("Unexpected status code returned from negotiate "+response.statusCode))]}negotiateResponse=JSON.parse(response.content);if(!negotiateResponse.negotiateVersion||negotiateResponse.negotiateVersion<1){negotiateResponse.connectionToken=negotiateResponse.connectionId}return[2,negotiateResponse];case 5:e_4=_b.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"Failed to complete negotiation with the server: "+e_4);return[2,Promise.reject(e_4)];case 6:return[2]}})})};HttpConnection.prototype.createConnectUrl=function(url,connectionToken){if(!connectionToken){return url}return url+(url.indexOf("?")===-1?"?":"&")+("id="+connectionToken)};HttpConnection.prototype.createTransport=function(url,requestedTransport,negotiateResponse,requestedTransferFormat){return __awaiter(this,void 0,void 0,function(){var connectUrl,transportExceptions,transports,negotiate,_i,transports_1,endpoint,transportOrError,ex_1,ex_2,message;return __generator(this,function(_a){switch(_a.label){case 0:connectUrl=this.createConnectUrl(url,negotiateResponse.connectionToken);if(!this.isITransport(requestedTransport))return[3,2];this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Connection was provided an instance of ITransport, using that directly.");this.transport=requestedTransport;return[4,this.startTransport(connectUrl,requestedTransferFormat)];case 1:_a.sent();this.connectionId=negotiateResponse.connectionId;return[2];case 2:transportExceptions=[];transports=negotiateResponse.availableTransports||[];negotiate=negotiateResponse;_i=0,transports_1=transports;_a.label=3;case 3:if(!(_i<transports_1.length))return[3,13];endpoint=transports_1[_i];transportOrError=this.resolveTransportOrError(endpoint,requestedTransport,requestedTransferFormat);if(!(transportOrError instanceof Error))return[3,4];transportExceptions.push(endpoint.transport+" failed: "+transportOrError);return[3,12];case 4:if(!this.isITransport(transportOrError))return[3,12];this.transport=transportOrError;if(!!negotiate)return[3,9];_a.label=5;case 5:_a.trys.push([5,7,,8]);return[4,this.getNegotiationResponse(url)];case 6:negotiate=_a.sent();return[3,8];case 7:ex_1=_a.sent();return[2,Promise.reject(ex_1)];case 8:connectUrl=this.createConnectUrl(url,negotiate.connectionToken);_a.label=9;case 9:_a.trys.push([9,11,,12]);return[4,this.startTransport(connectUrl,requestedTransferFormat)];case 10:_a.sent();this.connectionId=negotiate.connectionId;return[2];case 11:ex_2=_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"Failed to start the transport '"+endpoint.transport+"': "+ex_2);negotiate=undefined;transportExceptions.push(endpoint.transport+" failed: "+ex_2);if(this.connectionState!=="Connecting "){message="Failed to select transport before stop() was called.";this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,message);return[2,Promise.reject(new Error(message))]}return[3,12];case 12:_i++;return[3,3];case 13:if(transportExceptions.length>0){return[2,Promise.reject(new Error("Unable to connect to the server with any of the available transports. "+transportExceptions.join(" ")))]}return[2,Promise.reject(new Error("None of the transports supported by the client are supported by the server."))]}})})};HttpConnection.prototype.constructTransport=function(transport){switch(transport){case _ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].WebSockets:if(!this.options.WebSocket){throw new Error("'WebSocket' is not supported in your environment.")}return new _WebSocketTransport__WEBPACK_IMPORTED_MODULE_6__["WebSocketTransport"](this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||false,this.options.WebSocket);case _ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].ServerSentEvents:if(!this.options.EventSource){throw new Error("'EventSource' is not supported in your environment.")}return new _ServerSentEventsTransport__WEBPACK_IMPORTED_MODULE_4__["ServerSentEventsTransport"](this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||false,this.options.EventSource);case _ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].LongPolling:return new _LongPollingTransport__WEBPACK_IMPORTED_MODULE_3__["LongPollingTransport"](this.httpClient,this.accessTokenFactory,this.logger,this.options.logMessageContent||false);default:throw new Error("Unknown transport: "+transport+".")}};HttpConnection.prototype.startTransport=function(url,transferFormat){var _this=this;this.transport.onreceive=this.onreceive;this.transport.onclose=function(e){return _this.stopConnection(e)};return this.transport.connect(url,transferFormat)};HttpConnection.prototype.resolveTransportOrError=function(endpoint,requestedTransport,requestedTransferFormat){var transport=_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][endpoint.transport];if(transport===null||transport===undefined){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Skipping transport '"+endpoint.transport+"' because it is not supported by this client.");return new Error("Skipping transport '"+endpoint.transport+"' because it is not supported by this client.")}else{if(transportMatches(requestedTransport,transport)){var transferFormats=endpoint.transferFormats.map(function(s){return _ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"][s]});if(transferFormats.indexOf(requestedTransferFormat)>=0){if(transport===_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].WebSockets&&!this.options.WebSocket||transport===_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"].ServerSentEvents&&!this.options.EventSource){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Skipping transport '"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"' because it is not supported in your environment.'");return new Error("'"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"' is not supported in your environment.")}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Selecting transport '"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"'.");try{return this.constructTransport(transport)}catch(ex){return ex}}}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Skipping transport '"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"' because it does not support the requested transfer format '"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"][requestedTransferFormat]+"'.");return new Error("'"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"' does not support "+_ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"][requestedTransferFormat]+".")}}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Skipping transport '"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"' because it was disabled by the client.");return new Error("'"+_ITransport__WEBPACK_IMPORTED_MODULE_2__["HttpTransportType"][transport]+"' is disabled by the client.")}}};HttpConnection.prototype.isITransport=function(transport){return transport&&typeof transport==="object"&&"connect"in transport};HttpConnection.prototype.stopConnection=function(error){var _this=this;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"HttpConnection.stopConnection("+error+") called while in state "+this.connectionState+".");this.transport=undefined;error=this.stopError||error;this.stopError=undefined;if(this.connectionState==="Disconnected"){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Debug,"Call to HttpConnection.stopConnection("+error+") was ignored because the connection is already in the disconnected state.");return}if(this.connectionState==="Connecting "){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Warning,"Call to HttpConnection.stopConnection("+error+") was ignored because the connection hasn't yet left the in the connecting state.");return}if(this.connectionState==="Disconnecting"){this.stopPromiseResolver()}if(error){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"Connection disconnected with error '"+error+"'.")}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Information,"Connection disconnected.")}if(this.sendQueue){this.sendQueue.stop().catch(function(e){_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"TransportSendQueue.stop() threw error '"+e+"'.")});this.sendQueue=undefined}this.connectionId=undefined;this.connectionState="Disconnected";if(this.connectionStarted){this.connectionStarted=false;try{if(this.onclose){this.onclose(error)}}catch(e){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Error,"HttpConnection.onclose("+error+") threw error '"+e+"'.")}}};HttpConnection.prototype.resolveUrl=function(url){if(url.lastIndexOf("https://",0)===0||url.lastIndexOf("http://",0)===0){return url}if(!_Utils__WEBPACK_IMPORTED_MODULE_5__["Platform"].isBrowser||!window.document){throw new Error("Cannot resolve '"+url+"'.")}var aTag=window.document.createElement("a");aTag.href=url;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Information,"Normalizing '"+url+"' to '"+aTag.href+"'.");return aTag.href};HttpConnection.prototype.resolveNegotiateUrl=function(url){var index=url.indexOf("?");var negotiateUrl=url.substring(0,index===-1?url.length:index);if(negotiateUrl[negotiateUrl.length-1]!=="/"){negotiateUrl+="/"}negotiateUrl+="negotiate";negotiateUrl+=index===-1?"":url.substring(index);if(negotiateUrl.indexOf("negotiateVersion")===-1){negotiateUrl+=index===-1?"?":"&";negotiateUrl+="negotiateVersion="+this.negotiateVersion}return negotiateUrl};return HttpConnection}();function transportMatches(requestedTransport,actualTransport){return!requestedTransport||(actualTransport&requestedTransport)!==0}var TransportSendQueue=function(){function TransportSendQueue(transport){this.transport=transport;this.buffer=[];this.executing=true;this.sendBufferedData=new PromiseSource;this.transportResult=new PromiseSource;this.sendLoopPromise=this.sendLoop()}TransportSendQueue.prototype.send=function(data){this.bufferData(data);if(!this.transportResult){this.transportResult=new PromiseSource}return this.transportResult.promise};TransportSendQueue.prototype.stop=function(){this.executing=false;this.sendBufferedData.resolve();return this.sendLoopPromise};TransportSendQueue.prototype.bufferData=function(data){if(this.buffer.length&&typeof this.buffer[0]!==typeof data){throw new Error("Expected data to be of type "+typeof this.buffer+" but was of type "+typeof data)}this.buffer.push(data);this.sendBufferedData.resolve()};TransportSendQueue.prototype.sendLoop=function(){return __awaiter(this,void 0,void 0,function(){var transportResult,data,error_1;return __generator(this,function(_a){switch(_a.label){case 0:if(false){}return[4,this.sendBufferedData.promise];case 1:_a.sent();if(!this.executing){if(this.transportResult){this.transportResult.reject("Connection stopped.")}return[3,6]}this.sendBufferedData=new PromiseSource;transportResult=this.transportResult;this.transportResult=undefined;data=typeof this.buffer[0]==="string"?this.buffer.join(""):TransportSendQueue.concatBuffers(this.buffer);this.buffer.length=0;_a.label=2;case 2:_a.trys.push([2,4,,5]);return[4,this.transport.send(data)];case 3:_a.sent();transportResult.resolve();return[3,5];case 4:error_1=_a.sent();transportResult.reject(error_1);return[3,5];case 5:return[3,0];case 6:return[2]}})})};TransportSendQueue.concatBuffers=function(arrayBuffers){var totalLength=arrayBuffers.map(function(b){return b.byteLength}).reduce(function(a,b){return a+b});var result=new Uint8Array(totalLength);var offset=0;for(var _i=0,arrayBuffers_1=arrayBuffers;_i<arrayBuffers_1.length;_i++){var item=arrayBuffers_1[_i];result.set(new Uint8Array(item),offset);offset+=item.byteLength}return result};return TransportSendQueue}();var PromiseSource=function(){function PromiseSource(){var _this=this;this.promise=new Promise(function(resolve,reject){var _a;return _a=[resolve,reject],_this.resolver=_a[0],_this.rejecter=_a[1],_a})}PromiseSource.prototype.resolve=function(){this.resolver()};PromiseSource.prototype.reject=function(reason){this.rejecter(reason)};return PromiseSource}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"HttpTransportType",function(){return HttpTransportType});__webpack_require__.d(__webpack_exports__,"TransferFormat",function(){return TransferFormat});var HttpTransportType;(function(HttpTransportType){HttpTransportType[HttpTransportType["None"]=0]="None";HttpTransportType[HttpTransportType["WebSockets"]=1]="WebSockets";HttpTransportType[HttpTransportType["ServerSentEvents"]=2]="ServerSentEvents";HttpTransportType[HttpTransportType["LongPolling"]=4]="LongPolling"})(HttpTransportType||(HttpTransportType={}));var TransferFormat;(function(TransferFormat){TransferFormat[TransferFormat["Text"]=1]="Text";TransferFormat[TransferFormat["Binary"]=2]="Binary"})(TransferFormat||(TransferFormat={}))},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"LongPollingTransport",function(){return LongPollingTransport});var _AbortController__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(22);var _Errors__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(4);var _ILogger__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(9);var _ITransport__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(20);var _Utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(13);var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=undefined&&undefined.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var LongPollingTransport=function(){function LongPollingTransport(httpClient,accessTokenFactory,logger,logMessageContent){this.httpClient=httpClient;this.accessTokenFactory=accessTokenFactory;this.logger=logger;this.pollAbort=new _AbortController__WEBPACK_IMPORTED_MODULE_0__["AbortController"];this.logMessageContent=logMessageContent;this.running=false;this.onreceive=null;this.onclose=null}Object.defineProperty(LongPollingTransport.prototype,"pollAborted",{get:function(){return this.pollAbort.aborted},enumerable:true,configurable:true});LongPollingTransport.prototype.connect=function(url,transferFormat){return __awaiter(this,void 0,void 0,function(){var pollOptions,token,pollUrl,response;return __generator(this,function(_a){switch(_a.label){case 0:_Utils__WEBPACK_IMPORTED_MODULE_4__["Arg"].isRequired(url,"url");_Utils__WEBPACK_IMPORTED_MODULE_4__["Arg"].isRequired(transferFormat,"transferFormat");_Utils__WEBPACK_IMPORTED_MODULE_4__["Arg"].isIn(transferFormat,_ITransport__WEBPACK_IMPORTED_MODULE_3__["TransferFormat"],"transferFormat");this.url=url;this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Connecting.");if(transferFormat===_ITransport__WEBPACK_IMPORTED_MODULE_3__["TransferFormat"].Binary&&(typeof XMLHttpRequest!=="undefined"&&typeof(new XMLHttpRequest).responseType!=="string")){throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.")}pollOptions={abortSignal:this.pollAbort.signal,headers:{},timeout:1e5};if(transferFormat===_ITransport__WEBPACK_IMPORTED_MODULE_3__["TransferFormat"].Binary){pollOptions.responseType="arraybuffer"}return[4,this.getAccessToken()];case 1:token=_a.sent();this.updateHeaderToken(pollOptions,token);pollUrl=url+"&_="+Date.now();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) polling: "+pollUrl+".");return[4,this.httpClient.get(pollUrl,pollOptions)];case 2:response=_a.sent();if(response.statusCode!==200){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"(LongPolling transport) Unexpected response code: "+response.statusCode+".");this.closeError=new _Errors__WEBPACK_IMPORTED_MODULE_1__["HttpError"](response.statusText||"",response.statusCode);this.running=false}else{this.running=true}this.receiving=this.poll(this.url,pollOptions);return[2]}})})};LongPollingTransport.prototype.getAccessToken=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!this.accessTokenFactory)return[3,2];return[4,this.accessTokenFactory()];case 1:return[2,_a.sent()];case 2:return[2,null]}})})};LongPollingTransport.prototype.updateHeaderToken=function(request,token){if(!request.headers){request.headers={}}if(token){request.headers["Authorization"]="Bearer "+token;return}if(request.headers["Authorization"]){delete request.headers["Authorization"]}};LongPollingTransport.prototype.poll=function(url,pollOptions){return __awaiter(this,void 0,void 0,function(){var token,pollUrl,response,e_1;return __generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,,8,9]);_a.label=1;case 1:if(!this.running)return[3,7];return[4,this.getAccessToken()];case 2:token=_a.sent();this.updateHeaderToken(pollOptions,token);_a.label=3;case 3:_a.trys.push([3,5,,6]);pollUrl=url+"&_="+Date.now();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) polling: "+pollUrl+".");return[4,this.httpClient.get(pollUrl,pollOptions)];case 4:response=_a.sent();if(response.statusCode===204){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Information,"(LongPolling transport) Poll terminated by server.");this.running=false}else if(response.statusCode!==200){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Error,"(LongPolling transport) Unexpected response code: "+response.statusCode+".");this.closeError=new _Errors__WEBPACK_IMPORTED_MODULE_1__["HttpError"](response.statusText||"",response.statusCode);this.running=false}else{if(response.content){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) data received. "+Object(_Utils__WEBPACK_IMPORTED_MODULE_4__["getDataDetail"])(response.content,this.logMessageContent)+".");if(this.onreceive){this.onreceive(response.content)}}else{this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Poll timed out, reissuing.")}}return[3,6];case 5:e_1=_a.sent();if(!this.running){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Poll errored after shutdown: "+e_1.message)}else{if(e_1 instanceof _Errors__WEBPACK_IMPORTED_MODULE_1__["TimeoutError"]){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Poll timed out, reissuing.")}else{this.closeError=e_1;this.running=false}}return[3,6];case 6:return[3,1];case 7:return[3,9];case 8:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Polling complete.");if(!this.pollAborted){this.raiseOnClose()}return[7];case 9:return[2]}})})};LongPollingTransport.prototype.send=function(data){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(!this.running){return[2,Promise.reject(new Error("Cannot send until the transport is connected"))]}return[2,Object(_Utils__WEBPACK_IMPORTED_MODULE_4__["sendMessage"])(this.logger,"LongPolling",this.httpClient,this.url,this.accessTokenFactory,data,this.logMessageContent)]})})};LongPollingTransport.prototype.stop=function(){return __awaiter(this,void 0,void 0,function(){var deleteOptions,token;return __generator(this,function(_a){switch(_a.label){case 0:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Stopping polling.");this.running=false;this.pollAbort.abort();_a.label=1;case 1:_a.trys.push([1,,5,6]);return[4,this.receiving];case 2:_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) sending DELETE request to "+this.url+".");deleteOptions={headers:{}};return[4,this.getAccessToken()];case 3:token=_a.sent();this.updateHeaderToken(deleteOptions,token);return[4,this.httpClient.delete(this.url,deleteOptions)];case 4:_a.sent();this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) DELETE request sent.");return[3,6];case 5:this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,"(LongPolling transport) Stop finished.");this.raiseOnClose();return[7];case 6:return[2]}})})};LongPollingTransport.prototype.raiseOnClose=function(){if(this.onclose){var logMessage="(LongPolling transport) Firing onclose event.";if(this.closeError){logMessage+=" Error: "+this.closeError}this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_2__["LogLevel"].Trace,logMessage);this.onclose(this.closeError)}};return LongPollingTransport}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"AbortController",function(){return AbortController});var AbortController=function(){function AbortController(){this.isAborted=false;this.onabort=null}AbortController.prototype.abort=function(){if(!this.isAborted){this.isAborted=true;if(this.onabort){this.onabort()}}};Object.defineProperty(AbortController.prototype,"signal",{get:function(){return this},enumerable:true,configurable:true});Object.defineProperty(AbortController.prototype,"aborted",{get:function(){return this.isAborted},enumerable:true,configurable:true});return AbortController}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"ServerSentEventsTransport",function(){return ServerSentEventsTransport});var _ILogger__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9);var _ITransport__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(20);var _Utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(13);var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=undefined&&undefined.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var ServerSentEventsTransport=function(){function ServerSentEventsTransport(httpClient,accessTokenFactory,logger,logMessageContent,eventSourceConstructor){this.httpClient=httpClient;this.accessTokenFactory=accessTokenFactory;this.logger=logger;this.logMessageContent=logMessageContent;this.eventSourceConstructor=eventSourceConstructor;this.onreceive=null;this.onclose=null}ServerSentEventsTransport.prototype.connect=function(url,transferFormat){return __awaiter(this,void 0,void 0,function(){var token;var _this=this;return __generator(this,function(_a){switch(_a.label){case 0:_Utils__WEBPACK_IMPORTED_MODULE_2__["Arg"].isRequired(url,"url");_Utils__WEBPACK_IMPORTED_MODULE_2__["Arg"].isRequired(transferFormat,"transferFormat");_Utils__WEBPACK_IMPORTED_MODULE_2__["Arg"].isIn(transferFormat,_ITransport__WEBPACK_IMPORTED_MODULE_1__["TransferFormat"],"transferFormat");this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"(SSE transport) Connecting.");this.url=url;if(!this.accessTokenFactory)return[3,2];return[4,this.accessTokenFactory()];case 1:token=_a.sent();if(token){url+=(url.indexOf("?")<0?"?":"&")+("access_token="+encodeURIComponent(token))}_a.label=2;case 2:return[2,new Promise(function(resolve,reject){var opened=false;if(transferFormat!==_ITransport__WEBPACK_IMPORTED_MODULE_1__["TransferFormat"].Text){reject(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"));return}var eventSource;if(_Utils__WEBPACK_IMPORTED_MODULE_2__["Platform"].isBrowser||_Utils__WEBPACK_IMPORTED_MODULE_2__["Platform"].isWebWorker){eventSource=new _this.eventSourceConstructor(url,{withCredentials:true})}else{var cookies=_this.httpClient.getCookieString(url);eventSource=new _this.eventSourceConstructor(url,{withCredentials:true,headers:{Cookie:cookies}})}try{eventSource.onmessage=function(e){if(_this.onreceive){try{_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"(SSE transport) data received. "+Object(_Utils__WEBPACK_IMPORTED_MODULE_2__["getDataDetail"])(e.data,_this.logMessageContent)+".");_this.onreceive(e.data)}catch(error){_this.close(error);return}}};eventSource.onerror=function(e){var error=new Error(e.data||"Error occurred");if(opened){_this.close(error)}else{reject(error)}};eventSource.onopen=function(){_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Information,"SSE connected to "+_this.url);_this.eventSource=eventSource;opened=true;resolve()}}catch(e){reject(e);return}})]}})})};ServerSentEventsTransport.prototype.send=function(data){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(!this.eventSource){return[2,Promise.reject(new Error("Cannot send until the transport is connected"))]}return[2,Object(_Utils__WEBPACK_IMPORTED_MODULE_2__["sendMessage"])(this.logger,"SSE",this.httpClient,this.url,this.accessTokenFactory,data,this.logMessageContent)]})})};ServerSentEventsTransport.prototype.stop=function(){this.close();return Promise.resolve()};ServerSentEventsTransport.prototype.close=function(e){if(this.eventSource){this.eventSource.close();this.eventSource=undefined;if(this.onclose){this.onclose(e)}}};return ServerSentEventsTransport}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"WebSocketTransport",function(){return WebSocketTransport});var _ILogger__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(9);var _ITransport__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(20);var _Utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(13);var __awaiter=undefined&&undefined.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})};var __generator=undefined&&undefined.__generator||function(thisArg,body){var _={label:0,sent:function(){if(t[0]&1)throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=op[0]&2?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[op[0]&2,t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:false};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>0&&t[t.length-1])&&(op[0]===6||op[0]===2)){_=0;continue}if(op[0]===3&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(op[0]===6&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(op[0]&5)throw op[1];return{value:op[0]?op[1]:void 0,done:true}}};var WebSocketTransport=function(){function WebSocketTransport(httpClient,accessTokenFactory,logger,logMessageContent,webSocketConstructor){this.logger=logger;this.accessTokenFactory=accessTokenFactory;this.logMessageContent=logMessageContent;this.webSocketConstructor=webSocketConstructor;this.httpClient=httpClient;this.onreceive=null;this.onclose=null}WebSocketTransport.prototype.connect=function(url,transferFormat){return __awaiter(this,void 0,void 0,function(){var token;var _this=this;return __generator(this,function(_a){switch(_a.label){case 0:_Utils__WEBPACK_IMPORTED_MODULE_2__["Arg"].isRequired(url,"url");_Utils__WEBPACK_IMPORTED_MODULE_2__["Arg"].isRequired(transferFormat,"transferFormat");_Utils__WEBPACK_IMPORTED_MODULE_2__["Arg"].isIn(transferFormat,_ITransport__WEBPACK_IMPORTED_MODULE_1__["TransferFormat"],"transferFormat");this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"(WebSockets transport) Connecting.");if(!this.accessTokenFactory)return[3,2];return[4,this.accessTokenFactory()];case 1:token=_a.sent();if(token){url+=(url.indexOf("?")<0?"?":"&")+("access_token="+encodeURIComponent(token))}_a.label=2;case 2:return[2,new Promise(function(resolve,reject){url=url.replace(/^http/,"ws");var webSocket;var cookies=_this.httpClient.getCookieString(url);var opened=false;if(_Utils__WEBPACK_IMPORTED_MODULE_2__["Platform"].isNode&&cookies){webSocket=new _this.webSocketConstructor(url,undefined,{headers:{Cookie:""+cookies}})}if(!webSocket){webSocket=new _this.webSocketConstructor(url)}if(transferFormat===_ITransport__WEBPACK_IMPORTED_MODULE_1__["TransferFormat"].Binary){webSocket.binaryType="arraybuffer"}webSocket.onopen=function(_event){_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Information,"WebSocket connected to "+url+".");_this.webSocket=webSocket;opened=true;resolve()};webSocket.onerror=function(event){var error=null;if(typeof ErrorEvent!=="undefined"&&event instanceof ErrorEvent){error=event.error}else{error=new Error("There was an error with the transport.")}reject(error)};webSocket.onmessage=function(message){_this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"(WebSockets transport) data received. "+Object(_Utils__WEBPACK_IMPORTED_MODULE_2__["getDataDetail"])(message.data,_this.logMessageContent)+".");if(_this.onreceive){_this.onreceive(message.data)}};webSocket.onclose=function(event){if(opened){_this.close(event)}else{var error=null;if(typeof ErrorEvent!=="undefined"&&event instanceof ErrorEvent){error=event.error}else{error=new Error("There was an error with the transport.")}reject(error)}}})]}})})};WebSocketTransport.prototype.send=function(data){if(this.webSocket&&this.webSocket.readyState===this.webSocketConstructor.OPEN){this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"(WebSockets transport) sending data. "+Object(_Utils__WEBPACK_IMPORTED_MODULE_2__["getDataDetail"])(data,this.logMessageContent)+".");this.webSocket.send(data);return Promise.resolve()}return Promise.reject("WebSocket is not in the OPEN state")};WebSocketTransport.prototype.stop=function(){if(this.webSocket){this.close(undefined)}return Promise.resolve()};WebSocketTransport.prototype.close=function(event){if(this.webSocket){this.webSocket.onclose=function(){};this.webSocket.onmessage=function(){};this.webSocket.onerror=function(){};this.webSocket.close();this.webSocket=undefined}this.logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_0__["LogLevel"].Trace,"(WebSockets transport) socket closed.");if(this.onclose){if(event&&(event.wasClean===false||event.code!==1e3)){this.onclose(new Error("WebSocket closed with status code: "+event.code+" ("+event.reason+")."))}else{this.onclose()}}};return WebSocketTransport}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"JsonHubProtocol",function(){return JsonHubProtocol});var _IHubProtocol__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(15);var _ILogger__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(9);var _ITransport__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(20);var _Loggers__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(14);var _TextMessageFormat__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(12);var JSON_HUB_PROTOCOL_NAME="json";var JsonHubProtocol=function(){function JsonHubProtocol(){this.name=JSON_HUB_PROTOCOL_NAME;this.version=1;this.transferFormat=_ITransport__WEBPACK_IMPORTED_MODULE_2__["TransferFormat"].Text}JsonHubProtocol.prototype.parseMessages=function(input,logger){if(typeof input!=="string"){throw new Error("Invalid input for JSON hub protocol. Expected a string.")}if(!input){return[]}if(logger===null){logger=_Loggers__WEBPACK_IMPORTED_MODULE_3__["NullLogger"].instance}var messages=_TextMessageFormat__WEBPACK_IMPORTED_MODULE_4__["TextMessageFormat"].parse(input);var hubMessages=[];for(var _i=0,messages_1=messages;_i<messages_1.length;_i++){var message=messages_1[_i];var parsedMessage=JSON.parse(message);if(typeof parsedMessage.type!=="number"){throw new Error("Invalid payload.")}switch(parsedMessage.type){case _IHubProtocol__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Invocation:this.isInvocationMessage(parsedMessage);break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_0__["MessageType"].StreamItem:this.isStreamItemMessage(parsedMessage);break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Completion:this.isCompletionMessage(parsedMessage);break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Ping:break;case _IHubProtocol__WEBPACK_IMPORTED_MODULE_0__["MessageType"].Close:break;default:logger.log(_ILogger__WEBPACK_IMPORTED_MODULE_1__["LogLevel"].Information,"Unknown message type '"+parsedMessage.type+"' ignored.");continue}hubMessages.push(parsedMessage)}return hubMessages};JsonHubProtocol.prototype.writeMessage=function(message){return _TextMessageFormat__WEBPACK_IMPORTED_MODULE_4__["TextMessageFormat"].write(JSON.stringify(message))};JsonHubProtocol.prototype.isInvocationMessage=function(message){this.assertNotEmptyString(message.target,"Invalid payload for Invocation message.");if(message.invocationId!==undefined){this.assertNotEmptyString(message.invocationId,"Invalid payload for Invocation message.")}};JsonHubProtocol.prototype.isStreamItemMessage=function(message){this.assertNotEmptyString(message.invocationId,"Invalid payload for StreamItem message.");if(message.item===undefined){throw new Error("Invalid payload for StreamItem message.")}};JsonHubProtocol.prototype.isCompletionMessage=function(message){if(message.result&&message.error){throw new Error("Invalid payload for Completion message.")}if(!message.result&&message.error){this.assertNotEmptyString(message.error,"Invalid payload for Completion message.")}this.assertNotEmptyString(message.invocationId,"Invalid payload for Completion message.")};JsonHubProtocol.prototype.assertNotEmptyString=function(value,errorMessage){if(typeof value!=="string"||value===""){throw new Error(errorMessage)}};return JsonHubProtocol}()}])});
//# sourceMappingURL=signalr.min.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoApplication = (function () {
    function DrapoApplication() {
        this._isLoaded = false;
        this._logger = new DrapoLogger(this);
        this._router = new DrapoRouter(this);
        this._server = new DrapoServer(this);
        this._observer = new DrapoObserver(this);
        this._document = new DrapoDocument(this);
        this._controlFlow = new DrapoControlFlow(this);
        this._parser = new DrapoParser(this);
        this._storage = new DrapoStorage(this);
        this._solver = new DrapoSolver(this);
        this._binder = new DrapoBinder(this);
        this._config = new DrapoConfig(this);
        this._register = new DrapoRegister(this);
        this._serializer = new DrapoSerializer(this);
        this._barber = new DrapoBarber(this);
        this._searcher = new DrapoSearcher(this);
        this._modelHandler = new DrapoModelHandler(this);
        this._attributeHandler = new DrapoAttributeHandler(this);
        this._classHandler = new DrapoClassHandler(this);
        this._eventHandler = new DrapoEventHandler(this);
        this._functionHandler = new DrapoFunctionHandler(this);
        this._componentHandler = new DrapoComponentHandler(this);
        this._cookieHandler = new DrapoCookieHandler(this);
        this._sectorContainerHandler = new DrapoSectorContainerHandler(this);
        this._windowHandler = new DrapoWindowHandler(this);
        this._behaviorHandler = new DrapoBehaviorHandler(this);
        this._plumber = new DrapoPlumber(this);
        this._formatter = new DrapoFormatter(this);
        this._validator = new DrapoValidator(this);
        this._exceptionHandler = new DrapoExceptionHandler(this);
        this._globalization = new DrapoGlobalization(this);
        this._stylist = new DrapoStylist(this);
        this._viewportHandler = new DrapoViewportHandler(this);
        this._cacheHandler = new DrapoCacheHandler(this);
        this._worker = new DrapoWorker(this);
        this._debugger = new DrapoDebugger(this);
    }
    Object.defineProperty(DrapoApplication.prototype, "IsLoaded", {
        get: function () {
            return (this._isLoaded);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Log", {
        get: function () {
            return (this._logger);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Router", {
        get: function () {
            return (this._router);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Server", {
        get: function () {
            return (this._server);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Observer", {
        get: function () {
            return (this._observer);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Document", {
        get: function () {
            return (this._document);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "ControlFlow", {
        get: function () {
            return (this._controlFlow);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Parser", {
        get: function () {
            return (this._parser);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Storage", {
        get: function () {
            return (this._storage);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Solver", {
        get: function () {
            return (this._solver);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Binder", {
        get: function () {
            return (this._binder);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Config", {
        get: function () {
            return (this._config);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Register", {
        get: function () {
            return (this._register);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Serializer", {
        get: function () {
            return (this._serializer);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Barber", {
        get: function () {
            return (this._barber);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Searcher", {
        get: function () {
            return (this._searcher);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "ModelHandler", {
        get: function () {
            return (this._modelHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "AttributeHandler", {
        get: function () {
            return (this._attributeHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "ClassHandler", {
        get: function () {
            return (this._classHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "EventHandler", {
        get: function () {
            return (this._eventHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "FunctionHandler", {
        get: function () {
            return (this._functionHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "ComponentHandler", {
        get: function () {
            return (this._componentHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "CookieHandler", {
        get: function () {
            return (this._cookieHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "SectorContainerHandler", {
        get: function () {
            return (this._sectorContainerHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "WindowHandler", {
        get: function () {
            return (this._windowHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "BehaviorHandler", {
        get: function () {
            return (this._behaviorHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Plumber", {
        get: function () {
            return (this._plumber);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Formatter", {
        get: function () {
            return (this._formatter);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Validator", {
        get: function () {
            return (this._validator);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "ExceptionHandler", {
        get: function () {
            return (this._exceptionHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Globalization", {
        get: function () {
            return (this._globalization);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Stylist", {
        get: function () {
            return (this._stylist);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "ViewportHandler", {
        get: function () {
            return (this._viewportHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "CacheHandler", {
        get: function () {
            return (this._cacheHandler);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Worker", {
        get: function () {
            return (this._worker);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoApplication.prototype, "Debugger", {
        get: function () {
            return (this._debugger);
        },
        enumerable: false,
        configurable: true
    });
    DrapoApplication.prototype.OnLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 9]);
                        this.Log.WriteVerbose('Application - OnLoad - Started');
                        return [4, this.Debugger.Initialize()];
                    case 1:
                        _a.sent();
                        return [4, this.Plumber.ConnectPipe()];
                    case 2:
                        _a.sent();
                        return [4, this.CacheHandler.Initialize()];
                    case 3:
                        _a.sent();
                        return [4, this.Document.Resolve()];
                    case 4:
                        _a.sent();
                        return [4, this.Document.StartUnitTest()];
                    case 5:
                        _a.sent();
                        return [4, this.Debugger.ConnectDebugger()];
                    case 6:
                        _a.sent();
                        this._isLoaded = true;
                        this.Log.WriteVerbose('Application - OnLoad - Finished');
                        return [3, 9];
                    case 7:
                        e_1 = _a.sent();
                        return [4, this.ExceptionHandler.Handle(e_1, 'OnLoad')];
                    case 8:
                        _a.sent();
                        return [3, 9];
                    case 9: return [2];
                }
            });
        });
    };
    DrapoApplication.prototype.show = function () {
        this.Debugger.ShowDebugger();
        return ('');
    };
    DrapoApplication.prototype.close = function () {
        this.Debugger.CloseDebugger();
        return ('');
    };
    return DrapoApplication;
}());
window.onload = function () {
    var application = new DrapoApplication();
    var windowAny = window;
    windowAny.drapo = application;
    application.OnLoad();
};
window.onpopstate = function (e) {
    var windowAny = window;
    var application = windowAny.drapo;
    application.Router.OnPopState(e);
};
window.addEventListener('message', function (event) {
    var windowAny = window;
    var application = windowAny.drapo;
    application.Document.ReceiveMessage(event.data);
}, false);

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoAttributeHandler = (function () {
    function DrapoAttributeHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoAttributeHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoAttributeHandler.prototype.HasContentIDContext = function (content) {
        return (content.indexOf('d-id') > -1);
    };
    DrapoAttributeHandler.prototype.HasContentAttributeContext = function (content) {
        return (content.indexOf('d-attr') > -1);
    };
    DrapoAttributeHandler.prototype.ResolveAttr = function (el, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canBind === void 0) { canBind = true; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            var attributes, sector, context, i, attribute, attributeName, attributeValue, attributeType, format, formatResolved, _a, attributeValueOriginal, isValid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        attributes = this.ExtractAttr(el);
                        if (attributes.length == 0)
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        context = new DrapoContext();
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < attributes.length)) return [3, 9];
                        attribute = attributes[i];
                        attributeName = attribute[0];
                        attributeValue = attribute[1];
                        if (this.Application.Barber.HasMustacheContext(attributeValue, sector))
                            return [3, 8];
                        attributeType = attribute[2];
                        format = attribute[3];
                        if (!(format == null)) return [3, 2];
                        _a = null;
                        return [3, 4];
                    case 2: return [4, this.Application.ModelHandler.ResolveValueExpression(context, el, sector, format, false)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        formatResolved = _a;
                        attributeValueOriginal = attributeValue;
                        return [4, this.Application.ModelHandler.ResolveValueExpression(context, el, sector, attributeValue, canBind)];
                    case 5:
                        attributeValue = _b.sent();
                        attributeValue = this.ResolveConversionAttributeValue(attributeName, attributeValue, formatResolved);
                        if (attributeValue === attributeValueOriginal)
                            return [3, 8];
                        if (!(attributeType == null)) return [3, 6];
                        el.setAttribute(attributeName, attributeValue);
                        return [3, 8];
                    case 6:
                        if (!(attributeType === 'min')) return [3, 8];
                        return [4, this.Application.Solver.ResolveConditional(attributeValue)];
                    case 7:
                        isValid = _b.sent();
                        if (isValid)
                            el.setAttribute(attributeName, '');
                        else
                            el.removeAttribute(attributeName);
                        _b.label = 8;
                    case 8:
                        i++;
                        return [3, 1];
                    case 9: return [2];
                }
            });
        });
    };
    DrapoAttributeHandler.prototype.ResolveAttrContext = function (context, el, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var attributes, sector, i, attribute, attributeName, attributeValue, attributeType, format, formatResolved, _a, attributeValueOriginal, attributeNameFull, key, isValid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        attributes = this.ExtractAttr(el);
                        if (attributes.length == 0)
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < attributes.length)) return [3, 9];
                        attribute = attributes[i];
                        attributeName = attribute[0];
                        attributeValue = attribute[1];
                        attributeType = attribute[2];
                        format = attribute[3];
                        if (!(format == null)) return [3, 2];
                        _a = null;
                        return [3, 4];
                    case 2: return [4, this.Application.ModelHandler.ResolveValueExpression(context, el, sector, format, false)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        formatResolved = _a;
                        attributeValueOriginal = attributeValue;
                        return [4, this.Application.ModelHandler.ResolveValueExpression(context, el, sector, attributeValue, canBind)];
                    case 5:
                        attributeValue = _b.sent();
                        attributeValue = this.ResolveConversionAttributeValue(attributeName, attributeValue, formatResolved);
                        if (context.CanUpdateTemplate) {
                            attributeNameFull = 'd-attr-' + attributeName + (attributeType != null ? ('-' + attributeType) : '');
                            if (this.Application.Parser.HasMustache(attributeValue)) {
                                el.setAttribute(attributeNameFull, attributeValue);
                                return [3, 8];
                            }
                            if (this.Application.Parser.IsMustache(attributeValueOriginal)) {
                                key = this.Application.Parser.ParseMustache(attributeValueOriginal)[0];
                                if (!context.IsParentKey(key))
                                    el.removeAttribute(attributeNameFull);
                            }
                            else
                                el.removeAttribute(attributeNameFull);
                        }
                        if (attributeValue === attributeValueOriginal)
                            return [3, 8];
                        if (!(attributeType == null)) return [3, 6];
                        el.setAttribute(attributeName, attributeValue);
                        return [3, 8];
                    case 6:
                        if (!(attributeType === 'min')) return [3, 8];
                        return [4, this.Application.Solver.ResolveConditional(attributeValue)];
                    case 7:
                        isValid = _b.sent();
                        if (isValid)
                            el.setAttribute(attributeName, '');
                        else
                            el.removeAttribute(attributeName);
                        _b.label = 8;
                    case 8:
                        i++;
                        return [3, 1];
                    case 9: return [2];
                }
            });
        });
    };
    DrapoAttributeHandler.prototype.ResolveContextValue = function (context, el, sector, isContext, value, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canSubscribeDelay === void 0) { canSubscribeDelay = false; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            var valueOriginal, mustaches, j, mustache, mustacheParts, dataKey, isDataKeyContext, dataFields, _a, contextCurrent, data, valueNew;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        valueOriginal = value;
                        mustaches = this.Application.Parser.ParseMustaches(value);
                        j = 0;
                        _b.label = 1;
                    case 1:
                        if (!(j < mustaches.length)) return [3, 9];
                        mustache = mustaches[j];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        if ((dataKeyFilter != null) && (dataKey != dataKeyFilter))
                            return [3, 8];
                        isDataKeyContext = !this.Application.Storage.IsDataKey(dataKey, sector);
                        if (isDataKeyContext !== isContext)
                            return [3, 8];
                        if ((context !== null) && (!context.CanResolve(dataKey)))
                            return [3, 8];
                        dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                        if ((dataFieldFilter != null) && (dataFields[0] != dataFieldFilter))
                            return [3, 8];
                        _a = (isContext);
                        if (_a) return [3, 3];
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(dataKey, sector, mustacheParts)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        if (!_a) return [3, 7];
                        contextCurrent = context;
                        if (!(contextCurrent === null)) return [3, 5];
                        contextCurrent = new DrapoContext();
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 4:
                        data = _b.sent();
                        contextCurrent.Create(data, el, null, dataKey, dataKey, null, null);
                        _b.label = 5;
                    case 5: return [4, this.Application.Solver.ResolveDataPath(contextCurrent, null, el, sector, mustacheParts, canBind)];
                    case 6:
                        valueNew = _b.sent();
                        value = value.replace(mustache, valueNew);
                        return [3, 8];
                    case 7:
                        if (canSubscribeDelay) {
                            this.Application.Observer.SubscribeDelay(el, dataKey, dataFields);
                        }
                        _b.label = 8;
                    case 8:
                        j++;
                        return [3, 1];
                    case 9:
                        if (!(valueOriginal !== value)) return [3, 11];
                        return [4, this.ResolveContextValue(context, el, sector, isContext, value, canBind, canSubscribeDelay, null, null)];
                    case 10: return [2, (_b.sent())];
                    case 11: return [2, (value)];
                }
            });
        });
    };
    DrapoAttributeHandler.prototype.ExtractAttr = function (el) {
        var attributes = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var attributeProperty = this.Application.AttributeHandler.ExtractAttrProperty(attribute.nodeName);
            if (attributeProperty == null)
                continue;
            var format = el.getAttribute('d-attr-' + attributeProperty[0] + "-format");
            attributes.push([attributeProperty[0], attribute.nodeValue, attributeProperty[1], format]);
        }
        return (attributes);
    };
    DrapoAttributeHandler.prototype.ExtractAttrProperty = function (property) {
        var parse = this.Application.Parser.ParseProperty(property);
        if (parse.length < 3)
            return (null);
        if (parse[0] != 'd')
            return (null);
        if (parse[1].toLowerCase() != 'attr')
            return (null);
        var name = parse[2];
        var type = parse.length > 3 ? parse[3] : null;
        if (type === 'format')
            return (null);
        return ([name, type]);
    };
    DrapoAttributeHandler.prototype.ResolveID = function (el, sector, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canBind === void 0) { canBind = true; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            var did, context, expressionCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = el.getAttribute('d-id');
                        if (did == null)
                            return [2];
                        if (this.Application.Barber.HasMustacheContext(did, sector))
                            return [2];
                        context = new DrapoContext();
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, null, null, did, el, sector, canBind)];
                    case 1:
                        expressionCurrent = _a.sent();
                        if (did !== expressionCurrent)
                            el.setAttribute('d-id', expressionCurrent);
                        return [2];
                }
            });
        });
    };
    DrapoAttributeHandler.prototype.ResolveIDContext = function (context, el, sector, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var did, expressionCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = el.getAttribute('d-id');
                        if (did == null)
                            return [2];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, null, null, did, el, sector, canBind)];
                    case 1:
                        expressionCurrent = _a.sent();
                        if (did !== expressionCurrent)
                            el.setAttribute('d-id', expressionCurrent);
                        return [2];
                }
            });
        });
    };
    DrapoAttributeHandler.prototype.ResolveConversionAttributeValue = function (name, value, format) {
        if (name === 'src')
            return (this.ResolveConversionAttributeSourceValue(value));
        if (format != null)
            value = this.Application.Formatter.Format(value, format);
        return (value);
    };
    DrapoAttributeHandler.prototype.ResolveConversionAttributeSourceValue = function (value) {
        var url = this.Application.Server.ResolveUrl(value);
        var urlEncoded = this.Application.Server.EnsureUrlEncoded(url);
        return (urlEncoded);
    };
    return DrapoAttributeHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoBarber = (function () {
    function DrapoBarber(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoBarber.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoBarber.prototype.HasContentMustacheNodesContext = function (content) {
        var isInsideTag = false;
        var length = content.length - 1;
        for (var i = 0; i < length; i++) {
            var chr = content[i];
            if (chr == '>') {
                isInsideTag = false;
            }
            else if (chr == '<') {
                isInsideTag = true;
            }
            else if ((!isInsideTag) && (chr === '{')) {
                if (content[i + 1] === '{')
                    return (true);
            }
        }
        return (false);
    };
    DrapoBarber.prototype.HasContentMustacheAttributeContext = function (content) {
        var attributes = this.Application.Parser.ParseHTMLAttributes(content);
        for (var i = 0; i < attributes.length; i++) {
            var attribute = attributes[i];
            var attributeKey = attribute[0];
            if ((attributeKey !== 'value') && (attributeKey !== 'class'))
                continue;
            var attributeValue = attribute[1];
            if (attributeValue.indexOf('{{') >= 0)
                return (true);
        }
        return (false);
    };
    DrapoBarber.prototype.HasContentMustacheAttributeContextMustache = function (content, attribute) {
        return ((content.indexOf(attribute + '="{{') > -1) || (content.indexOf(attribute + "='{{") > -1));
    };
    DrapoBarber.prototype.ResolveMustaches = function (el, sector, stopAtSectors) {
        if (el === void 0) { el = null; }
        if (sector === void 0) { sector = null; }
        if (stopAtSectors === void 0) { stopAtSectors = true; }
        return __awaiter(this, void 0, void 0, function () {
            var renderContext, context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el == null)
                            el = document.documentElement;
                        if (sector === null)
                            sector = this.Application.Document.GetSector(el);
                        renderContext = new DrapoRenderContext();
                        context = new DrapoContext();
                        this.Application.ControlFlow.InitializeContext(context, el.outerHTML);
                        return [4, this.ResolveMustachesInternal(el, sector, context, renderContext, stopAtSectors)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Storage.LoadDataDelayedAndNotify()];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveMustachesInternal = function (el, sector, context, renderContext, stopAtSectors) {
        return __awaiter(this, void 0, void 0, function () {
            var pre, children, hasChildren, i, child, childSector, canRender;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pre = el.getAttribute != null ? el.getAttribute('d-pre') : null;
                        if (pre === 'true')
                            return [2];
                        children = [].slice.call(el.children);
                        hasChildren = children.length > 0;
                        if (!hasChildren) return [3, 8];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < children.length)) return [3, 7];
                        child = children[i];
                        childSector = child.getAttribute('d-sector');
                        if (childSector != null) {
                            if (stopAtSectors)
                                return [3, 6];
                            sector = childSector;
                        }
                        return [4, this.CanRender(child, sector)];
                    case 2:
                        canRender = _a.sent();
                        if (!canRender) return [3, 4];
                        return [4, this.ResolveMustachesInternal(child, sector, context, renderContext, stopAtSectors)];
                    case 3:
                        _a.sent();
                        return [3, 6];
                    case 4: return [4, this.Application.Document.RemoveElement(child)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3, 1];
                    case 7: return [3, 10];
                    case 8: return [4, this.ResolveMustacheElementLeaf(el)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        if (!context.CheckID) return [3, 12];
                        return [4, this.Application.AttributeHandler.ResolveID(el, sector)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12:
                        if (!context.CheckAttribute) return [3, 14];
                        return [4, this.Application.AttributeHandler.ResolveAttr(el)];
                    case 13:
                        _a.sent();
                        _a.label = 14;
                    case 14:
                        if (!context.CheckModel) return [3, 16];
                        return [4, this.ResolveModel(el)];
                    case 15:
                        _a.sent();
                        _a.label = 16;
                    case 16:
                        if (!context.CheckClass) return [3, 18];
                        return [4, this.Application.ClassHandler.ResolveClass(el, sector)];
                    case 17:
                        _a.sent();
                        _a.label = 18;
                    case 18:
                        if (!context.CheckValidation) return [3, 20];
                        return [4, this.Application.Validator.RegisterValidation(el, sector)];
                    case 19:
                        _a.sent();
                        _a.label = 20;
                    case 20:
                        if (!context.CheckEvent) return [3, 22];
                        return [4, this.Application.EventHandler.Attach(el, renderContext)];
                    case 21:
                        _a.sent();
                        _a.label = 22;
                    case 22:
                        if (!context.CheckBehavior) return [3, 24];
                        return [4, this.Application.BehaviorHandler.ResolveBehavior(el)];
                    case 23:
                        _a.sent();
                        _a.label = 24;
                    case 24: return [4, this.ResolveMustacheElementVisibility(el)];
                    case 25:
                        _a.sent();
                        return [4, this.ResolveCloak(el)];
                    case 26:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.CanRender = function (el, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var dRender, context, expression, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dRender = el.getAttribute('d-render');
                        if (dRender == null)
                            return [2, (true)];
                        if (this.Application.Barber.HasMustacheContext(dRender, sector))
                            return [2, (true)];
                        context = new DrapoContext();
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, dRender, null, false)];
                    case 1:
                        expression = _a.sent();
                        return [4, this.Application.Solver.ResolveConditional(expression)];
                    case 2:
                        result = _a.sent();
                        el.removeAttribute('d-render');
                        return [2, (result)];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveFilter = function (el, sector, canBind, dataKeyFilter, dataFieldFilter) {
        return __awaiter(this, void 0, void 0, function () {
            var children, hasChildren;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.Application.Document.IsElementPreprocessed(el))
                            return [2];
                        children = [].slice.call(el.children);
                        hasChildren = children.length > 0;
                        if (!!hasChildren) return [3, 2];
                        return [4, this.ResolveMustacheElementLeaf(el, false, true, dataKeyFilter, dataFieldFilter)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4, this.Application.AttributeHandler.ResolveID(el, sector, canBind, true, dataKeyFilter, dataFieldFilter)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.AttributeHandler.ResolveAttr(el, canBind, true, dataKeyFilter, dataFieldFilter)];
                    case 4:
                        _a.sent();
                        return [4, this.ResolveModel(el, canBind, true, dataKeyFilter, dataFieldFilter)];
                    case 5:
                        _a.sent();
                        return [4, this.Application.ClassHandler.ResolveClass(el, sector, canBind, true, dataKeyFilter, dataFieldFilter)];
                    case 6:
                        _a.sent();
                        return [4, this.ResolveMustacheElementVisibility(el, canBind)];
                    case 7:
                        _a.sent();
                        return [4, this.Application.Storage.LoadDataDelayedAndNotify()];
                    case 8:
                        _a.sent();
                        return [4, this.ResolveCloak(el, canBind)];
                    case 9:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveElementDelayed = function (el, sector, dataKeyFilter, dataFieldFilter) {
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveMustacheElementLeaf(el, true, false, dataKeyFilter, dataFieldFilter)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.AttributeHandler.ResolveAttr(el, false, false, dataKeyFilter, dataFieldFilter)];
                    case 2:
                        _a.sent();
                        return [4, this.Application.ClassHandler.ResolveClass(el, sector, false, false, dataKeyFilter, dataFieldFilter)];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveMustacheElementLeaf = function (el, canUseModel, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canUseModel === void 0) { canUseModel = false; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            var sector, model, text, updated, mustaches, i, mustache, mustacheParts, dataKey, dataFields, dataField, mustacheData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sector = this.Application.Document.GetSector(el);
                        model = canUseModel ? el.getAttribute('d-model') : null;
                        text = model != null ? model : this.Application.Document.GetText(el);
                        updated = false;
                        mustaches = this.Application.Parser.ParseMustaches(text);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < mustaches.length)) return [3, 4];
                        mustache = mustaches[i];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        if ((dataKeyFilter != null) && (dataKey != dataKeyFilter))
                            return [3, 3];
                        if (!this.Application.Storage.IsMustachePartsDataKey(sector, mustacheParts))
                            return [3, 3];
                        dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                        dataField = dataFields[0];
                        if ((dataFieldFilter != null) && (dataField != dataFieldFilter))
                            return [3, 3];
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(dataKey, sector, mustacheParts)];
                    case 2:
                        if (_a.sent()) {
                            mustacheData = this.Application.Storage.GetDataKeyField(dataKey, sector, mustacheParts);
                            if (mustacheData == null)
                                return [3, 3];
                            text = text.replace(mustache, mustacheData);
                            updated = true;
                        }
                        else if (canSubscribeDelay) {
                            this.Application.Observer.SubscribeDelay(el, dataKey, dataFields);
                        }
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        if (updated)
                            this.Application.Document.SetText(el, text);
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveModel = function (el, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canBind === void 0) { canBind = true; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            var model, sector, isMustacheOnly, context, mustaches, mustache, mustacheParts, dataKey, dataFields, dataField, context, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        model = el.getAttribute('d-model');
                        if (model == null)
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        if (this.Application.Barber.HasMustacheContext(model, sector))
                            return [2];
                        isMustacheOnly = this.Application.Parser.IsMustacheOnly(model, true);
                        if (!!isMustacheOnly) return [3, 2];
                        context = new DrapoContext();
                        return [4, this.Application.ModelHandler.ResolveModel(context, null, el, sector, canBind, false)];
                    case 1:
                        _a.sent();
                        return [2];
                    case 2:
                        mustaches = this.Application.Parser.ParseMustaches(model);
                        if (mustaches.length != 1)
                            return [2];
                        mustache = mustaches[0];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        if ((dataKeyFilter != null) && (dataKey != dataKeyFilter))
                            return [2];
                        if (!this.Application.Storage.IsDataKey(dataKey, sector))
                            return [2];
                        dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                        dataField = dataFields[0];
                        if ((dataFieldFilter != null) && (dataField != dataFieldFilter))
                            return [2];
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(dataKey, sector, mustacheParts)];
                    case 3:
                        if (!_a.sent()) return [3, 6];
                        context = new DrapoContext();
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 4:
                        data = _a.sent();
                        context.Create(data, el, null, dataKey, dataKey, null, null);
                        return [4, this.Application.ModelHandler.ResolveModel(context, null, el, sector, canBind, false)];
                    case 5:
                        _a.sent();
                        return [3, 7];
                    case 6:
                        if (canSubscribeDelay) {
                            this.Application.Observer.SubscribeDelay(el, dataKey, dataFields);
                        }
                        _a.label = 7;
                    case 7: return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveControlFlowMustacheAttributes = function (context, element, sector) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveControlFlowMustacheAttribute(context, "value", element, sector)];
                    case 1:
                        _a.sent();
                        return [4, this.ResolveControlFlowMustacheAttribute(context, "class", element, sector)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveControlFlowMustacheNodes = function (context, element, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var childNodes, i, childNode, text, textOriginal, mustaches, j, mustache, mustacheParts, mustacheData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        childNodes = [].slice.call(element.childNodes);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < childNodes.length)) return [3, 7];
                        childNode = childNodes[i];
                        if (childNode.nodeType != Node.TEXT_NODE)
                            return [3, 6];
                        text = childNode.nodeValue;
                        textOriginal = text;
                        mustaches = this.Application.Parser.ParseMustaches(text);
                        if (mustaches.length == 0)
                            return [3, 6];
                        j = 0;
                        _a.label = 2;
                    case 2:
                        if (!(j < mustaches.length)) return [3, 5];
                        mustache = mustaches[j];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        if ((context !== null) && (!context.CanResolve(mustacheParts[0])))
                            return [3, 4];
                        return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, true)];
                    case 3:
                        mustacheData = _a.sent();
                        text = text.replace(mustache, mustacheData);
                        _a.label = 4;
                    case 4:
                        j++;
                        return [3, 2];
                    case 5:
                        if (textOriginal !== text)
                            childNode.nodeValue = text;
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3, 1];
                    case 7: return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveControlFlowMustacheAttribute = function (context, attribute, el, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var hasChanges, text, mustaches, j, mustache, mustacheParts, mustacheData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hasChanges = false;
                        text = el.getAttribute(attribute);
                        if (text == null)
                            return [2];
                        mustaches = this.Application.Parser.ParseMustaches(text);
                        j = 0;
                        _a.label = 1;
                    case 1:
                        if (!(j < mustaches.length)) return [3, 4];
                        mustache = mustaches[j];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        if (!context.CanResolve(mustacheParts[0]))
                            return [3, 3];
                        return [4, this.Application.Solver.ResolveDataPath(context, null, el, sector, mustacheParts, true)];
                    case 2:
                        mustacheData = _a.sent();
                        text = text.replace(mustache, mustacheData);
                        hasChanges = true;
                        _a.label = 3;
                    case 3:
                        j++;
                        return [3, 1];
                    case 4:
                        if (context.CanUpdateTemplate) {
                            if (this.Application.Parser.HasMustache(text)) {
                                if (hasChanges)
                                    el.setAttribute(attribute, text);
                                return [2];
                            }
                        }
                        if (hasChanges)
                            el.setAttribute(attribute, text);
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveControlFlowMustacheStringFunction = function (sector, context, renderContext, executionContext, expression, element, canBind, type) {
        if (canBind === void 0) { canBind = true; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        return __awaiter(this, void 0, void 0, function () {
            var expressionWithoutFunctions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.FunctionHandler.ReplaceFunctionExpressions(sector, context, expression, canBind)];
                    case 1:
                        expressionWithoutFunctions = _a.sent();
                        return [2, (this.ResolveControlFlowMustacheString(context, renderContext, executionContext, expressionWithoutFunctions, element, sector, canBind, type))];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveControlFlowMustacheString = function (context, renderContext, executionContext, expression, element, sector, canBind, type, isForIterator, elementForTemplate) {
        if (canBind === void 0) { canBind = true; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        if (isForIterator === void 0) { isForIterator = false; }
        if (elementForTemplate === void 0) { elementForTemplate = null; }
        return __awaiter(this, void 0, void 0, function () {
            var mustaches, j, mustache, mustacheParts, dataKey, dataFields, mustacheData, contextDataKey, data, mustacheData, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mustaches = this.Application.Parser.ParseMustaches(expression);
                        j = 0;
                        _b.label = 1;
                    case 1:
                        if (!(j < mustaches.length)) return [3, 11];
                        mustache = mustaches[j];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                        if (!((this.Application.Storage.IsDataKey(dataKey, sector, renderContext)) && (!this.Application.Storage.IsDataKeyExecution(dataKey)))) return [3, 6];
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(dataKey, sector, mustacheParts)];
                    case 2:
                        _b.sent();
                        mustacheData = this.Application.Storage.GetDataKeyField(dataKey, sector, mustacheParts);
                        mustacheData = this.Application.Solver.EnsureString(mustacheData);
                        if (!canBind) return [3, 5];
                        if (!isForIterator) return [3, 3];
                        this.Application.Observer.SubscribeLink(dataKey, context.GetDataKeyRoot(), dataFields);
                        return [3, 5];
                    case 3:
                        contextDataKey = new DrapoContext();
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 4:
                        data = _b.sent();
                        contextDataKey.Create(data, element, null, dataKey, dataKey, null, null);
                        this.Application.Binder.BindReader(contextDataKey.Item, element, dataFields);
                        if ((context != null) && (context.Item != null) && (dataKey !== context.Item.DataKey))
                            this.Application.Observer.SubscribeStorage(dataKey, dataFields, context.Item.DataKey, type);
                        _b.label = 5;
                    case 5:
                        expression = expression.replace(mustache, mustacheData);
                        return [3, 10];
                    case 6:
                        if (!(context.Item === null)) return [3, 7];
                        _a = '';
                        return [3, 9];
                    case 7: return [4, this.Application.Solver.ResolveDataPath(context, executionContext, element, sector, mustacheParts, canBind)];
                    case 8:
                        _a = _b.sent();
                        _b.label = 9;
                    case 9:
                        mustacheData = _a;
                        mustacheData = this.Application.Solver.EnsureString(mustacheData);
                        expression = expression.replace(mustache, mustacheData);
                        _b.label = 10;
                    case 10:
                        j++;
                        return [3, 1];
                    case 11: return [2, (expression)];
                }
            });
        });
    };
    DrapoBarber.prototype.ResolveMustacheElementVisibility = function (el, canBind) {
        if (canBind === void 0) { canBind = true; }
        return __awaiter(this, void 0, void 0, function () {
            var elFor, elIF, sector, context, visibility;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        elFor = el.getAttribute('d-for');
                        if (elFor != null)
                            return [2];
                        elIF = el.getAttribute('d-if');
                        if (elIF == null)
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        if (this.Application.Barber.HasMustacheContext(elIF, sector))
                            return [2];
                        context = new DrapoContext();
                        return [4, this.Application.Solver.ResolveConditional(elIF, el, sector, context)];
                    case 1:
                        visibility = _a.sent();
                        if (visibility)
                            this.Application.Document.Show(el);
                        else
                            this.Application.Document.Hide(el);
                        return [2];
                }
            });
        });
    };
    DrapoBarber.prototype.HasMustacheContext = function (expression, sector, renderContext) {
        if (renderContext === void 0) { renderContext = null; }
        var valueCache = this.HasMustacheContextInternal(expression, sector, renderContext);
        return (valueCache);
    };
    DrapoBarber.prototype.HasMustacheContextInternal = function (expression, sector, renderContext) {
        if (renderContext === void 0) { renderContext = null; }
        var mustaches = this.Application.Parser.ParseMustaches(expression, true);
        for (var j = 0; j < mustaches.length; j++) {
            var mustache = mustaches[j];
            var mustacheParts = this.Application.Parser.ParseMustache(mustache);
            var dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
            var isDataKey = this.Application.Storage.IsDataKey(dataKey, sector, renderContext);
            if (!isDataKey)
                return (true);
        }
        return (false);
    };
    DrapoBarber.prototype.ResolveCloak = function (el, canBind) {
        if (canBind === void 0) { canBind = true; }
        return __awaiter(this, void 0, void 0, function () {
            var elCloak;
            return __generator(this, function (_a) {
                elCloak = el.getAttribute('d-cloak');
                if (elCloak == null)
                    return [2];
                el.classList.remove(elCloak);
                return [2];
            });
        });
    };
    return DrapoBarber;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoBehaviorHandler = (function () {
    function DrapoBehaviorHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoBehaviorHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoBehaviorHandler.prototype.HasContentBehaviorContext = function (content) {
        return ((content.indexOf('d-dragstart') > -1) || (content.indexOf('d-dragend') > -1) || (content.indexOf('d-resize-location') > -1));
    };
    DrapoBehaviorHandler.prototype.ResolveBehavior = function (el, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canBind === void 0) { canBind = true; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.ResolveBehaviorDragStart(el);
                        return [4, this.ResolveBehaviorDragEnd(el)];
                    case 1:
                        _a.sent();
                        return [4, this.ResolveBehaviorResize(el, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorContext = function (context, element, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveBehaviorDragStartContext(context, element, canBind)];
                    case 1:
                        _a.sent();
                        return [4, this.ResolveBehaviorDragEndContext(context, element, canBind)];
                    case 2:
                        _a.sent();
                        return [4, this.ResolveBehaviorResizeContext(context, element, canBind)];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragStart = function (el) {
        var dragStartAttribute = el.getAttribute('d-dragStart');
        if ((dragStartAttribute === null) || (dragStartAttribute === undefined))
            return;
        var dragActionAttribute = el.getAttribute('d-dragAction');
        if (dragActionAttribute !== 'barber')
            return;
        var sector = this.Application.Document.GetSector(el);
        var onBefore = el.getAttribute('d-dragOnBeforeStart');
        var onAfter = el.getAttribute('d-dragOnAfterEnd');
        var application = this.Application;
        var drag = this.CreateDrag(dragActionAttribute, null, null, this.Application.Parser.ParseTags(dragStartAttribute), false, null, sector, onBefore, onAfter);
        el.setAttribute('draggable', 'true');
        var eventType = 'dragstart';
        var eventNamespace = this.Application.EventHandler.CreateEventNamespace(null, null, eventType, 'drag');
        this.Application.EventHandler.DetachEventListener(el, eventNamespace);
        this.Application.EventHandler.AttachEventListener(el, eventType, eventNamespace, function (e) {
            application.BehaviorHandler.SetDrag(drag);
            e.originalEvent.dataTransfer.effectAllowed = 'move';
            e.originalEvent.dataTransfer.setData('text', drag.Code);
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragEnd = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var dragEndAttribute, dragActionAttribute, notifyText, notify, _a, onBefore, onAfter, application, tags, sector, eventTypeDragover, eventNamespaceDragover, eventTypeDrop, eventNamespaceDrop;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dragEndAttribute = el.getAttribute('d-dragEnd');
                        if ((dragEndAttribute === null) || (dragEndAttribute === undefined))
                            return [2];
                        dragActionAttribute = el.getAttribute('d-dragAction');
                        if (dragActionAttribute !== 'barber')
                            return [2];
                        notifyText = el.getAttribute('d-dragNotify');
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        onBefore = el.getAttribute('d-dragOnBeforeStart');
                        onAfter = el.getAttribute('d-dragOnAfterEnd');
                        application = this.Application;
                        tags = this.Application.Parser.ParseTags(dragEndAttribute);
                        sector = this.Application.Document.GetSector(el);
                        eventTypeDragover = 'dragover';
                        eventNamespaceDragover = this.Application.EventHandler.CreateEventNamespace(null, null, eventTypeDragover, 'drag');
                        this.Application.EventHandler.DetachEventListener(el, eventNamespaceDragover);
                        this.Application.EventHandler.AttachEventListener(el, eventTypeDragover, eventNamespaceDragover, function (e) {
                            e.preventDefault();
                            var drag = application.BehaviorHandler.GetDrag();
                            if (!application.BehaviorHandler.IsDragMatch(drag, e.originalEvent.dataTransfer.getData('Text'), tags))
                                return;
                            e.originalEvent.dataTransfer.dropEffect = 'move';
                        });
                        eventTypeDrop = 'drop';
                        eventNamespaceDrop = this.Application.EventHandler.CreateEventNamespace(null, null, eventTypeDrop, 'drag');
                        this.Application.EventHandler.DetachEventListener(el, eventNamespaceDrop);
                        this.Application.EventHandler.AttachEventListener(el, eventTypeDrop, eventNamespaceDrop, function (e) {
                            application.BehaviorHandler.ResolveBehaviorDragEndDrop(e, null, tags, notify, null, sector, onBefore, onAfter);
                        });
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragStartContext = function (context, el, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var dragStartAttribute, dragActionAttribute, custom, notifyText, notify, _a, dataKey, sector, onBefore, onAfter, application, drag, eventType, eventNamespace;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dragStartAttribute = el.getAttribute('d-dragStart');
                        if ((dragStartAttribute === null) || (dragStartAttribute === undefined))
                            return [2];
                        dragActionAttribute = el.getAttribute('d-dragAction');
                        if ((dragActionAttribute === null) || (dragActionAttribute === undefined))
                            dragActionAttribute = 'move';
                        if (dragActionAttribute === 'barber')
                            return [2];
                        custom = null;
                        if (dragActionAttribute === 'custom')
                            custom = el.getAttribute('d-dragActionCustom');
                        notifyText = el.getAttribute('d-dragNotify');
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        dataKey = el.getAttribute('d-dragStartDataKey');
                        sector = this.Application.Document.GetSector(el);
                        onBefore = el.getAttribute('d-dragOnBeforeStart');
                        onAfter = el.getAttribute('d-dragOnAfterEnd');
                        application = this.Application;
                        drag = this.CreateDrag(dragActionAttribute, custom, context.Item, this.Application.Parser.ParseTags(dragStartAttribute), notify, dataKey, sector, onBefore, onAfter);
                        el.setAttribute('draggable', 'true');
                        eventType = 'dragstart';
                        eventNamespace = this.Application.EventHandler.CreateEventNamespace(null, null, eventType, 'drag');
                        this.Application.EventHandler.DetachEventListener(el, eventNamespace);
                        this.Application.EventHandler.AttachEventListener(el, eventType, eventNamespace, function (e) {
                            application.BehaviorHandler.SetDrag(drag);
                            e.originalEvent.dataTransfer.effectAllowed = 'move';
                            e.originalEvent.dataTransfer.setData('text', drag.Code);
                        });
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragEndContext = function (context, el, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var dragEndAttribute, dragActionAttribute, notifyText, notify, _a, dataKey, onBefore, onAfter, application, item, tags, sector, eventTypeDragover, eventNamespaceDragover, eventTypeDrop, eventNamespaceDrop;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dragEndAttribute = el.getAttribute('d-dragEnd');
                        if ((dragEndAttribute === null) || (dragEndAttribute === undefined))
                            return [2];
                        dragActionAttribute = el.getAttribute('d-dragAction');
                        if (dragActionAttribute === 'barber')
                            return [2];
                        notifyText = el.getAttribute('d-dragNotify');
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        dataKey = el.getAttribute('d-dragEndDataKey');
                        onBefore = el.getAttribute('d-dragOnBeforeStart');
                        onAfter = el.getAttribute('d-dragOnAfterEnd');
                        application = this.Application;
                        item = context.Item;
                        tags = this.Application.Parser.ParseTags(dragEndAttribute);
                        sector = this.Application.Document.GetSector(el);
                        eventTypeDragover = 'dragover';
                        eventNamespaceDragover = this.Application.EventHandler.CreateEventNamespace(null, null, eventTypeDragover, 'drag');
                        this.Application.EventHandler.DetachEventListener(el, eventNamespaceDragover);
                        this.Application.EventHandler.AttachEventListener(el, eventTypeDragover, eventNamespaceDragover, function (e) {
                            e.preventDefault();
                            var drag = application.BehaviorHandler.GetDrag();
                            if (!application.BehaviorHandler.IsDragMatch(drag, e.originalEvent.dataTransfer.getData('Text'), tags))
                                return;
                            e.originalEvent.dataTransfer.dropEffect = 'move';
                        });
                        eventTypeDrop = 'drop';
                        eventNamespaceDrop = this.Application.EventHandler.CreateEventNamespace(null, null, eventTypeDrop, 'drag');
                        this.Application.EventHandler.DetachEventListener(el, eventNamespaceDrop);
                        this.Application.EventHandler.AttachEventListener(el, eventTypeDrop, eventNamespaceDrop, function (e) {
                            application.BehaviorHandler.ResolveBehaviorDragEndDrop(e, item, tags, notify, dataKey, sector, onBefore, onAfter);
                        });
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragEndDrop = function (e, item, tags, notify, dataKey, sector, onBefore, onAfter) {
        return __awaiter(this, void 0, void 0, function () {
            var dragBefore, dragAfter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        e.preventDefault();
                        dragBefore = this.GetDrag();
                        if (!this.IsDragMatch(dragBefore, e.originalEvent.dataTransfer.getData('Text'), tags))
                            return [2];
                        this.SetDrag(null);
                        dragAfter = this.CreateDrag(null, null, item, tags, notify, dataKey, sector, onBefore, onAfter);
                        if (!(dragBefore.DataKey !== null)) return [3, 2];
                        return [4, this.Application.Storage.UpdateData(dragBefore.DataKey, sector, dragBefore.Item.Data)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(dragAfter.DataKey !== null)) return [3, 4];
                        return [4, this.Application.Storage.UpdateData(dragAfter.DataKey, sector, dragAfter.Item.Data)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4, this.ResolveBehaviorDragStartOnBefore(dragBefore, dragAfter)];
                    case 5:
                        _a.sent();
                        if (!this.IsMoveDrag(dragBefore, dragAfter)) return [3, 7];
                        return [4, this.MoveDrag(dragBefore, dragAfter)];
                    case 6:
                        _a.sent();
                        return [3, 10];
                    case 7:
                        if (!this.IsSwapDrag(dragBefore, dragAfter)) return [3, 8];
                        this.SwapDrag(dragBefore, dragAfter);
                        return [3, 10];
                    case 8:
                        if (!this.IsCustomDrag(dragBefore, dragAfter)) return [3, 10];
                        return [4, this.CustomDrag(dragBefore, dragAfter)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [4, this.ResolveBehaviorDragEndOnAfter(dragBefore, dragAfter)];
                    case 11:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragStartOnBefore = function (dragBefore, dragAfter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(dragBefore.OnBefore != null)) return [3, 2];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(dragBefore.Sector, dragBefore.Item.Element, dragBefore.OnBefore)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!((dragAfter.OnBefore != null) && (dragAfter.OnBefore != dragBefore.OnBefore))) return [3, 4];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(dragAfter.Sector, dragAfter.Item.Element, dragAfter.OnBefore)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorDragEndOnAfter = function (dragBefore, dragAfter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(dragBefore.OnAfter != null)) return [3, 2];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(dragBefore.Sector, dragBefore.Item.Element, dragBefore.OnAfter)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!((dragAfter.OnAfter != null) && (dragAfter.OnAfter != dragBefore.OnAfter))) return [3, 4];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(dragAfter.Sector, dragAfter.Item.Element, dragAfter.OnAfter)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.GetDrag = function () {
        return (this._drag);
    };
    DrapoBehaviorHandler.prototype.SetDrag = function (drag) {
        this._drag = drag;
    };
    DrapoBehaviorHandler.prototype.IsDragMatch = function (drag, code, tags) {
        if (drag === null)
            return (false);
        if (drag.Code !== code)
            return (false);
        if (!drag.IsMatch(tags))
            return (false);
        return (true);
    };
    DrapoBehaviorHandler.prototype.CreateDrag = function (action, custom, item, tags, notify, dataKey, sector, onBefore, onAfter) {
        var drag = new DrapoDrag();
        drag.Code = this.Application.Document.CreateGuid();
        drag.Action = action;
        drag.Custom = custom;
        drag.Item = item;
        drag.Tags = tags;
        drag.Notify = notify;
        drag.DataKey = dataKey;
        drag.Sector = sector;
        drag.OnBefore = onBefore;
        drag.OnAfter = onAfter;
        return (drag);
    };
    DrapoBehaviorHandler.prototype.IsMoveDrag = function (dragBefore, dragAfter) {
        return (dragBefore.Action === 'move');
    };
    DrapoBehaviorHandler.prototype.MoveDrag = function (dragBefore, dragAfter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.IsInternalDrag(dragBefore, dragAfter))
                    return [2, (this.Application.Storage.MoveDataItem(dragAfter.Item.DataKey, dragAfter.Sector, dragBefore.Item.Data, dragAfter.Item.Data, dragAfter.Notify))];
                return [2, (false)];
            });
        });
    };
    DrapoBehaviorHandler.prototype.IsInternalDrag = function (dragBefore, dragAfter) {
        return (dragBefore.Item.DataKey === dragAfter.Item.DataKey);
    };
    DrapoBehaviorHandler.prototype.IsSwapDrag = function (dragBefore, dragAfter) {
        return (dragBefore.Action === 'swap');
    };
    DrapoBehaviorHandler.prototype.SwapDrag = function (dragBefore, dragAfter) {
        return (false);
    };
    DrapoBehaviorHandler.prototype.IsCustomDrag = function (dragBefore, dragAfter) {
        return (dragBefore.Action === 'custom');
    };
    DrapoBehaviorHandler.prototype.CustomDrag = function (dragBefore, dragAfter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(dragBefore.Sector, dragBefore.Item.Element, dragBefore.Custom)];
                    case 1:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorResizeContext = function (context, el, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var resizeLocation;
            return __generator(this, function (_a) {
                resizeLocation = el.getAttribute('d-resize-location');
                if (resizeLocation == null)
                    return [2];
                return [2, (this.ResolveBehaviorResizeInternal(context, el, canBind, resizeLocation))];
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorResize = function (el, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter) {
        if (canBind === void 0) { canBind = true; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        return __awaiter(this, void 0, void 0, function () {
            var resizeLocation, context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resizeLocation = el.getAttribute('d-resize-location');
                        if (resizeLocation == null)
                            return [2];
                        context = new DrapoContext();
                        return [4, this.ResolveBehaviorResizeInternal(context, el, canBind, resizeLocation)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorResizeInternal = function (context, el, canBind, resizeLocation) {
        return __awaiter(this, void 0, void 0, function () {
            var resizeModel, resizeClass, resizeType, resizeContainer, resizePreview, resizer, application, eventTypeMousedown, eventTypeMousemove, eventTypeMouseup, eventNamespaceMousedown, eventNamespaceMouseMove, eventNamespaceMouseUp;
            return __generator(this, function (_a) {
                resizeModel = el.getAttribute('d-resize-model');
                resizeClass = el.getAttribute('d-resize-class');
                resizeType = el.getAttribute('d-resize-type');
                if (resizeType == null)
                    resizeType = 'normal';
                resizeContainer = this.Application.Parser.ParseNumber(el.getAttribute('d-resize-container'), 2);
                resizePreview = this.Application.Parser.ParseBoolean(el.getAttribute('d-resize-preview'), false);
                resizer = this.CreateResize(context.Item, el, resizeModel, resizeLocation, resizeType, resizeClass, resizePreview, resizeContainer);
                application = this.Application;
                eventTypeMousedown = 'mousedown';
                eventTypeMousemove = 'mousemove';
                eventTypeMouseup = 'mouseup';
                eventNamespaceMousedown = this.Application.EventHandler.CreateEventNamespace(el, null, eventTypeMousedown, resizer.Code);
                eventNamespaceMouseMove = this.Application.EventHandler.CreateEventNamespace(el, null, eventTypeMousemove, resizer.Code);
                eventNamespaceMouseUp = this.Application.EventHandler.CreateEventNamespace(el, null, eventTypeMouseup, resizer.Code);
                this.Application.EventHandler.DetachEventListener(el, eventNamespaceMousedown);
                this.Application.EventHandler.AttachEventListener(el, eventTypeMousedown, eventNamespaceMousedown, function (e) {
                    var container = resizer.Container;
                    if (resizer.Preview) {
                        application.EventHandler.AttachEventListener(container, eventTypeMousemove, eventNamespaceMouseMove, function (ev) {
                            application.BehaviorHandler.ResolveBehaviorResizeContinue(resizer, ev);
                        });
                    }
                    application.EventHandler.AttachEventListener(container, eventTypeMouseup, eventNamespaceMouseUp, function (ev) {
                        application.BehaviorHandler.ResolveBehaviorResizeFinish(resizer, ev);
                        if (resizer.Preview)
                            application.EventHandler.DetachEventListener(container, eventNamespaceMouseMove);
                        application.EventHandler.DetachEventListener(container, eventNamespaceMouseUp);
                    });
                    application.BehaviorHandler.ResolveBehaviorResizeStart(resizer, e);
                });
                return [2];
            });
        });
    };
    DrapoBehaviorHandler.prototype.CreateResize = function (item, element, model, location, type, resizeClass, preview, container) {
        var resizer = new DrapoResize();
        resizer.Code = this.Application.Document.CreateGuid();
        resizer.Item = item;
        resizer.Element = element;
        resizer.Model = model;
        resizer.Location = location;
        resizer.Type = type;
        resizer.Class = resizeClass;
        resizer.Preview = preview;
        resizer.Parent = resizer.Element.parentElement;
        resizer.Container = this.Application.EventHandler.GetElementParent(resizer.Element, container);
        return (resizer);
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorResizeStart = function (resizer, e) {
        return __awaiter(this, void 0, void 0, function () {
            var sizeUnit;
            return __generator(this, function (_a) {
                sizeUnit = this.GetSize(resizer);
                resizer.UnitStart = this.GetSizeUnit(sizeUnit);
                resizer.SizeStart = this.GetSizeValue(resizer.UnitStart, sizeUnit);
                resizer.EventStartValue = this.GetResizerEventValue(resizer, e);
                resizer.EventCurrentValue = null;
                if (resizer.Class !== null)
                    resizer.Container.classList.add(resizer.Class);
                return [2];
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorResizeContinue = function (resizer, e) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (resizer.EventStartValue == null)
                    return [2];
                resizer.EventCurrentValue = this.GetResizerEventValue(resizer, e);
                this.ApplySizeNew(resizer);
                return [2];
            });
        });
    };
    DrapoBehaviorHandler.prototype.ResolveBehaviorResizeFinish = function (resizer, e) {
        return __awaiter(this, void 0, void 0, function () {
            var sizeNew, dataPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (resizer.EventStartValue == null)
                            return [2];
                        resizer.EventCurrentValue = this.GetResizerEventValue(resizer, e);
                        sizeNew = this.ApplySizeNew(resizer);
                        resizer.EventStartValue = null;
                        if (resizer.Class !== null)
                            resizer.Container.classList.remove(resizer.Class);
                        if (resizer.Model === null)
                            return [2];
                        dataPath = this.Application.Parser.ParseMustache(resizer.Model);
                        return [4, this.Application.Solver.UpdateItemDataPathObject(this.Application.Document.GetSector(resizer.Element), resizer.Item, null, dataPath, sizeNew, true)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoBehaviorHandler.prototype.GetSize = function (resizer) {
        if (resizer.Location == 'bootstrap') {
            var classAttribute = resizer.Parent.getAttribute('class');
            var classesAttribute = this.Application.Parser.Tokenize(classAttribute);
            for (var i = 0; i < classesAttribute.length; i++) {
                var classCurrent = classesAttribute[i];
                if (this.IsClassBootstrap(classCurrent))
                    return (classCurrent);
            }
            return (null);
        }
        else {
            return (this.Application.Stylist.GetElementStyleProperty(resizer.Parent, 'width'));
        }
    };
    DrapoBehaviorHandler.prototype.GetSizeUnit = function (size) {
        if (this.EndsWith(size, '%'))
            return ('%');
        if (this.EndsWith(size, 'px'))
            return ('px');
        if (this.IsClassBootstrap(size)) {
            var parts = this.Application.Parser.Tokenize(size, '-');
            if (parts.length < 3)
                return ('');
            return (parts[parts.length - 2]);
        }
        throw new Error('Size unit not supported: ' + size);
    };
    DrapoBehaviorHandler.prototype.IsClassBootstrap = function (data) {
        return (data.indexOf('col-') === 0);
    };
    DrapoBehaviorHandler.prototype.CreateClassBootstrap = function (type, size) {
        var className = 'col-';
        if (type != '')
            className = className + type + '-';
        className = className + size;
        return (className);
    };
    DrapoBehaviorHandler.prototype.EndsWith = function (data, endsWith) {
        var size = endsWith.length;
        var diff = data.length - size;
        for (var i = 0; i < size; i++)
            if (endsWith[i] !== data[i + diff])
                return (false);
        return (true);
    };
    DrapoBehaviorHandler.prototype.GetSizeValue = function (unit, sizeUnit) {
        if (this.IsClassBootstrap(sizeUnit)) {
            var parts = this.Application.Parser.Tokenize(sizeUnit, '-');
            return (Number(parts[parts.length - 1]));
        }
        var valueString = sizeUnit.substr(0, sizeUnit.length - (unit.length));
        return (Number(valueString));
    };
    DrapoBehaviorHandler.prototype.GetSizeStartWithOffset = function (resizer) {
        var offset = this.GetResizerOffset(resizer);
        return (resizer.SizeStart + offset);
    };
    DrapoBehaviorHandler.prototype.GetResizerOffset = function (resizer) {
        var start = resizer.EventStartValue;
        var end = resizer.EventCurrentValue;
        if (resizer.Type === 'reverse')
            return (start - end);
        return (end - start);
    };
    DrapoBehaviorHandler.prototype.GetResizerEventValue = function (resizer, event) {
        if (resizer.Location === 'height')
            return (event.originalEvent.pageY);
        return (event.originalEvent.pageX);
    };
    DrapoBehaviorHandler.prototype.ApplySizeNew = function (resizer) {
        if (resizer.Location === 'bootstrap') {
            var sizeBase = this.Application.Stylist.GetElementStyleProperty(resizer.Parent, 'width');
            var sizeBaseUnit = this.GetSizeUnit(sizeBase);
            var sizeBaseValue = this.GetSizeValue(sizeBaseUnit, sizeBase);
            var sizeBaseValueOne = sizeBaseValue / resizer.SizeStart;
            var sizeOffset = this.GetResizerOffset(resizer);
            var valueOffset = Math.round(sizeOffset / sizeBaseValueOne);
            if (valueOffset === 0)
                return (0);
            var valueNew = resizer.SizeStart + valueOffset;
            var classRemove = this.CreateClassBootstrap(resizer.UnitStart, resizer.SizeStart);
            var classInsert = this.CreateClassBootstrap(resizer.UnitStart, valueNew);
            resizer.Parent.classList.remove(classRemove);
            resizer.Parent.classList.add(classInsert);
            return (valueNew);
        }
        else {
            var sizeNew = this.GetSizeStartWithOffset(resizer);
            if (sizeNew === null)
                return (null);
            this.Application.Stylist.SetElementStyleProperty(resizer.Parent, resizer.Location, sizeNew + resizer.Unit);
            return (sizeNew);
        }
    };
    return DrapoBehaviorHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoBinder = (function () {
    function DrapoBinder(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoBinder.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoBinder.prototype.BindReaderWriter = function (contextItem, el, dataFields, eventTypes, eventTypesCancel, canNotify) {
        if (eventTypesCancel === void 0) { eventTypesCancel = null; }
        if (contextItem === null)
            return;
        if (el === null)
            return;
        this.BindReader(contextItem, el, dataFields);
        this.BindWriter(contextItem, el, dataFields, eventTypes, eventTypesCancel, canNotify);
    };
    DrapoBinder.prototype.BindReader = function (contextItem, el, dataFields) {
        if ((contextItem === null) || (contextItem.ElementForTemplate !== null))
            return;
        if (el === null)
            return;
        this.Application.Observer.SubscribeBarber(el, contextItem.DataKey, dataFields);
    };
    DrapoBinder.prototype.BindWriter = function (contextItem, el, dataFields, eventTypes, eventTypesCancel, canNotify) {
        var _this = this;
        var application = this.Application;
        var contextItemLocal = contextItem;
        var data = contextItem.Data;
        var dataKey = contextItem.DataKey;
        var index = contextItem.Index;
        var _loop_1 = function (i) {
            var event_1 = application.Parser.ParseEvent(eventTypes[i]);
            var eventType = event_1[0];
            var eventFilter = event_1[1];
            var eventNamespace = this_1.Application.EventHandler.CreateEventNamespace(null, null, eventType, 'model');
            var debounceTimeout = this_1.Application.EventHandler.GetEventDebounce(el, eventType);
            var delayTimeout = null;
            var canNotifyLocal = canNotify;
            this_1.Application.EventHandler.DetachEventListener(el, eventNamespace);
            this_1.Application.EventHandler.AttachEventListener(el, eventType, eventNamespace, function (e) {
                if (debounceTimeout == null) {
                    application.Binder.BindWriterEvent(e, eventType, eventFilter, contextItem, el, dataFields, data, dataKey, index, canNotify);
                }
                else {
                    if (delayTimeout != null)
                        clearTimeout(delayTimeout);
                    delayTimeout = setTimeout(function () {
                        clearTimeout(delayTimeout);
                        delayTimeout = null;
                        application.Binder.BindWriterEvent(e, eventType, eventFilter, contextItem, el, dataFields, data, dataKey, index, canNotify);
                    }, debounceTimeout);
                }
            });
        };
        var this_1 = this;
        for (var i = 0; i < eventTypes.length; i++) {
            _loop_1(i);
        }
        if ((eventTypesCancel) != null) {
            var _loop_2 = function (i) {
                var event_2 = application.Parser.ParseEvent(eventTypesCancel[i]);
                var eventType = event_2[0];
                var eventFilter = event_2[1];
                var eventNamespace = this_2.Application.EventHandler.CreateEventNamespace(null, null, eventType, 'modelCancel');
                this_2.Application.EventHandler.DetachEventListener(el, eventNamespace);
                this_2.Application.EventHandler.AttachEventListener(el, eventType, eventNamespace, function (e) {
                    if (!_this.Application.EventHandler.IsValidEventFilter(e, eventFilter))
                        return (true);
                    var dataPath = _this.Application.Solver.CreateDataPath(dataKey, dataFields);
                    var valueCurrent = _this.Application.Solver.ResolveDataObjectPathObject(data, dataPath);
                    var valueBefore = _this.Application.Document.GetValue(el);
                    if (valueCurrent == valueBefore)
                        return (true);
                    _this.Application.Document.SetValue(el, valueCurrent);
                    return (false);
                });
            };
            var this_2 = this;
            for (var i = 0; i < eventTypesCancel.length; i++) {
                _loop_2(i);
            }
        }
    };
    DrapoBinder.prototype.BindWriterEvent = function (e, eventType, eventFilter, contextItem, el, dataFields, data, dataKey, index, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, dataPath, valueCurrent, sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Application.EventHandler.IsValidEventFilter(e, eventFilter))
                            return [2, (true)];
                        value = this.Application.Binder.GetEventValue(eventType, e);
                        dataPath = this.Application.Solver.CreateDataPath(dataKey, dataFields);
                        valueCurrent = this.Application.Solver.ResolveDataObjectPathObject(data, dataPath);
                        if (!(valueCurrent != value)) return [3, 7];
                        sector = this.Application.Document.GetSector(el);
                        if (!((dataPath.length === 1) && (contextItem !== null) && (dataPath[0] === dataKey))) return [3, 2];
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, value, false)];
                    case 1:
                        _a.sent();
                        return [3, 3];
                    case 2:
                        this.Application.Solver.UpdateDataPathObject(data, dataPath, value);
                        _a.label = 3;
                    case 3: return [4, this.Application.Storage.FlagDataItemAsUpdated(dataKey, sector, index, false)];
                    case 4:
                        _a.sent();
                        return [4, this.Application.ModelHandler.ResolveOnModelChange(contextItem, el)];
                    case 5:
                        _a.sent();
                        if (!canNotify) return [3, 7];
                        return [4, this.Application.Observer.Notify(dataKey, index, dataFields)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [4, this.Application.ModelHandler.ResolveOnModelComplete(contextItem, el)];
                    case 8:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoBinder.prototype.BindIncremental = function (el, dataKey, sector, isIncremental) {
        return __awaiter(this, void 0, void 0, function () {
            var application, elParent, isRoot, binder, dataKeyLocal, sectorLocal, eventType, eventNamespace;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el == null)
                            return [2, (null)];
                        application = this.Application;
                        if (!isIncremental)
                            application.Observer.SubscribeIncremental(el, dataKey);
                        elParent = this.GetParentElementWithScrollVertical(el);
                        if (!((elParent === null) || (!this.IsElementScrollVisible(elParent)))) return [3, 4];
                        return [4, this.Application.Storage.CanGrowData(dataKey, sector)];
                    case 1:
                        if (!(_a.sent()))
                            return [2];
                        return [4, this.Application.Storage.GrowData(dataKey, sector)];
                    case 2:
                        if (!(_a.sent()))
                            return [2];
                        return [4, this.Application.Observer.NotifyIncremental(dataKey)];
                    case 3:
                        _a.sent();
                        return [2];
                    case 4:
                        isRoot = (elParent.tagName === 'HTML') || (elParent.tagName === 'BODY');
                        binder = isRoot ? window : elParent;
                        dataKeyLocal = dataKey;
                        sectorLocal = sector;
                        eventType = 'scroll';
                        eventNamespace = this.Application.EventHandler.CreateEventNamespace(el, null, eventType, 'incremental');
                        this.Application.EventHandler.DetachEventListener(el, eventNamespace);
                        this.Application.EventHandler.AttachEventListener(binder, eventType, eventNamespace, function (e) {
                            application.Binder.BindIncrementalScroll(binder, eventNamespace, elParent, dataKeyLocal, sector);
                        });
                        return [2];
                }
            });
        });
    };
    DrapoBinder.prototype.BindIncrementalScroll = function (binder, eventNamespace, elParent, dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((!this.Application.Observer.IsEnabledNotifyIncremental) || (!this.IsElementScrollVerticalAlmostEnd(elParent)))
                            return [2, (true)];
                        return [4, this.Application.Storage.CanGrowData(dataKey, sector)];
                    case 1:
                        if (!(_a.sent())) {
                            this.Application.EventHandler.DetachEventListener(binder, eventNamespace);
                            return [2, (false)];
                        }
                        return [4, this.Application.Storage.GrowData(dataKey, sector)];
                    case 2:
                        if (!(_a.sent()))
                            return [2, (true)];
                        return [4, this.Application.Observer.NotifyIncremental(dataKey)];
                    case 3:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoBinder.prototype.GetEventValue = function (eventType, e) {
        var target = e.target;
        var tag = target.tagName.toLowerCase();
        if (tag == 'input')
            return (this.GetEventValueInput(eventType, e));
        if (tag == 'select')
            return (e.target.value);
        if (tag == 'textarea')
            return (this.Application.Document.GetValue(e.target));
        return (null);
    };
    DrapoBinder.prototype.GetEventValueInput = function (eventType, e) {
        var el = e.target;
        var type = el.getAttribute('type');
        if (type == 'checkbox')
            return (this.Application.Document.GetProperty(el, 'checked'));
        return (this.Application.Document.GetValue(el));
    };
    DrapoBinder.prototype.GetParentElementWithScrollVertical = function (el) {
        var elParent = null;
        while ((elParent = el.parentElement) != null) {
            if (this.HasElementVerticalScroll(elParent))
                return (elParent);
            el = elParent;
        }
        return (null);
    };
    DrapoBinder.prototype.IsElementScrollVisible = function (el) {
        return (el.scrollHeight !== el.clientHeight);
    };
    DrapoBinder.prototype.HasElementVerticalScroll = function (el) {
        var style = window.getComputedStyle(el);
        var overflow = style.getPropertyValue('overflow');
        if (overflow === 'auto')
            return (true);
        if (el.scrollTop)
            return (true);
        el.scrollTop = 1;
        if (!el.scrollTop)
            return (false);
        el.scrollTop = 0;
        return (true);
    };
    DrapoBinder.prototype.IsElementScrollVerticalAlmostEnd = function (el) {
        var scrollTop = el.scrollTop;
        if (scrollTop == null)
            return (false);
        var clientHeight = el.clientHeight;
        var scrollHeight = el.scrollHeight;
        var remaining = scrollHeight - (scrollTop + clientHeight);
        return (remaining < 50);
    };
    DrapoBinder.prototype.UnbindControlFlowViewport = function (viewport) {
        var binder = viewport.ElementScroll;
        var eventNamespace = this.Application.EventHandler.CreateEventNamespace(null, null, 'scroll', 'viewport');
        this.Application.EventHandler.DetachEventListener(binder, eventNamespace);
    };
    DrapoBinder.prototype.BindControlFlowViewport = function (viewport) {
        var application = this.Application;
        var viewportCurrent = viewport;
        var binder = viewport.ElementScroll;
        var eventType = 'scroll';
        var eventNamespace = this.Application.EventHandler.CreateEventNamespace(null, null, eventType, 'viewport');
        this.Application.EventHandler.DetachEventListener(binder, eventNamespace);
        this.Application.EventHandler.AttachEventListener(binder, eventType, eventNamespace, function (e) {
            application.Binder.BindControlFlowViewportScroll(viewportCurrent);
        });
    };
    DrapoBinder.prototype.BindControlFlowViewportScroll = function (viewport) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                clearTimeout(viewport.EventScrollTimeout);
                viewport.EventScrollTimeout = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    var e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                clearTimeout(viewport.EventScrollTimeout);
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 6, , 8]);
                                _a.label = 2;
                            case 2:
                                if (!viewport.Busy) return [3, 4];
                                return [4, this.Application.Document.Sleep(50)];
                            case 3:
                                _a.sent();
                                return [3, 2];
                            case 4:
                                viewport.Busy = true;
                                return [4, this.Application.ControlFlow.ResolveControlFlowForViewportScroll(viewport)];
                            case 5:
                                _a.sent();
                                viewport.Busy = false;
                                return [3, 8];
                            case 6:
                                e_1 = _a.sent();
                                return [4, this.Application.ExceptionHandler.Handle(e_1, 'DrapoBinder - BindControlFlowViewportScroll')];
                            case 7:
                                _a.sent();
                                return [3, 8];
                            case 8: return [2];
                        }
                    });
                }); }, 50);
                return [2];
            });
        });
    };
    return DrapoBinder;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoCacheHandler = (function () {
    function DrapoCacheHandler(application) {
        this._hasLocalStorage = null;
        this._useLocalStorage = false;
        this._applicationBuild = null;
        this._cacheKeysView = null;
        this._cacheKeysComponentView = null;
        this._cacheKeysComponentStyle = null;
        this._cacheKeysComponentScript = null;
        this.TYPE_DATA = "d";
        this.TYPE_COMPONENTVIEW = "cv";
        this.TYPE_COMPONENTSTYLE = "cs";
        this.TYPE_COMPONENTSCRIPT = "cj";
        this.TYPE_VIEW = "v";
        this._application = application;
        this._hasLocalStorage = window.localStorage != null;
    }
    Object.defineProperty(DrapoCacheHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoCacheHandler.prototype, "CanUseLocalStorage", {
        get: function () {
            return ((this._hasLocalStorage) && (this._useLocalStorage));
        },
        enumerable: false,
        configurable: true
    });
    DrapoCacheHandler.prototype.Initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _a = this;
                        return [4, this.Application.Config.GetUseCacheLocalStorage()];
                    case 1:
                        _a._useLocalStorage = _g.sent();
                        _b = this;
                        return [4, this.Application.Config.GetApplicationBuild()];
                    case 2:
                        _b._applicationBuild = _g.sent();
                        _c = this;
                        return [4, this.GetConfigurationKeys('CacheKeysView')];
                    case 3:
                        _c._cacheKeysView = _g.sent();
                        _d = this;
                        return [4, this.GetConfigurationKeys('CacheKeysComponentView')];
                    case 4:
                        _d._cacheKeysComponentView = _g.sent();
                        _e = this;
                        return [4, this.GetConfigurationKeys('CacheKeysComponentStyle')];
                    case 5:
                        _e._cacheKeysComponentStyle = _g.sent();
                        _f = this;
                        return [4, this.GetConfigurationKeys('CacheKeysComponentScript')];
                    case 6:
                        _f._cacheKeysComponentScript = _g.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoCacheHandler.prototype.EnsureLoaded = function (storageItem, sector, dataKey, dataPath) {
        if (dataPath === void 0) { dataPath = null; }
        if (!this.CanUseLocalStorage)
            return (false);
        var cacheKey = this.CreateCacheKey(this.TYPE_DATA, storageItem.CacheKeys, sector, dataKey, dataPath, null);
        if (cacheKey == null)
            return (false);
        var valueCached = this.GetClientDataCache(cacheKey);
        if (valueCached == null)
            return (false);
        var appended = this.AppendStorageDataCache(storageItem, dataPath, valueCached);
        return (appended);
    };
    DrapoCacheHandler.prototype.GetCachedData = function (cacheKeys, sector, dataKey) {
        if (!this.CanUseLocalStorage)
            return (null);
        var cacheKey = this.CreateCacheKey(this.TYPE_DATA, cacheKeys, sector, dataKey, null, null);
        if (cacheKey == null)
            return (null);
        var valueCached = this.GetClientDataCache(cacheKey);
        return (valueCached);
    };
    DrapoCacheHandler.prototype.GetCachedDataPath = function (cacheKeys, sector, dataKey, dataPath) {
        if (!this.CanUseLocalStorage)
            return (null);
        var cacheKey = this.CreateCacheKey(this.TYPE_DATA, cacheKeys, sector, dataKey, dataPath, null);
        if (cacheKey == null)
            return (null);
        var valueCached = this.GetClientDataCache(cacheKey);
        return (valueCached);
    };
    DrapoCacheHandler.prototype.AppendCacheData = function (cacheKeys, sector, dataKey, value, isDelay) {
        if (isDelay === void 0) { isDelay = false; }
        if (!this.CanUseLocalStorage)
            return (false);
        if ((cacheKeys == null) || (cacheKeys.length == 0))
            return (null);
        var appended = false;
        if (isDelay) {
            for (var dataField in value) {
                var dataPath = [dataKey, dataField];
                var dataPathValue = value[dataField];
                if (this.AppendCacheDataEntry(cacheKeys, sector, dataKey, dataPath, dataPathValue))
                    appended = true;
            }
        }
        else {
            appended = this.AppendCacheDataEntry(cacheKeys, sector, dataKey, null, value);
        }
        return (appended);
    };
    DrapoCacheHandler.prototype.GetCachedView = function (url) {
        if (!this.CanUseLocalStorage)
            return (null);
        var cacheKey = this.CreateCacheKey(this.TYPE_VIEW, this._cacheKeysView, null, null, null, url);
        if (cacheKey == null)
            return (null);
        var value = this.GetClientDataCache(cacheKey);
        return (value);
    };
    DrapoCacheHandler.prototype.SetCachedView = function (url, value) {
        if (!this.CanUseLocalStorage)
            return (false);
        var cacheKey = this.CreateCacheKey(this.TYPE_VIEW, this._cacheKeysView, null, null, null, url);
        if (cacheKey == null)
            return (false);
        this.SetClientDataCache(cacheKey, value);
        return (true);
    };
    DrapoCacheHandler.prototype.GetCachedComponentView = function (url) {
        if (!this.CanUseLocalStorage)
            return (null);
        var cacheKey = this.CreateCacheKey(this.TYPE_COMPONENTVIEW, this._cacheKeysView, null, null, null, url);
        if (cacheKey == null)
            return (null);
        var value = this.GetClientDataCache(cacheKey);
        return (value);
    };
    DrapoCacheHandler.prototype.SetCachedComponentView = function (url, value) {
        if (!this.CanUseLocalStorage)
            return (false);
        var cacheKey = this.CreateCacheKey(this.TYPE_COMPONENTVIEW, this._cacheKeysView, null, null, null, url);
        if (cacheKey == null)
            return (false);
        this.SetClientDataCache(cacheKey, value);
        return (true);
    };
    DrapoCacheHandler.prototype.GetConfigurationKeys = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var value, values;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetProperty(name)];
                    case 1:
                        value = _a.sent();
                        if ((value == null) || (value == ''))
                            return [2, (null)];
                        values = this.Application.Parser.ParsePipes(value);
                        if ((values == null) || (values.length == 0))
                            return [2, (null)];
                        return [2, (values)];
                }
            });
        });
    };
    DrapoCacheHandler.prototype.AppendCacheDataEntry = function (cacheKeys, sector, dataKey, dataPath, value) {
        var cacheKey = this.CreateCacheKey(this.TYPE_DATA, cacheKeys, sector, dataKey, dataPath, null);
        if (cacheKey == null)
            return (false);
        this.SetClientDataCache(cacheKey, value);
        return (true);
    };
    DrapoCacheHandler.prototype.CreateCacheKey = function (type, cacheKeys, sector, dataKey, dataPath, url) {
        if ((cacheKeys == null) || (cacheKeys.length == 0))
            return (null);
        var key = type;
        for (var i = 0; i < cacheKeys.length; i++) {
            var cacheKey = cacheKeys[i];
            var cacheKeyValue = this.GetKey(cacheKey, sector, dataKey, dataPath, url);
            if (cacheKeyValue == null)
                return (null);
            key = key + '_' + cacheKeyValue;
        }
        return (key);
    };
    DrapoCacheHandler.prototype.GetKey = function (cacheKey, sector, dataKey, dataPath, url) {
        var key = cacheKey.toLowerCase();
        if (key == 'datakey')
            return (dataKey);
        if (key == 'url')
            return (url);
        if (key == 'datapath') {
            if ((dataPath == null) || (dataPath.length <= 1))
                return (dataKey);
            var dataPathValue = dataPath[0];
            for (var i = 1; i < dataPath.length; i++)
                dataPathValue = dataPathValue + '.' + dataPath[i];
            return (dataPathValue);
        }
        if (key == 'culture')
            return (this.Application.Globalization.GetCulture());
        if (key == 'applicationbuild')
            return (this._applicationBuild);
        if (key == 'view')
            return (this.Application.CookieHandler.GetView());
        if (key == 'theme')
            return (this.Application.CookieHandler.GetTheme());
        return (null);
    };
    DrapoCacheHandler.prototype.AppendStorageDataCache = function (storageItem, dataPath, valueCached) {
        if (storageItem.IsDelay) {
            var data = storageItem.Data;
            var dataField = dataPath[1];
            data[dataField] = valueCached;
        }
        else {
            storageItem.Data = valueCached;
        }
        return (true);
    };
    DrapoCacheHandler.prototype.GetClientDataCache = function (cacheKey) {
        var value = null;
        try {
            value = window.localStorage.getItem(cacheKey);
            if (value == null)
                return (null);
        }
        catch (e) {
            this._useLocalStorage = false;
            this.Application.ExceptionHandler.Handle(e, 'DrapoCacheHandler - GetClientDataCache :' + cacheKey);
        }
        try {
            return (this.Application.Serializer.Deserialize(value));
        }
        catch (_a) {
            return (null);
        }
    };
    DrapoCacheHandler.prototype.SetClientDataCache = function (cacheKey, value) {
        try {
            var valueSerialized = this.Application.Serializer.SerializeObject(value);
            window.localStorage.setItem(cacheKey, valueSerialized);
        }
        catch (e) {
            this._useLocalStorage = false;
            this.Application.ExceptionHandler.Handle(e, 'DrapoCacheHandler - SetClientDataCache');
        }
    };
    return DrapoCacheHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoClassHandler = (function () {
    function DrapoClassHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoClassHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoClassHandler.prototype.HasContentClassContext = function (content) {
        return (content.indexOf('d-class') > -1);
    };
    DrapoClassHandler.prototype.ResolveClass = function (el, sector, canBind, canSubscribeDelay, dataKeyFilter, dataFieldFilter, type) {
        if (canBind === void 0) { canBind = true; }
        if (canSubscribeDelay === void 0) { canSubscribeDelay = true; }
        if (dataKeyFilter === void 0) { dataKeyFilter = null; }
        if (dataFieldFilter === void 0) { dataFieldFilter = null; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        return __awaiter(this, void 0, void 0, function () {
            var dClassMustache, context, dClass, _a, classesExpressions, i, classExpression, classMustachesTrue, classTrue, classFalse, _b, expressionMustaches, expressionCurrent, addClass;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dClassMustache = el.getAttribute('d-class');
                        if (dClassMustache == null)
                            return [2];
                        if (this.Application.Barber.HasMustacheContext(dClassMustache, sector))
                            return [2];
                        context = new DrapoContext();
                        if (!this.Application.Parser.IsMustacheOnly(dClassMustache)) return [3, 2];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, null, null, dClassMustache, el, sector, canBind)];
                    case 1:
                        _a = _c.sent();
                        return [3, 3];
                    case 2:
                        _a = dClassMustache;
                        _c.label = 3;
                    case 3:
                        dClass = _a;
                        if (this.Application.Barber.HasMustacheContext(dClass, sector))
                            return [2];
                        classesExpressions = this.ExtractClasses(dClass);
                        i = 0;
                        _c.label = 4;
                    case 4:
                        if (!(i < classesExpressions.length)) return [3, 12];
                        classExpression = classesExpressions[i];
                        classMustachesTrue = classExpression[0];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, classMustachesTrue, el, canBind, type)];
                    case 5:
                        classTrue = _c.sent();
                        if (!(classExpression[2] != null)) return [3, 7];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, classExpression[2], el, canBind, type)];
                    case 6:
                        _b = _c.sent();
                        return [3, 8];
                    case 7:
                        _b = null;
                        _c.label = 8;
                    case 8:
                        classFalse = _b;
                        expressionMustaches = classExpression[1];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, expressionMustaches, el, canBind, type)];
                    case 9:
                        expressionCurrent = _c.sent();
                        return [4, this.Application.Solver.ResolveConditional(expressionCurrent)];
                    case 10:
                        addClass = _c.sent();
                        if (addClass) {
                            this.AddClass(el, classTrue);
                            if (classFalse != null)
                                this.RemoveClass(el, classFalse);
                        }
                        else {
                            this.RemoveClass(el, classTrue);
                            if (classFalse != null)
                                this.AddClass(el, classFalse);
                        }
                        _c.label = 11;
                    case 11:
                        i++;
                        return [3, 4];
                    case 12: return [2];
                }
            });
        });
    };
    DrapoClassHandler.prototype.ResolveClassContext = function (context, renderContext, el, sector, canBind, type) {
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        return __awaiter(this, void 0, void 0, function () {
            var dClassMustache, dClass, _a, classesExpressions, i, classExpression, classMustachesTrue, classTrue, classFalse, _b, expressionMustaches, expressionCurrent, addClass;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dClassMustache = el.getAttribute('d-class');
                        if (dClassMustache == null)
                            return [2];
                        if (!this.Application.Parser.IsMustacheOnly(dClassMustache)) return [3, 2];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, renderContext, null, dClassMustache, el, sector, canBind)];
                    case 1:
                        _a = _c.sent();
                        return [3, 3];
                    case 2:
                        _a = dClassMustache;
                        _c.label = 3;
                    case 3:
                        dClass = _a;
                        classesExpressions = this.ExtractClasses(dClass);
                        i = 0;
                        _c.label = 4;
                    case 4:
                        if (!(i < classesExpressions.length)) return [3, 12];
                        classExpression = classesExpressions[i];
                        classMustachesTrue = classExpression[0];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, renderContext, null, classMustachesTrue, el, canBind, type)];
                    case 5:
                        classTrue = _c.sent();
                        if (!(classExpression[2] != null)) return [3, 7];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, renderContext, null, classExpression[2], el, canBind, type)];
                    case 6:
                        _b = _c.sent();
                        return [3, 8];
                    case 7:
                        _b = null;
                        _c.label = 8;
                    case 8:
                        classFalse = _b;
                        expressionMustaches = classExpression[1];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, renderContext, null, expressionMustaches, el, canBind, type)];
                    case 9:
                        expressionCurrent = _c.sent();
                        return [4, this.Application.Solver.ResolveConditional(expressionCurrent)];
                    case 10:
                        addClass = _c.sent();
                        if (addClass) {
                            this.AddClass(el, classTrue);
                            if (classFalse != null)
                                this.RemoveClass(el, classFalse);
                        }
                        else {
                            this.RemoveClass(el, classTrue);
                            if (classFalse != null)
                                this.AddClass(el, classFalse);
                        }
                        _c.label = 11;
                    case 11:
                        i++;
                        return [3, 4];
                    case 12: return [2];
                }
            });
        });
    };
    DrapoClassHandler.prototype.ExtractClasses = function (dClass) {
        var classes = [];
        if (!this.Application.Parser.IsClassArray(dClass))
            return (classes);
        var parsedClasses = this.Application.Parser.ParseClassArray(dClass);
        for (var i = 0; i < parsedClasses.length; i++) {
            var parsedClass = parsedClasses[i];
            var parseClass = this.Application.Parser.ParseClass(parsedClass);
            if (parseClass != null)
                classes.push(parseClass);
        }
        return (classes);
    };
    DrapoClassHandler.prototype.AddClass = function (el, value) {
        var values = this.GetClassValues(value);
        for (var i = 0; i < values.length; i++)
            el.classList.add(values[i]);
    };
    DrapoClassHandler.prototype.RemoveClass = function (el, value) {
        var values = this.GetClassValues(value);
        for (var i = 0; i < values.length; i++)
            el.classList.remove(values[i]);
    };
    DrapoClassHandler.prototype.GetClassValues = function (value) {
        var valuesClass = [];
        var values = this.Application.Parser.ParseBlock(value, ' ');
        for (var i = 0; i < values.length; i++) {
            var valueCurrent = values[i];
            if (valueCurrent == null)
                continue;
            var valueTrim = valueCurrent.trim();
            if (valueTrim == '')
                continue;
            valuesClass.push(valueTrim);
        }
        return (valuesClass);
    };
    return DrapoClassHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoComponentHandler = (function () {
    function DrapoComponentHandler(application) {
        this._dataSectors = [];
        this._dataTags = [];
        this._dataElements = [];
        this._dataInstances = [];
        this._application = application;
    }
    Object.defineProperty(DrapoComponentHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoComponentHandler.prototype.ResolveComponents = function (el) {
        if (el === void 0) { el = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el == null)
                            el = document.documentElement;
                        return [4, this.ResolveComponentsElement(el, null, true, true)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.ResolveComponentsElement = function (el, context, checkSectorReady, handleDynamicSectors) {
        return __awaiter(this, void 0, void 0, function () {
            var sector, tagName, children, hasChildren, isContext, isInsideContext, i, child, contentUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!handleDynamicSectors) return [3, 2];
                        return [4, this.Application.Document.ResolveComponentDynamicSector(el)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (checkSectorReady) {
                            sector = this.Application.Document.GetSector(el);
                            if (sector === '@')
                                return [2];
                        }
                        if (this.Application.ControlFlow.IsElementControlFlowTemplate(el))
                            return [2];
                        tagName = el.tagName.toLowerCase();
                        children = [].slice.call(el.children);
                        hasChildren = children.length > 0;
                        if (!this.IsComponent(tagName)) return [3, 4];
                        isContext = context != null;
                        isInsideContext = this.Application.Document.IsElementInsideControlFlow(el);
                        if (isContext !== isInsideContext)
                            return [2];
                        return [4, this.ResolveComponentElement(el, tagName, context, checkSectorReady, handleDynamicSectors)];
                    case 3:
                        _a.sent();
                        return [3, 11];
                    case 4:
                        if (!hasChildren) return [3, 9];
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < children.length)) return [3, 8];
                        child = children[i];
                        return [4, this.ResolveComponentsElement(child, context, checkSectorReady, handleDynamicSectors)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3, 5];
                    case 8: return [3, 11];
                    case 9:
                        contentUrl = el.getAttribute('d-contenturl');
                        if (!(contentUrl != null)) return [3, 11];
                        return [4, this.ResolveContentElement(el, context, contentUrl, checkSectorReady, handleDynamicSectors)];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11: return [2];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.ResolveComponentElement = function (el, tagName, context, checkSectorReady, handleDynamicSectors) {
        return __awaiter(this, void 0, void 0, function () {
            var html, eljNew, attributes, content, sector, elNew, elContent, isSectorContext, elSector, instance, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Register.IsRegisteredComponent(tagName)];
                    case 1:
                        if (!!(_a.sent())) return [3, 3];
                        return [4, this.Application.ExceptionHandler.HandleError('There is no component: {0}', tagName)];
                    case 2:
                        _a.sent();
                        return [2];
                    case 3:
                        if (!!this.Application.Register.IsActiveComponent(tagName)) return [3, 5];
                        return [4, this.Application.Register.ActivateComponent(tagName)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [4, this.Application.Register.GetRegisteredComponentViewContent(tagName)];
                    case 6:
                        html = _a.sent();
                        if (!(html == null)) return [3, 8];
                        return [4, this.Application.ExceptionHandler.HandleError('There is no html for the component: {0}', tagName)];
                    case 7:
                        _a.sent();
                        return [2];
                    case 8:
                        eljNew = this.Application.Document.CreateHTMLElement(html);
                        attributes = this.Application.Document.GetElementAttributes(el);
                        content = this.Application.Document.GetHTML(el);
                        if (context != null)
                            this.Application.ControlFlow.InitializeContext(context, content);
                        sector = this.GetSectorContext(el, context);
                        this.Application.Document.ReplaceElement(el, eljNew);
                        this.Application.Document.SetElementAttributes(eljNew, attributes);
                        elNew = eljNew;
                        elContent = ((content != null) && (content != '')) ? this.GetElementContent(elNew) : null;
                        if (elContent !== null)
                            this.Application.Document.SetHTML(elContent, content);
                        isSectorContext = false;
                        elSector = elNew.getAttribute('d-sector');
                        if (!(elSector === "@")) return [3, 11];
                        elSector = this.CreateGuidContext(elNew, context);
                        elNew.setAttribute('d-sector', elSector);
                        return [4, this.Application.Document.AddSectorHierarchy(elSector, sector)];
                    case 9:
                        _a.sent();
                        return [4, this.Application.Document.AddSectorFriends(sector, elNew.getAttribute('d-sector-friend'))];
                    case 10:
                        _a.sent();
                        return [3, 12];
                    case 11:
                        if (elSector == null) {
                            isSectorContext = ((context != null) && (context.Sector != null));
                            if (isSectorContext)
                                elNew.setAttribute('d-sector', context.Sector);
                        }
                        _a.label = 12;
                    case 12:
                        _a.trys.push([12, 14, , 16]);
                        return [4, this.Application.Register.CreateInstanceComponent(tagName, elNew)];
                    case 13:
                        instance = _a.sent();
                        if (instance != null)
                            this.SubscribeComponentInstance(sector, tagName, elNew, instance);
                        return [3, 16];
                    case 14:
                        e_1 = _a.sent();
                        return [4, this.Application.ExceptionHandler.HandleError('There is an error in component: {0} contructor. {1}', tagName, e_1.toString())];
                    case 15:
                        _a.sent();
                        return [3, 16];
                    case 16: return [4, this.Application.Document.ResolveComponentUpdate(elNew, context)];
                    case 17:
                        _a.sent();
                        if (isSectorContext)
                            elNew.removeAttribute('d-sector');
                        return [4, this.Application.Debugger.NotifyComponents()];
                    case 18:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.GetSectorContext = function (el, context) {
        if ((context != null) && (context.Item != null) && (context.Item.ElementOld != null))
            return (this.Application.Document.GetSector(context.Item.ElementOld));
        if ((context != null) && (context.Sector != null))
            return (context.Sector);
        return (this.Application.Document.GetSector(el));
    };
    DrapoComponentHandler.prototype.CreateGuidContext = function (el, context) {
        var guid = this.CreateGuidContextHierarchy(el, context);
        if (guid !== null)
            return (guid);
        return (this.Application.Document.CreateGuid());
    };
    DrapoComponentHandler.prototype.CreateGuidContextHierarchy = function (el, context) {
        if ((context === null) || (context.Item === null) || (context.Item.ElementOld === null))
            return (null);
        var hierarchy = this.CreateElementHierarchy(el);
        if (hierarchy.length === 0)
            return (null);
        var elHierarchy = this.GetElementByHierarchy(context.Item.ElementOld, hierarchy);
        if (elHierarchy === null)
            return (null);
        var sector = elHierarchy.getAttribute('d-sector');
        if (sector == "@")
            return (null);
        return (sector);
    };
    DrapoComponentHandler.prototype.CreateElementHierarchy = function (el) {
        var hierarchy = [];
        this.InsertElementHierarchy(hierarchy, el);
        hierarchy.reverse();
        return (hierarchy);
    };
    DrapoComponentHandler.prototype.InsertElementHierarchy = function (hierarchy, el) {
        if (el == null)
            return;
        var elParent = el.parentElement;
        if (elParent == null)
            return;
        var index = this.GetElementIndex(elParent, el);
        if (index == null)
            return;
        hierarchy.push(index);
        this.InsertElementHierarchy(hierarchy, elParent);
    };
    DrapoComponentHandler.prototype.GetElementIndex = function (elParent, el) {
        for (var i = 0; i < elParent.children.length; i++)
            if (elParent.children[i] === el)
                return (i);
        return (null);
    };
    DrapoComponentHandler.prototype.GetElementByHierarchy = function (el, hierarchy) {
        var elCurrent = el;
        for (var i = 0; i < hierarchy.length; i++) {
            if (elCurrent == null)
                return (null);
            var index = hierarchy[i];
            if (elCurrent.children.length <= index)
                return (null);
            elCurrent = elCurrent.children[index];
        }
        return (elCurrent);
    };
    DrapoComponentHandler.prototype.GetElementContent = function (el) {
        var elContent = el.getAttribute('d-content');
        if (elContent === 'internal')
            return (el);
        var children = [].slice.call(el.children);
        for (var i = 0; i < children.length; i++) {
            var elContentChild = this.GetElementContent(children[i]);
            if (elContentChild !== null)
                return (elContentChild);
        }
        return (null);
    };
    DrapoComponentHandler.prototype.ResolveContentElement = function (el, context, contentUrl, checkSectorReady, handleDynamicSectors) {
        return __awaiter(this, void 0, void 0, function () {
            var html, content, elNew;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Server.GetViewHTML(contentUrl)];
                    case 1:
                        html = _a.sent();
                        if (!(html == null)) return [3, 3];
                        return [4, this.Application.ExceptionHandler.HandleError('There is an error getting html for the contenturl: {0}', contentUrl)];
                    case 2:
                        _a.sent();
                        return [2];
                    case 3:
                        content = this.Application.Parser.ParseDocumentContent(html);
                        elNew = this.Application.Document.CreateHTMLElement(content);
                        if (!(elNew == null)) return [3, 5];
                        return [4, this.Application.ExceptionHandler.HandleError('There is no html container for the contenturl: {0}', contentUrl)];
                    case 4:
                        _a.sent();
                        return [2];
                    case 5:
                        el.innerHTML = elNew.innerHTML;
                        return [4, this.Application.Document.ResolveComponentUpdate(el, context)];
                    case 6:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.IsComponent = function (tagName) {
        return (this.IsStartsWith(tagName, "d-"));
    };
    DrapoComponentHandler.prototype.IsStartsWith = function (text, value) {
        var length = value.length;
        if (text.length < length)
            return (false);
        return (text.substr(0, length) === value);
    };
    DrapoComponentHandler.prototype.SubscribeComponentInstance = function (sector, tag, el, instance) {
        var index = this.GetComponentInstanceIndex(sector);
        if (index == null)
            index = this.CreateComponentInstanceIndex(sector);
        var tags = this._dataTags[index];
        tags.push(tag);
        var elements = this._dataElements[index];
        elements.push(el);
        var instances = this._dataInstances[index];
        instances.push(instance);
        return (true);
    };
    DrapoComponentHandler.prototype.GetComponentInstanceIndex = function (sector) {
        for (var i = 0; i < this._dataSectors.length; i++)
            if (this._dataSectors[i] == sector)
                return (i);
        return (null);
    };
    DrapoComponentHandler.prototype.CreateComponentInstanceIndex = function (sector) {
        var index = this._dataSectors.push(sector);
        this._dataTags.push([]);
        this._dataElements.push([]);
        this._dataInstances.push([]);
        return (index - 1);
    };
    DrapoComponentHandler.prototype.GetComponentInstance = function (sector, did) {
        if (did === void 0) { did = null; }
        if (did === null)
            return (this.GetComponentInstanceByElementSector(sector));
        var sectors = this.Application.Document.GetSectorsAllowed(sector);
        if (sectors == null)
            return (this.GetComponentInstanceInternal(sector, did));
        for (var i = 0; i < sectors.length; i++) {
            var sectorCurrent = sectors[i];
            var instance = this.GetComponentInstanceInternal(sectorCurrent, did);
            if (instance != null)
                return (instance);
        }
        return (null);
    };
    DrapoComponentHandler.prototype.GetComponentInstanceByElementSector = function (sector) {
        for (var i = 0; i < this._dataElements.length; i++) {
            var dataElements = this._dataElements[i];
            for (var j = 0; j < dataElements.length; j++) {
                var el = dataElements[j];
                var elSector = el.getAttribute('d-sector');
                if (elSector === sector)
                    return (this._dataInstances[i][j]);
            }
        }
        return (null);
    };
    DrapoComponentHandler.prototype.GetComponentInstanceInternal = function (sector, did) {
        var index = this.GetComponentInstanceIndex(sector);
        if (index === null)
            return (null);
        var elements = this._dataElements[index];
        var instances = this._dataInstances[index];
        for (var j = elements.length - 1; j >= 0; j--) {
            var element = elements[j];
            if (element.parentElement == null)
                continue;
            var elementDid = element.getAttribute('d-id');
            if (did !== elementDid)
                continue;
            return (instances[j]);
        }
        return (null);
    };
    DrapoComponentHandler.prototype.UnloadComponentInstances = function (sector) {
        var index = this.GetComponentInstanceIndex(sector);
        if (index === null)
            return (false);
        this._dataSectors.splice(index, 1);
        this._dataTags.splice(index, 1);
        this._dataElements.splice(index, 1);
        this._dataInstances.splice(index, 1);
        return (true);
    };
    DrapoComponentHandler.prototype.UnloadComponentInstancesDetached = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var index, updated, dataTags, dataElements, dataInstances, i, dataElement;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        index = this.GetComponentInstanceIndex(sector);
                        if (index === null)
                            return [2, (false)];
                        updated = false;
                        dataTags = this._dataTags[index];
                        dataElements = this._dataElements[index];
                        dataInstances = this._dataInstances[index];
                        for (i = dataElements.length - 1; i >= 0; i--) {
                            dataElement = dataElements[i];
                            if (this.Application.Document.IsElementAlive(dataElement))
                                continue;
                            dataTags.splice(i, 1);
                            dataElements.splice(i, 1);
                            dataInstances.splice(i, 1);
                            updated = true;
                        }
                        if (!updated) return [3, 2];
                        return [4, this.Application.Debugger.NotifyComponents()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2, (true)];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.UnloadComponentInstancesDetachedFullCheck = function () {
        return __awaiter(this, void 0, void 0, function () {
            var updated, index, dataTags, dataElements, dataInstances, i, dataElement;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updated = false;
                        for (index = this._dataSectors.length - 1; index >= 0; index--) {
                            dataTags = this._dataTags[index];
                            dataElements = this._dataElements[index];
                            dataInstances = this._dataInstances[index];
                            for (i = dataElements.length - 1; i >= 0; i--) {
                                dataElement = dataElements[i];
                                if (this.Application.Document.IsElementAlive(dataElement))
                                    continue;
                                dataTags.splice(i, 1);
                                dataElements.splice(i, 1);
                                dataInstances.splice(i, 1);
                                updated = true;
                            }
                            if (dataTags.length === 0) {
                                this._dataSectors.splice(index, 1);
                                this._dataTags.splice(index, 1);
                                this._dataElements.splice(index, 1);
                                this._dataInstances.splice(index, 1);
                                updated = true;
                            }
                        }
                        if (!updated) return [3, 2];
                        return [4, this.Application.Debugger.NotifyComponents()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2, (true)];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.HasContentComponent = function (content) {
        return ((content.indexOf('<d-') > -1));
    };
    DrapoComponentHandler.prototype.ResolveComponentContext = function (sector, context, el, renderContext, canResolveComponents) {
        return __awaiter(this, void 0, void 0, function () {
            var tagName, elAttributes, i, elAttribute, elAttributeValue, updated, mustaches, j, mustache, mustacheParts, mustacheContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tagName = el.tagName.toLowerCase();
                        if (!this.IsComponent(tagName))
                            return [2];
                        elAttributes = this.Application.Document.GetElementAttributes(el);
                        for (i = 0; i < elAttributes.length; i++) {
                            elAttribute = elAttributes[i];
                            elAttributeValue = elAttribute[1];
                            updated = false;
                            mustaches = this.Application.Parser.ParseMustaches(elAttributeValue);
                            for (j = 0; j < mustaches.length; j++) {
                                mustache = mustaches[j];
                                mustacheParts = this.Application.Parser.ParseMustache(mustache);
                                mustacheContext = this.Application.Solver.CreateMustacheContext(context, mustacheParts);
                                if ((mustacheContext === null) || (mustacheContext === mustache))
                                    continue;
                                updated = true;
                                elAttributeValue = elAttributeValue.replace(mustache, mustacheContext);
                            }
                            if (updated)
                                el.setAttribute(elAttribute[0], elAttributeValue);
                        }
                        if (!((canResolveComponents) && (((context != null) && (context.HasContextItemBefore)) || (this.Application.Document.IsElementAlive(el))))) return [3, 2];
                        return [4, this.Application.Document.ResolveComponentUpdate(el, context)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    DrapoComponentHandler.prototype.Retrieve = function () {
        var list = [];
        for (var i = 0; i < this._dataSectors.length; i++) {
            var sector = this._dataSectors[i];
            var tags = this._dataTags[i];
            var elements = this._dataElements[i];
            var instances = this._dataInstances[i];
            for (var j = 0; j < tags.length; j++)
                list.push([sector, tags[j], elements[j], instances[j]]);
        }
        return (list);
    };
    DrapoComponentHandler.prototype.AppendInstances = function (sector, componentSectors, componentTags, componentElements, componentInstances) {
        var index = this.GetComponentInstanceIndex(sector);
        if (index === null)
            return;
        componentSectors.push(sector);
        componentTags.push(this.Application.Solver.CloneArrayString(this._dataTags[index]));
        componentElements.push(this.Application.Solver.CloneArrayElement(this._dataElements[index]));
        componentInstances.push(this.Application.Solver.CloneArrayAny(this._dataInstances[index]));
    };
    DrapoComponentHandler.prototype.AddInstances = function (container) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._dataSectors.push.apply(this._dataSectors, container.ComponentSectors);
                        this._dataTags.push.apply(this._dataTags, container.ComponentTags);
                        this._dataElements.push.apply(this._dataElements, container.ComponentElements);
                        this._dataInstances.push.apply(this._dataInstances, container.ComponentInstances);
                        return [4, this.Application.Debugger.NotifyComponents()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    return DrapoComponentHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoConfig = (function () {
    function DrapoConfig(application) {
        this._url = null;
        this._cacheKeys = null;
        this._cacheDatas = null;
        this._timezone = null;
        this._application = application;
    }
    Object.defineProperty(DrapoConfig.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoConfig.prototype.GetUrl = function () {
        if (this._url == null)
            this._url = this.GetUrlInternal();
        return (this._url);
    };
    DrapoConfig.prototype.GetUrlInternal = function () {
        return ('~/drapo.json');
    };
    DrapoConfig.prototype.Load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, property;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._cacheKeys = [];
                        this._cacheDatas = [];
                        return [4, this.Application.Server.GetJSON(this.GetUrl())];
                    case 1:
                        data = _a.sent();
                        for (property in data) {
                            this._cacheKeys.push(property);
                            this._cacheDatas.push(data[property]);
                        }
                        return [2];
                }
            });
        });
    };
    DrapoConfig.prototype.IsLoaded = function () {
        return (this._cacheKeys != null);
    };
    DrapoConfig.prototype.EnsureLoaded = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.IsLoaded())
                            return [2];
                        return [4, this.Load()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoConfig.prototype.GetSector = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.EnsureLoaded()];
                    case 1:
                        _a.sent();
                        index = this.GetCacheKeyIndex(name);
                        if (index == null)
                            return [2, (null)];
                        return [2, (this.GetCacheData(index))];
                }
            });
        });
    };
    DrapoConfig.prototype.GetCacheKeyIndex = function (dataKey) {
        for (var i = 0; i < this._cacheKeys.length; i++) {
            if (this._cacheKeys[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoConfig.prototype.GetCacheData = function (dataIndex) {
        return (this._cacheDatas[dataIndex]);
    };
    DrapoConfig.prototype.AddCacheData = function (dataKey, data) {
        this._cacheKeys.push(dataKey);
        this._cacheDatas.push(data);
    };
    DrapoConfig.prototype.GetProperty = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetSector(name)];
                    case 1:
                        config = _a.sent();
                        if ((config === undefined) || (config === null))
                            return [2, (null)];
                        return [2, (config)];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPropertyBoolean = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty(name)];
                    case 1:
                        value = _a.sent();
                        if (value == null)
                            return [2, (false)];
                        return [2, (value.toString() == 'true')];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPropertyArray = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetSector(name)];
                    case 1:
                        value = _a.sent();
                        if ((value === undefined) || (value === null))
                            return [2, (null)];
                        return [2, (value)];
                }
            });
        });
    };
    DrapoConfig.prototype.GetUsePipes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetPropertyBoolean('UsePipes')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetUseRouter = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetPropertyBoolean('UseRouter')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetUseCacheLocalStorage = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetPropertyBoolean('UseCacheLocalStorage')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetUseCacheStatic = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetPropertyBoolean('UseCacheStatic')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPipeHubName = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('PipeHubName')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPipeActionRegister = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('PipeActionRegister')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPipeActionNotify = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('PipeActionNotify')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPipeActionPolling = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('PipeActionPolling')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetPipeHeaderConnectionId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('PipeHeaderConnectionId')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetOnAuthorizationRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('OnAuthorizationRequest')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetOnError = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('OnError')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetOnReconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('OnReconnect')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetStorageErrors = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('StorageErrors')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetOnBadRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('OnBadRequest')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetStorageBadRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('StorageBadRequest')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetValidatorUncheckedClass = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('ValidatorUncheckedClass')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetValidatorValidClass = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('ValidatorValidClass')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetValidatorInvalidClass = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('ValidatorInvalidClass')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetApplicationBuild = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('ApplicationBuild')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetHeaderContainerId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('HeaderContainerId')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetHeaderCSRF = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('HeaderCSRF')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetTimestamp = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetProperty('Timestamp')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetViews = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetPropertyArray('Views')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoConfig.prototype.GetTimezone = function () {
        return (this._timezone);
    };
    DrapoConfig.prototype.SetTimezone = function (value) {
        this._timezone = value;
    };
    return DrapoConfig;
}());

"use strict";
var DrapoContext = (function () {
    function DrapoContext(item) {
        if (item === void 0) { item = null; }
        this._sector = null;
        this._itemsRoot = [];
        this._items = this._itemsRoot;
        this._itemParent = null;
        this._itemCurrent = null;
        this._itemCurrentStack = [];
        this._index = -1;
        this._level = 0;
        this._indexRelatives = [];
        this._indexRelative = -1;
        this._checkpoint = false;
        this._checkMustacheNodes = false;
        this._checkMustacheAttributes = false;
        this._checkModel = false;
        this._checkID = false;
        this._checkAttribute = false;
        this._checkClass = false;
        this._checkEvent = false;
        this._checkBehavior = false;
        this._checkComponent = false;
        this._checkValidation = false;
        this._canUpdateTemplate = false;
        this._templateKeys = [];
        this._templateDatas = [];
        if (item != null) {
            this._items.push(item);
            this._itemCurrent = item;
        }
    }
    Object.defineProperty(DrapoContext.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "Item", {
        get: function () {
            return (this._itemCurrent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "ItemsCurrentStack", {
        get: function () {
            return (this._itemCurrentStack);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "Index", {
        get: function () {
            return (this._index);
        },
        set: function (value) {
            this._index = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "IsEmpty", {
        get: function () {
            return (this._index === -1);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "IndexRelative", {
        get: function () {
            return (this._indexRelative);
        },
        set: function (value) {
            this._indexRelative = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "IndexRelatives", {
        get: function () {
            return (this._indexRelatives);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "Level", {
        get: function () {
            return (this._level);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "IsInsideRecursion", {
        get: function () {
            return (this._level > 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckMustacheNodes", {
        get: function () {
            return ((!this._checkpoint) || (this._checkMustacheNodes));
        },
        set: function (value) {
            this._checkMustacheNodes = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckMustacheAttributes", {
        get: function () {
            return ((!this._checkpoint) || (this._checkMustacheAttributes));
        },
        set: function (value) {
            this._checkMustacheAttributes = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckModel", {
        get: function () {
            return ((!this._checkpoint) || (this._checkModel));
        },
        set: function (value) {
            this._checkModel = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckID", {
        get: function () {
            return ((!this._checkpoint) || (this._checkID));
        },
        set: function (value) {
            this._checkID = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckAttribute", {
        get: function () {
            return ((!this._checkpoint) || (this._checkAttribute));
        },
        set: function (value) {
            this._checkAttribute = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckClass", {
        get: function () {
            return ((!this._checkpoint) || (this._checkClass));
        },
        set: function (value) {
            this._checkClass = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckEvent", {
        get: function () {
            return (((!this._checkpoint) || (this._checkEvent)) && (!this.CanUpdateTemplate));
        },
        set: function (value) {
            this._checkEvent = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckBehavior", {
        get: function () {
            return (((!this._checkpoint) || (this._checkBehavior)) && (!this.CanUpdateTemplate));
        },
        set: function (value) {
            this._checkBehavior = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckComponent", {
        get: function () {
            return (((!this._checkpoint) || (this._checkComponent)) && (!this.CanUpdateTemplate));
        },
        set: function (value) {
            this._checkComponent = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CheckValidation", {
        get: function () {
            return (((!this._checkpoint) || (this._checkValidation)) && (!this.CanUpdateTemplate));
        },
        set: function (value) {
            this._checkValidation = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContext.prototype, "CanUpdateTemplate", {
        get: function () {
            return (this._canUpdateTemplate);
        },
        set: function (value) {
            this._canUpdateTemplate = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoContext.prototype.Create = function (data, element, elementForTemplate, dataKey, key, iterator, index, elementOld) {
        if (elementOld === void 0) { elementOld = null; }
        var item = new DrapoContextItem(this, this._itemParent);
        item.Data = data;
        item.Element = element;
        item.ElementForTemplate = elementForTemplate;
        item.ElementOld = elementOld;
        item.DataKey = dataKey;
        item.Key = key;
        item.Iterator = iterator;
        item.Index = index;
        this._items.push(item);
        this._itemCurrent = item;
        this._index++;
        this._indexRelative++;
        return (item);
    };
    DrapoContext.prototype.Initialize = function (count) {
        if (count <= 0)
            return;
        for (var i = 0; i < count; i++)
            this._items.push(null);
        this._index = count;
        this._indexRelative = count;
    };
    DrapoContext.prototype.Pop = function () {
        if (this._itemCurrent == null)
            return (null);
        this._itemCurrent = this._items.length < 2 ? null : this._items[this._items.length - 2];
        return (this._items.pop());
    };
    DrapoContext.prototype.Down = function () {
        if (this._itemCurrent == null)
            return (false);
        this._items = this._itemCurrent.Children;
        this._itemParent = this._itemCurrent;
        this._itemCurrentStack.push(this._itemCurrent);
        this._level++;
        this._indexRelatives.push(this._indexRelative);
        this._indexRelative = -1;
        return (true);
    };
    DrapoContext.prototype.Up = function () {
        if (this._itemParent == null)
            return (false);
        this._itemParent = this._itemParent.Parent;
        this._items = this._itemParent == null ? this._itemsRoot : this._itemParent.Children;
        this._itemCurrent = this._itemCurrentStack.pop();
        this._level--;
        this._indexRelative = this._indexRelatives.pop();
        return (true);
    };
    DrapoContext.prototype.GetElementTemplate = function (key) {
        var item = this.Item;
        var template = null;
        while (item != null) {
            if (item.Key == key)
                template = item.ElementForTemplate;
            item = item.Parent;
        }
        return (template);
    };
    DrapoContext.prototype.IsElementTemplateRoot = function (key) {
        var item = this.Item;
        while (item != null) {
            if ((item.Parent === null) && (item.Key === key))
                return (true);
            item = item.Parent;
        }
        return (false);
    };
    DrapoContext.prototype.IsKey = function (key) {
        return this.IsKeyInternal(this.Item, key);
    };
    DrapoContext.prototype.IsParentKey = function (key) {
        return this.IsKeyInternal(this.Item.Parent, key);
    };
    DrapoContext.prototype.IsKeyInternal = function (item, key) {
        while (item !== null) {
            if (item.Key === key)
                return (true);
            item = item.Parent;
        }
        return (false);
    };
    DrapoContext.prototype.GetDataKeyRoot = function () {
        if (this._itemsRoot.length === 0)
            return (null);
        return (this._itemsRoot[0].DataKey);
    };
    DrapoContext.prototype.Checkpoint = function () {
        if (this._checkpoint)
            return;
        if (this._level !== 0)
            return;
        this._checkpoint = true;
    };
    DrapoContext.prototype.GetTemplateIndex = function (templateKey) {
        for (var i = 0; i < this._templateKeys.length; i++)
            if (this._templateKeys[i] === templateKey)
                return (i);
        return (null);
    };
    DrapoContext.prototype.GetTemplate = function (templateKey) {
        var index = this.GetTemplateIndex(templateKey);
        if (index === null)
            return (null);
        return (this._templateDatas[index]);
    };
    DrapoContext.prototype.AddTemplate = function (templateKey, templateData) {
        var index = this.GetTemplateIndex(templateKey);
        if (index === null) {
            this._templateKeys.push(templateKey);
            this._templateDatas.push(templateData);
        }
        else {
            this._templateDatas[index] = templateData;
        }
    };
    DrapoContext.prototype.CanResolve = function (key) {
        if (!this._canUpdateTemplate)
            return (true);
        return (!this.IsElementTemplateRoot(key));
    };
    DrapoContext.prototype.HasContextItemBefore = function () {
        return ((this.Item != null) && (this.Item.ElementOld != null));
    };
    DrapoContext.prototype.GetIndex = function (key) {
        if (this.Item.Key === key)
            return (this.Index);
        for (var i = 0; i < this._itemCurrentStack.length; i++) {
            var itemCurrent = this._itemCurrentStack[i];
            if (itemCurrent.Key === key)
                return (itemCurrent.Index);
        }
        return (null);
    };
    DrapoContext.prototype.GetIndexRelative = function (key) {
        if (this.Item.Key === key)
            return (this.IndexRelative);
        for (var i = 0; i < this._itemCurrentStack.length; i++) {
            var itemCurrent = this._itemCurrentStack[i];
            if (itemCurrent.Key === key)
                return (this._indexRelatives[i]);
        }
        return (null);
    };
    return DrapoContext;
}());

"use strict";
var DrapoContextItem = (function () {
    function DrapoContextItem(context, parent) {
        if (parent === void 0) { parent = null; }
        this._context = null;
        this._parent = null;
        this._children = [];
        this._data = null;
        this._dataKey = null;
        this._key = null;
        this._iterator = null;
        this._index = null;
        this._element = null;
        this._elementForTemplate = null;
        this._elementOld = null;
        this._context = context;
        this._parent = parent;
    }
    Object.defineProperty(DrapoContextItem.prototype, "Context", {
        get: function () {
            return (this._context);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Parent", {
        get: function () {
            return (this._parent);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Children", {
        get: function () {
            return (this._children);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Data", {
        get: function () {
            return (this._data);
        },
        set: function (value) {
            this._data = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "DataKey", {
        get: function () {
            return (this._dataKey);
        },
        set: function (value) {
            this._dataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Key", {
        get: function () {
            return (this._key);
        },
        set: function (value) {
            this._key = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Iterator", {
        get: function () {
            return (this._iterator);
        },
        set: function (value) {
            this._iterator = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Index", {
        get: function () {
            return (this._index);
        },
        set: function (value) {
            this._index = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "Element", {
        get: function () {
            return (this._element);
        },
        set: function (value) {
            this._element = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "ElementForTemplate", {
        get: function () {
            return (this._elementForTemplate);
        },
        set: function (value) {
            this._elementForTemplate = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "ElementOld", {
        get: function () {
            return (this._elementOld);
        },
        set: function (value) {
            this._elementOld = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "RootItem", {
        get: function () {
            if (this.Parent != null)
                return (this.Parent.RootItem);
            return (this);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoContextItem.prototype, "RootElement", {
        get: function () {
            return (this.RootItem.Element);
        },
        enumerable: false,
        configurable: true
    });
    return DrapoContextItem;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoControlFlow = (function () {
    function DrapoControlFlow(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoControlFlow.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoControlFlow.prototype.ResolveControlFlowDocument = function () {
        return __awaiter(this, void 0, void 0, function () {
            var els;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        els = this.Application.Searcher.FindAllByAttribute('d-for');
                        return [4, this.ResolveControlFlowForArray(els)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.ResolveControlFlowSector = function (el, canResolveComponents) {
        if (canResolveComponents === void 0) { canResolveComponents = true; }
        return __awaiter(this, void 0, void 0, function () {
            var els;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el == null)
                            return [2];
                        els = this.Application.Searcher.FindAllByAttributeFromParent('d-for', el);
                        return [4, this.ResolveControlFlowForArray(els, false, true, DrapoStorageLinkType.Render, canResolveComponents)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.ResolveControlFlowForParent = function (forElement) {
        var forElementParent = null;
        while ((forElementParent = forElement.parentElement) != null) {
            if (forElementParent.getAttribute('d-for') != null)
                return (forElementParent);
            forElement = forElementParent;
        }
        return (null);
    };
    DrapoControlFlow.prototype.ResolveControlFlowForRoot = function (forElement) {
        var forElementParent = null;
        while ((forElementParent = this.ResolveControlFlowForParent(forElement)) != null) {
            forElement = forElementParent;
        }
        return (forElement);
    };
    DrapoControlFlow.prototype.ResolveControlFlowForElement = function (forElement, isIncremental, canUseDifference, type, canResolveComponents) {
        if (isIncremental === void 0) { isIncremental = false; }
        if (canUseDifference === void 0) { canUseDifference = true; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        if (canResolveComponents === void 0) { canResolveComponents = true; }
        return __awaiter(this, void 0, void 0, function () {
            var forElements;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        forElements = [];
                        forElements.push(forElement);
                        return [4, this.ResolveControlFlowForArray(forElements, isIncremental, canUseDifference, type, canResolveComponents)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoControlFlow.prototype.ResolveControlFlowForArray = function (forElements, isIncremental, canUseDifference, type, canResolveComponents) {
        if (isIncremental === void 0) { isIncremental = false; }
        if (canUseDifference === void 0) { canUseDifference = true; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        if (canResolveComponents === void 0) { canResolveComponents = true; }
        return __awaiter(this, void 0, void 0, function () {
            var forElementsInserted, i, forElement, forElementRoot, context, sector, renderContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        forElementsInserted = [];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < forElements.length)) return [3, 4];
                        forElement = forElements[i];
                        forElementRoot = this.ResolveControlFlowForRoot(forElement);
                        if (!this.Application.Document.IsElementInserted(forElementsInserted, forElementRoot))
                            return [3, 3];
                        if (this.Application.Document.IsElementPreprocessed(forElement))
                            return [3, 3];
                        if (this.Application.Document.IsElementInsideComponent(forElement))
                            return [3, 3];
                        context = new DrapoContext();
                        sector = this.Application.Document.GetSector(forElementRoot);
                        context.Sector = sector;
                        if (!this.Application.Document.IsSectorReady(sector))
                            return [3, 3];
                        renderContext = new DrapoRenderContext();
                        return [4, this.ResolveControlFlowForInternal(sector, context, renderContext, forElementRoot, isIncremental, canUseDifference, type, canResolveComponents)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.InitializeContext = function (context, content) {
        if (this.Application.Barber.HasContentMustacheNodesContext(content))
            context.CheckMustacheNodes = true;
        if (this.Application.ModelHandler.HasContentModelContext(content))
            context.CheckModel = true;
        if (this.Application.Barber.HasContentMustacheAttributeContext(content))
            context.CheckMustacheAttributes = true;
        if (this.Application.AttributeHandler.HasContentIDContext(content))
            context.CheckID = true;
        if (this.Application.AttributeHandler.HasContentAttributeContext(content))
            context.CheckAttribute = true;
        if (this.Application.ClassHandler.HasContentClassContext(content))
            context.CheckClass = true;
        if (this.Application.EventHandler.HasContentEventContext(content))
            context.CheckEvent = true;
        if (this.Application.BehaviorHandler.HasContentBehaviorContext(content))
            context.CheckBehavior = true;
        if (this.Application.ComponentHandler.HasContentComponent(content))
            context.CheckComponent = true;
        if (this.Application.Validator.HasContentValidation(content))
            context.CheckValidation = true;
        context.Checkpoint();
    };
    DrapoControlFlow.prototype.IsElementControlFlowTemplate = function (el) {
        var forText = el.getAttribute('d-for');
        if (forText === null)
            return (false);
        return (el.style.display === 'none');
    };
    DrapoControlFlow.prototype.ResolveControlFlowForInternal = function (sector, context, renderContext, elFor, isIncremental, canUseDifference, type, canResolveComponents) {
        if (canUseDifference === void 0) { canUseDifference = true; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        if (canResolveComponents === void 0) { canResolveComponents = true; }
        return __awaiter(this, void 0, void 0, function () {
            var forText, ifText, forIfText, wasWrapped, viewportBeforeScrollPosition, wrapper, parsedFor, key, dataKeyIteratorRange, forElementRecursive, elementForTemplate, hasIfText, hasForIfText, conditionalForIfResult, isContextRoot, elAnchor, content, dForRender, dForRenders, isHTML, isViewport, hasViewPortBefore, hasViewPortbeforeRecycle, viewportBefore, itemsViewport, isDifference, isLastChild, isContextRootFull, isFirstChild, isContextRootFullExclusive, elForParent, items, dataItem, datas, range, dataKeyIterator, dataKey, dataKeyIteratorParts, isDataKey, dataKeyRoot, lastInserted, start, nextElements, dataLength, i, template, forReferenceTemplate, isHash, hashTemplate, useHash, length, canCreateViewport, viewport, isViewportActive, canFragmentElements, fragment, canUseTemplate, templateVariables, _a, nodesRemovedCount, startViewport, endViewport, j, data, templateKey, _b, templateData, _c, template, viewportIndexDifference, nodeIndex, oldNode, item, _d, hashValueBefore, hashValueCurrent, _e, applyHash, template;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        forText = elFor.getAttribute('d-for');
                        ifText = null;
                        forIfText = null;
                        wasWrapped = false;
                        viewportBeforeScrollPosition = 0;
                        if (forText == null) {
                            wrapper = this.Application.Document.GetWrapper(elFor);
                            forText = wrapper != null ? wrapper.getAttribute('d-for') : null;
                            if (forText == null)
                                return [2, (false)];
                            wasWrapped = true;
                            ifText = wrapper.getAttribute('d-if');
                            forIfText = wrapper.getAttribute('d-for-if');
                        }
                        parsedFor = this.Application.Parser.ParseFor(forText);
                        if (parsedFor == null)
                            return [2, (false)];
                        key = parsedFor[0];
                        dataKeyIteratorRange = parsedFor[2];
                        forElementRecursive = isIncremental ? null : context.GetElementTemplate(key);
                        elementForTemplate = forElementRecursive != null ? forElementRecursive : elFor;
                        if (ifText == null)
                            ifText = elementForTemplate.getAttribute('d-if');
                        hasIfText = (ifText != null);
                        if (forIfText == null)
                            forIfText = elementForTemplate.getAttribute('d-for-if');
                        hasForIfText = (forIfText != null);
                        conditionalForIfResult = true;
                        isContextRoot = context.IsEmpty;
                        elAnchor = (isContextRoot) ? this.Application.Document.Hide(elFor) : elFor;
                        content = isContextRoot ? elFor.outerHTML : null;
                        if (isContextRoot)
                            this.InitializeContext(context, content);
                        dForRender = elementForTemplate.getAttribute('d-for-render');
                        dForRenders = ((dForRender == null) || (dForRender == '')) ? [] : this.Application.Parser.ParseBlock(dForRender, ',');
                        isHTML = this.Application.Solver.Contains(dForRenders, 'html');
                        isViewport = this.Application.Solver.Contains(dForRenders, 'viewport');
                        hasViewPortBefore = (isViewport) && (this.Application.ViewportHandler.HasElementViewport(elementForTemplate));
                        hasViewPortbeforeRecycle = ((hasViewPortBefore) && ((!canUseDifference) || (isViewport)));
                        if (hasViewPortbeforeRecycle) {
                            hasViewPortBefore = false;
                            viewportBefore = this.Application.ViewportHandler.GetElementViewport(elementForTemplate);
                            viewportBeforeScrollPosition = viewportBefore.ElementScroll.scrollTop;
                            this.Application.ViewportHandler.DestroyViewportControlFlow(viewportBefore);
                            itemsViewport = this.Application.Document.GetNextAll(elAnchor);
                            this.RemoveList(itemsViewport);
                        }
                        isDifference = ((canUseDifference) && ((!isViewport) || (hasViewPortBefore)) && (!isIncremental) && (!hasIfText));
                        isLastChild = this.Application.Document.IsLastChild(elAnchor);
                        if ((isDifference) && (isContextRoot) && (isLastChild))
                            isDifference = false;
                        isContextRootFull = ((isContextRoot) && (!isDifference));
                        isFirstChild = this.Application.Document.IsFirstChild(elAnchor);
                        isContextRootFullExclusive = ((isContextRootFull) && (isFirstChild) && (!wasWrapped));
                        elForParent = elAnchor.parentElement;
                        if (!hasForIfText) return [3, 2];
                        return [4, this.Application.Solver.ResolveConditional(forIfText, null, sector, context, renderContext)];
                    case 1:
                        conditionalForIfResult = _f.sent();
                        _f.label = 2;
                    case 2:
                        items = isContextRootFullExclusive ? null : this.Application.Document.GetNextAll(elAnchor);
                        dataItem = null;
                        datas = null;
                        range = this.GetIteratorRange(dataKeyIteratorRange);
                        dataKeyIterator = range == null ? dataKeyIteratorRange : this.CleanIteratorRange(dataKeyIteratorRange);
                        dataKey = dataKeyIterator;
                        if (!this.IsControlFlowDataKeyIterator(dataKeyIterator)) return [3, 4];
                        return [4, this.GetControlFlowDataKeyIterators(context, renderContext, elementForTemplate, dataKeyIterator)];
                    case 3:
                        datas = _f.sent();
                        return [3, 7];
                    case 4:
                        dataKeyIteratorParts = this.Application.Parser.ParseForIterable(dataKeyIterator);
                        dataKey = dataKeyIteratorParts[0];
                        isDataKey = this.Application.Storage.IsDataKey(dataKey, sector);
                        if (isDataKey) {
                            dataKeyRoot = context.GetDataKeyRoot();
                            if (dataKeyRoot === null) {
                                this.Application.Observer.UnsubscribeFor(dataKey, elementForTemplate);
                                this.Application.Observer.SubscribeFor(elementForTemplate, dataKey);
                            }
                            else if (dataKeyRoot !== dataKey) {
                                this.Application.Observer.SubscribeLink(dataKey, dataKeyRoot);
                            }
                            if (hasForIfText)
                                this.Application.Observer.SubscribeLinkMustache(forIfText, dataKey);
                        }
                        if (!conditionalForIfResult) return [3, 6];
                        return [4, this.Application.Storage.Retrieve(dataKey, sector, context, dataKeyIteratorParts)];
                    case 5:
                        dataItem = _f.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        if ((isDataKey) && (dataKeyIteratorParts.length > 1)) {
                            datas = this.Application.Solver.ResolveDataObjectPathObject(dataItem.Data, dataKeyIteratorParts);
                        }
                        else {
                            datas = dataItem.Data;
                        }
                        return [3, 7];
                    case 6:
                        datas = [];
                        _f.label = 7;
                    case 7:
                        if (datas == null)
                            return [2, (false)];
                        if (!datas.length)
                            datas = this.Application.Solver.TransformObjectIntoArray(datas);
                        if (range !== null)
                            datas = this.ApplyRange(datas, range);
                        lastInserted = elAnchor;
                        start = 0;
                        if (isIncremental) {
                            nextElements = this.Application.Document.GetNextAll(elAnchor);
                            start = this.Application.Document.GetIndex(elAnchor) + nextElements.length;
                            if (nextElements.length > 0)
                                lastInserted = nextElements[nextElements.length - 1];
                        }
                        if ((!isDifference) && (type == DrapoStorageLinkType.RenderClass))
                            type = DrapoStorageLinkType.Render;
                        if ((!isIncremental) && (!isDifference) && (!isContextRootFullExclusive) && (!isViewport))
                            this.RemoveList(items);
                        if (isDifference) {
                            dataLength = datas.length;
                            for (i = items.length - 1; i >= dataLength; i--) {
                                this.RemoveListIndex(items, i);
                            }
                        }
                        if ((datas.length !== null) && (datas.length === 0)) {
                            if (isIncremental)
                                return [2, (false)];
                            if (isContextRootFullExclusive) {
                                this.Application.Observer.UnsubscribeFor(dataKey, elementForTemplate);
                                if (!isLastChild)
                                    this.Application.Document.SetHTML(elForParent, content);
                                template = elForParent.children[0];
                                this.Application.Observer.SubscribeFor(template, dataKey);
                            }
                            return [2, (false)];
                        }
                        this.Application.Observer.IsEnabledNotifyIncremental = false;
                        forReferenceTemplate = this.Application.Document.Clone(elementForTemplate);
                        if ((isContextRoot) || (context.IsInsideRecursion))
                            forReferenceTemplate = this.Application.Document.Show(forReferenceTemplate);
                        forReferenceTemplate.removeAttribute('d-for');
                        if (ifText != null)
                            forReferenceTemplate.removeAttribute('d-if');
                        isHash = this.Application.Solver.Contains(dForRenders, 'hash');
                        hashTemplate = isHash ? this.GetElementHashTemplate(elementForTemplate) : null;
                        useHash = hashTemplate !== null;
                        length = datas.length;
                        canCreateViewport = ((isContextRoot) && (isFirstChild) && (!wasWrapped) && (!hasIfText) && (range === null));
                        viewport = (canCreateViewport && isViewport) ? this.Application.ViewportHandler.CreateViewportControlFlow(sector, elementForTemplate, forReferenceTemplate, dataKey, key, dataKeyIteratorRange, datas) : null;
                        isViewportActive = ((viewport != null) && (viewport.IsActive));
                        if (dForRender != null)
                            forReferenceTemplate.removeAttribute('d-for-render');
                        lastInserted = this.Application.ViewportHandler.CreateViewportControlFlowBallonBefore(viewport, lastInserted);
                        canFragmentElements = viewport == null;
                        fragment = document.createDocumentFragment();
                        canUseTemplate = isContextRootFullExclusive && (type == DrapoStorageLinkType.Render) && (datas.length > 3);
                        if (!canUseTemplate) return [3, 9];
                        return [4, this.GetTemplateVariables(sector, context, dataKey, key, forReferenceTemplate)];
                    case 8:
                        _a = (_f.sent());
                        return [3, 10];
                    case 9:
                        _a = null;
                        _f.label = 10;
                    case 10:
                        templateVariables = _a;
                        nodesRemovedCount = 0;
                        startViewport = this.Application.ViewportHandler.GetViewportControlFlowStart(viewport, start);
                        endViewport = this.Application.ViewportHandler.GetViewportControlFlowEnd(viewport, length);
                        if (isViewportActive)
                            context.Initialize(startViewport - 1);
                        j = startViewport;
                        _f.label = 11;
                    case 11:
                        if (!(j < endViewport)) return [3, 30];
                        data = datas[j];
                        if (!(templateVariables !== null)) return [3, 13];
                        return [4, this.CreateTemplateKey(sector, context, dataKey, templateVariables, data, key, j)];
                    case 12:
                        _b = _f.sent();
                        return [3, 14];
                    case 13:
                        _b = null;
                        _f.label = 14;
                    case 14:
                        templateKey = _b;
                        if (!(templateKey !== null)) return [3, 16];
                        return [4, this.GetTemplateFromTemplateKey(context, templateKey)];
                    case 15:
                        _c = _f.sent();
                        return [3, 17];
                    case 16:
                        _c = null;
                        _f.label = 17;
                    case 17:
                        templateData = _c;
                        if (!((templateKey !== null) && (templateData === null))) return [3, 19];
                        return [4, this.CreateTemplate(sector, context, renderContext, this.Application.Document.Clone(forReferenceTemplate), dataKey, key, j, data)];
                    case 18:
                        templateData = _f.sent();
                        this.AddTemplate(context, templateKey, templateData);
                        _f.label = 19;
                    case 19:
                        template = templateData !== null ? this.Application.Document.Clone(templateData) : this.Application.Document.Clone(forReferenceTemplate);
                        viewportIndexDifference = (isViewportActive ? (1 - startViewport) : 0);
                        nodeIndex = j - nodesRemovedCount + viewportIndexDifference;
                        oldNode = ((items !== null) && (nodeIndex < items.length)) ? items[nodeIndex] : null;
                        item = context.Create(data, template, elementForTemplate, dataKey, key, dataKeyIterator, j, oldNode);
                        _d = (hasIfText);
                        if (!_d) return [3, 21];
                        return [4, this.Application.Solver.ResolveConditional(ifText, template, sector, context, renderContext, elementForTemplate)];
                    case 20:
                        _d = (!(_f.sent()));
                        _f.label = 21;
                    case 21:
                        if (_d) {
                            if ((isDifference) && (oldNode !== null))
                                this.RemoveListIndex(items, nodeIndex);
                            nodesRemovedCount++;
                            context.Pop();
                            return [3, 29];
                        }
                        if (!(type == DrapoStorageLinkType.Render)) return [3, 27];
                        hashValueBefore = ((useHash) && (oldNode != null)) ? oldNode.getAttribute('d-hash') : null;
                        if (!(hashTemplate === null)) return [3, 22];
                        _e = null;
                        return [3, 24];
                    case 22: return [4, this.GetElementHashValue(sector, context, template, hashTemplate)];
                    case 23:
                        _e = _f.sent();
                        _f.label = 24;
                    case 24:
                        hashValueCurrent = _e;
                        applyHash = ((!useHash) || (hashValueCurrent !== hashValueBefore));
                        if (!applyHash) return [3, 26];
                        return [4, this.ResolveControlFlowForIterationRender(sector, context, template, renderContext, true, canResolveComponents)];
                    case 25:
                        _f.sent();
                        _f.label = 26;
                    case 26:
                        if (((isDifference) || (isViewportActive)) && (oldNode != null)) {
                            if (applyHash)
                                this.Application.Document.ApplyNodeDifferences(oldNode.parentElement, oldNode, template, isHTML);
                            if (hashValueCurrent !== null)
                                oldNode.setAttribute('d-hash', hashValueCurrent);
                            lastInserted = oldNode;
                        }
                        else if (canFragmentElements) {
                            if (hashValueCurrent !== null)
                                template.setAttribute('d-hash', hashValueCurrent);
                            fragment.appendChild(template);
                        }
                        else {
                            lastInserted.after(template);
                            lastInserted = template;
                            if (hashValueCurrent !== null)
                                template.setAttribute('d-hash', hashValueCurrent);
                            if (!this.Application.ViewportHandler.HasHeightChanged(viewport)) {
                                this.Application.ViewportHandler.UpdateHeightItem(viewport, template);
                                endViewport = this.Application.ViewportHandler.GetViewportControlFlowEnd(viewport, length);
                                canFragmentElements = true;
                            }
                        }
                        return [3, 29];
                    case 27:
                        if (!(type == DrapoStorageLinkType.RenderClass)) return [3, 29];
                        return [4, this.ResolveControlFlowForIterationRenderClass(context, renderContext, template, sector)];
                    case 28:
                        _f.sent();
                        if (oldNode != null)
                            this.Application.Document.ApplyNodeDifferencesRenderClass(oldNode, template);
                        _f.label = 29;
                    case 29:
                        j++;
                        return [3, 11];
                    case 30:
                        this.Application.ViewportHandler.AppendViewportControlFlowBallonAfter(viewport, fragment);
                        if ((viewport == null) && (isContextRootFullExclusive) && (!isIncremental)) {
                            this.Application.Observer.UnsubscribeFor(dataKey, elementForTemplate);
                            if (elForParent.children.length !== 1)
                                this.Application.Document.SetHTML(elForParent, content);
                            template = elForParent.children[0];
                            this.Application.Observer.SubscribeFor(template, dataKey);
                            elForParent.append(fragment);
                            elFor = template;
                        }
                        else {
                            if (fragment.childNodes.length > 0)
                                lastInserted.after(fragment);
                        }
                        this.Application.ViewportHandler.ActivateViewportControlFlow(viewport, lastInserted);
                        this.Application.Observer.IsEnabledNotifyIncremental = true;
                        if (!((context.IsInsideRecursion) && (!context.IsElementTemplateRoot(key)))) return [3, 32];
                        return [4, this.Application.Document.RemoveElement(elementForTemplate, false)];
                    case 31:
                        _f.sent();
                        _f.label = 32;
                    case 32:
                        if (!((dataItem != null) && (dataItem.IsIncremental))) return [3, 34];
                        return [4, this.Application.Binder.BindIncremental(elFor, dataKeyIterator, sector, isIncremental)];
                    case 33:
                        _f.sent();
                        _f.label = 34;
                    case 34:
                        if (!isContextRoot) return [3, 37];
                        return [4, this.Application.ComponentHandler.UnloadComponentInstancesDetached(sector)];
                    case 35:
                        _f.sent();
                        return [4, this.Application.Document.CollectSector(sector)];
                    case 36:
                        _f.sent();
                        _f.label = 37;
                    case 37:
                        if (!hasViewPortbeforeRecycle) return [3, 39];
                        viewport.ElementScroll.scrollTop = viewportBeforeScrollPosition;
                        return [4, this.ResolveControlFlowForViewportScroll(viewport)];
                    case 38:
                        _f.sent();
                        _f.label = 39;
                    case 39: return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.ResolveControlFlowForIterationRender = function (sector, context, element, renderContext, isStart, canResolveComponents) {
        return __awaiter(this, void 0, void 0, function () {
            var children, hasChildren, i, child, forText, ifText, hasIfText, applyConditional, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!context.CheckMustacheNodes) return [3, 2];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheNodes(context, element, sector)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        children = [].slice.call(element.children);
                        hasChildren = children.length > 0;
                        if (!hasChildren) return [3, 32];
                        i = 0;
                        _b.label = 3;
                    case 3:
                        if (!(i < children.length)) return [3, 32];
                        child = children[i];
                        forText = child.getAttribute('d-for');
                        if (!(forText != null)) return [3, 9];
                        ifText = child.getAttribute('d-if');
                        hasIfText = (ifText != null);
                        applyConditional = ((hasIfText) && (this.CanApplyConditional(context, forText, ifText)));
                        _a = (!applyConditional);
                        if (_a) return [3, 5];
                        return [4, this.Application.Solver.ResolveConditional(ifText, null, sector, context, renderContext)];
                    case 4:
                        _a = (_b.sent());
                        _b.label = 5;
                    case 5:
                        if (!_a) return [3, 7];
                        context.Down();
                        return [4, this.ResolveControlFlowForInternal(sector, context, renderContext, child, false, true, DrapoStorageLinkType.Render)];
                    case 6:
                        _b.sent();
                        context.Up();
                        _b.label = 7;
                    case 7: return [4, this.Application.Document.RemoveElement(child)];
                    case 8:
                        _b.sent();
                        children.splice(i, 1);
                        i--;
                        return [3, 31];
                    case 9: return [4, this.IsControlFlowForIterationVisible(sector, context, child, renderContext)];
                    case 10:
                        if (!!(_b.sent())) return [3, 12];
                        return [4, this.Application.Document.RemoveElement(child)];
                    case 11:
                        _b.sent();
                        children.splice(i, 1);
                        i--;
                        return [3, 31];
                    case 12:
                        if (!context.CheckMustacheAttributes) return [3, 14];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheAttributes(context, child, sector)];
                    case 13:
                        _b.sent();
                        _b.label = 14;
                    case 14: return [4, this.ResolveControlFlowForIterationRender(sector, context, child, renderContext, false, canResolveComponents)];
                    case 15:
                        _b.sent();
                        if (!context.CheckID) return [3, 17];
                        return [4, this.Application.AttributeHandler.ResolveIDContext(context, child, sector, true)];
                    case 16:
                        _b.sent();
                        _b.label = 17;
                    case 17:
                        if (!context.CheckAttribute) return [3, 19];
                        return [4, this.Application.AttributeHandler.ResolveAttrContext(context, child, true)];
                    case 18:
                        _b.sent();
                        _b.label = 19;
                    case 19:
                        if (!context.CheckModel) return [3, 21];
                        return [4, this.Application.ModelHandler.ResolveModel(context, renderContext, child, sector, true, true)];
                    case 20:
                        _b.sent();
                        _b.label = 21;
                    case 21:
                        if (!context.CheckClass) return [3, 23];
                        return [4, this.Application.ClassHandler.ResolveClassContext(context, renderContext, child, sector, true, DrapoStorageLinkType.Render)];
                    case 22:
                        _b.sent();
                        _b.label = 23;
                    case 23:
                        if (!context.CheckEvent) return [3, 25];
                        return [4, this.Application.EventHandler.AttachContext(context, child, sector, renderContext)];
                    case 24:
                        _b.sent();
                        _b.label = 25;
                    case 25:
                        if (!context.CheckBehavior) return [3, 27];
                        return [4, this.Application.BehaviorHandler.ResolveBehaviorContext(context, child, true)];
                    case 26:
                        _b.sent();
                        _b.label = 27;
                    case 27:
                        if (!context.CheckComponent) return [3, 29];
                        return [4, this.Application.ComponentHandler.ResolveComponentContext(sector, context, child, renderContext, canResolveComponents)];
                    case 28:
                        _b.sent();
                        _b.label = 29;
                    case 29:
                        if (!context.CheckValidation) return [3, 31];
                        return [4, this.Application.Validator.RegisterValidation(child, sector, context)];
                    case 30:
                        _b.sent();
                        _b.label = 31;
                    case 31:
                        i++;
                        return [3, 3];
                    case 32:
                        if (!((isStart) || (!hasChildren))) return [3, 50];
                        if (!context.CheckID) return [3, 34];
                        return [4, this.Application.AttributeHandler.ResolveIDContext(context, element, sector, true)];
                    case 33:
                        _b.sent();
                        _b.label = 34;
                    case 34:
                        if (!context.CheckAttribute) return [3, 36];
                        return [4, this.Application.AttributeHandler.ResolveAttrContext(context, element, true)];
                    case 35:
                        _b.sent();
                        _b.label = 36;
                    case 36:
                        if (!context.CheckModel) return [3, 38];
                        return [4, this.Application.ModelHandler.ResolveModel(context, renderContext, element, sector, true, true)];
                    case 37:
                        _b.sent();
                        _b.label = 38;
                    case 38:
                        if (!context.CheckClass) return [3, 40];
                        return [4, this.Application.ClassHandler.ResolveClassContext(context, renderContext, element, sector, true, DrapoStorageLinkType.RenderClass)];
                    case 39:
                        _b.sent();
                        _b.label = 40;
                    case 40:
                        if (!context.CheckEvent) return [3, 42];
                        return [4, this.Application.EventHandler.AttachContext(context, element, sector, renderContext)];
                    case 41:
                        _b.sent();
                        _b.label = 42;
                    case 42:
                        if (!context.CheckBehavior) return [3, 44];
                        return [4, this.Application.BehaviorHandler.ResolveBehaviorContext(context, element, true)];
                    case 43:
                        _b.sent();
                        _b.label = 44;
                    case 44:
                        if (!context.CheckComponent) return [3, 46];
                        return [4, this.Application.ComponentHandler.ResolveComponentContext(sector, context, element, renderContext, canResolveComponents)];
                    case 45:
                        _b.sent();
                        _b.label = 46;
                    case 46:
                        if (!context.CheckValidation) return [3, 48];
                        return [4, this.Application.Validator.RegisterValidation(element, sector, context)];
                    case 47:
                        _b.sent();
                        _b.label = 48;
                    case 48:
                        if (!((!hasChildren) && (context.CheckMustacheAttributes))) return [3, 50];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheAttributes(context, element, sector)];
                    case 49:
                        _b.sent();
                        _b.label = 50;
                    case 50: return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.CanApplyConditional = function (context, forText, ifText) {
        var parsedFor = this.Application.Parser.ParseFor(forText);
        if (parsedFor == null)
            return (true);
        var key = parsedFor[0];
        if (context.IsKey(key))
            return (true);
        var index = ifText.indexOf('{{' + key);
        return (index < 0);
    };
    DrapoControlFlow.prototype.ResolveControlFlowForIterationRenderClass = function (context, renderContext, element, sector) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.ClassHandler.ResolveClassContext(context, renderContext, element, sector, true, DrapoStorageLinkType.RenderClass)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.IsControlFlowForIterationVisible = function (sector, context, el, renderContext) {
        return __awaiter(this, void 0, void 0, function () {
            var ifText, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ifText = el.getAttribute('d-if');
                        if (ifText == null)
                            return [2, (true)];
                        return [4, this.Application.FunctionHandler.HasFunctionMustacheContext(ifText, sector, renderContext)];
                    case 1:
                        if (!(_a.sent()))
                            return [2, (true)];
                        return [4, this.Application.Solver.ResolveConditional(ifText, null, sector, context, renderContext)];
                    case 2:
                        value = _a.sent();
                        if (value)
                            el.removeAttribute('d-if');
                        return [2, (value)];
                }
            });
        });
    };
    DrapoControlFlow.prototype.RemoveList = function (els) {
        if (els === null)
            return;
        for (var i = els.length - 1; i >= 0; i--)
            this.RemoveListIndex(els, i);
    };
    DrapoControlFlow.prototype.RemoveListIndex = function (els, index) {
        var node = els[index];
        if (node.parentElement != null)
            node.parentElement.removeChild(node);
        els.splice(index, 1);
    };
    DrapoControlFlow.prototype.IsControlFlowDataKeyIterator = function (dataKey) {
        return (this.Application.Parser.IsIterator(dataKey));
    };
    DrapoControlFlow.prototype.GetControlFlowDataKeyIterators = function (context, renderContext, elementForTemplate, expression) {
        return __awaiter(this, void 0, void 0, function () {
            var sector, mustaches, i, mustache, mustacheParts, dataKey, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sector = this.Application.Document.GetSector(elementForTemplate);
                        mustaches = this.Application.Parser.ParseMustaches(expression);
                        for (i = 0; i < mustaches.length; i++) {
                            mustache = mustaches[i];
                            mustacheParts = this.Application.Parser.ParseMustache(mustache);
                            dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                            if (!this.Application.Storage.IsDataKey(dataKey, sector, renderContext))
                                continue;
                            this.Application.Observer.UnsubscribeFor(dataKey, elementForTemplate);
                            this.Application.Observer.SubscribeFor(elementForTemplate, dataKey);
                        }
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, renderContext, null, expression, elementForTemplate, sector, true, null, true, elementForTemplate)];
                    case 1:
                        data = _a.sent();
                        return [2, (this.Application.Parser.ParseIterator(data))];
                }
            });
        });
    };
    DrapoControlFlow.prototype.GetElementHashTemplate = function (el) {
        var content = el.outerHTML;
        var mustaches = this.Application.Parser.ParseMustaches(content);
        var template = '';
        for (var i = 0; i < mustaches.length; i++) {
            if (i > 0)
                template = template + '_';
            template = template + mustaches[i];
        }
        return (template);
    };
    DrapoControlFlow.prototype.GetElementHashValue = function (sector, context, el, hashTemplate) {
        return __awaiter(this, void 0, void 0, function () {
            var hashValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.ModelHandler.ResolveValueExpression(context, el, sector, hashTemplate, false)];
                    case 1:
                        hashValue = _a.sent();
                        return [2, (hashValue)];
                }
            });
        });
    };
    DrapoControlFlow.prototype.GetTemplateVariables = function (sector, context, dataKey, key, template) {
        return __awaiter(this, void 0, void 0, function () {
            var elsFor, dataKeys, elIfs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        elsFor = this.Application.Searcher.FindAllByAttributeFromParent('d-for', template);
                        if (elsFor.length < 1)
                            return [2, (null)];
                        return [4, this.GetControlFlowExpressionsDataKey(sector, elsFor)];
                    case 1:
                        dataKeys = _a.sent();
                        if ((dataKeys == null) || (dataKeys.length < 1))
                            return [2, (null)];
                        elIfs = this.Application.Searcher.FindAllByAttributeFromParent('d-if', template);
                        if (elIfs.length < 1)
                            return [2, ([])];
                        return [2, (this.GetControlFlowConditionsDataKey(sector, dataKey, key, elIfs))];
                }
            });
        });
    };
    DrapoControlFlow.prototype.GetControlFlowExpressionsDataKey = function (sector, elsFor) {
        var dataKeys = [];
        for (var i = 0; i < elsFor.length; i++) {
            var elForCurrent = elsFor[i];
            var forText = elForCurrent.getAttribute('d-for');
            var parsedFor = this.Application.Parser.ParseFor(forText);
            if (parsedFor == null)
                continue;
            var dataKey = parsedFor[2];
            var dataKeyIteratorParts = this.Application.Parser.ParseForIterable(dataKey);
            if (dataKeyIteratorParts.length !== 1)
                return (null);
            var isDataKey = this.Application.Storage.IsDataKey(dataKey, sector);
            if (!isDataKey)
                return (null);
            dataKeys.push(dataKey);
        }
        return (dataKeys);
    };
    DrapoControlFlow.prototype.GetControlFlowConditionsDataKey = function (sector, dataKey, key, elIfs) {
        var dataPaths = [];
        for (var i = 0; i < elIfs.length; i++) {
            var elIfCurrent = elIfs[i];
            var ifText = elIfCurrent.getAttribute('d-if');
            var mustaches = this.Application.Parser.ParseMustaches(ifText);
            for (var j = 0; j < mustaches.length; j++) {
                var mustache = mustaches[j];
                var mustacheParts = this.Application.Parser.ParseMustache(mustache);
                if (mustacheParts[0] !== key)
                    continue;
                dataPaths.push(mustacheParts);
            }
        }
        return (dataPaths);
    };
    DrapoControlFlow.prototype.CreateTemplateKey = function (sector, context, dataKey, templateVariables, data, key, index) {
        return __awaiter(this, void 0, void 0, function () {
            var templateKey, i, mustacheParts, mustacheResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (templateVariables.length === 0)
                            return [2, ('_')];
                        templateKey = '';
                        context.Create(data, null, null, dataKey, key, null, index);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < templateVariables.length)) return [3, 4];
                        mustacheParts = templateVariables[i];
                        return [4, this.Application.Solver.ResolveDataPath(context, null, null, sector, mustacheParts)];
                    case 2:
                        mustacheResolved = _a.sent();
                        templateKey = templateKey + '_' + mustacheResolved;
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        context.Pop();
                        return [2, (templateKey)];
                }
            });
        });
    };
    DrapoControlFlow.prototype.CreateTemplate = function (sector, context, renderContext, el, dataKey, key, index, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context.CanUpdateTemplate = true;
                        context.Create(data, el, null, dataKey, key, null, index);
                        return [4, this.ResolveControlFlowForIterationRender(sector, context, el, renderContext, true, false)];
                    case 1:
                        _a.sent();
                        context.Pop();
                        context.CanUpdateTemplate = false;
                        return [2, (el)];
                }
            });
        });
    };
    DrapoControlFlow.prototype.GetTemplateFromTemplateKey = function (context, templateKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, (context.GetTemplate(templateKey))];
            });
        });
    };
    DrapoControlFlow.prototype.AddTemplate = function (context, templateKey, template) {
        context.AddTemplate(templateKey, template);
    };
    DrapoControlFlow.prototype.GetIteratorRange = function (iterator) {
        var rangeString = this.GetIteratorRangeString(iterator);
        if (rangeString === null)
            return (null);
        var range = this.GetIteratorRangeInternal(rangeString);
        if (!this.IsValidRange(range)) {
            this.Application.ExceptionHandler.HandleError('DrapoFunctionHandler - GetIteratorRange - Invalid Iterator Range - {0}', iterator);
        }
        return (range);
    };
    DrapoControlFlow.prototype.GetIteratorRangeInternal = function (rangeString) {
        var index = rangeString.indexOf('..');
        if (index === -1)
            return (new DrapoRange(rangeString, rangeString));
        if (index === 0)
            return (new DrapoRange(null, rangeString.substr(2)));
        if (index === rangeString.length - 2)
            return (new DrapoRange(rangeString.substr(0, rangeString.length - 2)));
        return (new DrapoRange(rangeString.substr(0, index), rangeString.substr(index + 2)));
    };
    DrapoControlFlow.prototype.GetIteratorRangeString = function (iterator) {
        if (iterator[iterator.length - 1] !== ']')
            return (null);
        var index = iterator.lastIndexOf('[');
        if (index < 1)
            return (null);
        if (iterator[0] === '{')
            return (null);
        return (iterator.substring(index + 1, iterator.length - 1));
    };
    DrapoControlFlow.prototype.CleanIteratorRange = function (iterator) {
        var index = iterator.lastIndexOf('[');
        if (index === -1)
            return (iterator);
        return (iterator.substring(0, index));
    };
    DrapoControlFlow.prototype.IsValidRange = function (range) {
        if (!this.IsValidRangeIndex(range.Start))
            return (false);
        if (!this.IsValidRangeIndex(range.End))
            return (false);
        return (true);
    };
    DrapoControlFlow.prototype.IsValidRangeIndex = function (rangeIndex) {
        if (rangeIndex === null)
            return (true);
        var isHat = rangeIndex[0] === '^';
        if (isHat)
            return (this.Application.Parser.IsNumber(rangeIndex.substr(1)));
        return (this.Application.Parser.IsNumber(rangeIndex));
    };
    DrapoControlFlow.prototype.ApplyRange = function (data, range) {
        var start = range.Start == null ? 0 : this.GetRangeIndex(data, range.Start);
        var end = range.End === null ? data.length : this.GetRangeIndex(data, range.End);
        var isCrescent = end > start;
        var dataRange = [];
        for (var i = start; ((isCrescent) && (i < end)) || ((!isCrescent) && (i >= end)); isCrescent ? i++ : i--) {
            if (i < 0)
                continue;
            if (i >= data.length)
                continue;
            dataRange.push(data[i]);
        }
        return (dataRange);
    };
    DrapoControlFlow.prototype.GetRangeIndex = function (data, rangeIndex) {
        var isHat = rangeIndex[0] === '^';
        var number = this.Application.Parser.ParseNumber(isHat ? rangeIndex.substr(1) : rangeIndex);
        var numberHat = isHat ? data.length - number : number;
        if (numberHat < 0)
            return (0);
        if (numberHat > data.length)
            return (data.length);
        return (numberHat);
    };
    DrapoControlFlow.prototype.ExecuteDataItem = function (sector, context, expression, iterator, forText, ifText, all, datas, dataKey, key, executionContext) {
        if (executionContext === void 0) { executionContext = null; }
        return __awaiter(this, void 0, void 0, function () {
            var j, data, item, execute, conditionalText, conditional, parsedFor, keyChildren, dataKeyIteratorRange, range, dataKeyIterator, dataKeyChildren, dataKeyIteratorParts, datasChildren, childExecuted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        j = 0;
                        _a.label = 1;
                    case 1:
                        if (!(j < datas.length)) return [3, 9];
                        data = datas[j];
                        item = context.Create(data, null, null, dataKey, key, iterator, j);
                        execute = true;
                        if (!(ifText != null)) return [3, 4];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, executionContext, ifText, null)];
                    case 2:
                        conditionalText = _a.sent();
                        return [4, this.Application.Solver.ResolveConditional(conditionalText)];
                    case 3:
                        conditional = _a.sent();
                        if (!conditional) {
                            context.Pop();
                            execute = false;
                        }
                        _a.label = 4;
                    case 4:
                        if (!execute) return [3, 6];
                        return [4, this.Application.FunctionHandler.ResolveFunction(sector, context.Item, null, null, expression, executionContext)];
                    case 5:
                        _a.sent();
                        if (!all)
                            return [2, (true)];
                        _a.label = 6;
                    case 6:
                        if (forText == null)
                            return [3, 8];
                        parsedFor = this.Application.Parser.ParseFor(forText);
                        if (parsedFor == null)
                            return [3, 8];
                        keyChildren = parsedFor[0];
                        dataKeyIteratorRange = parsedFor[2];
                        range = this.GetIteratorRange(dataKeyIteratorRange);
                        dataKeyIterator = range == null ? dataKeyIteratorRange : this.CleanIteratorRange(dataKeyIteratorRange);
                        dataKeyChildren = dataKeyIterator;
                        dataKeyIteratorParts = this.Application.Parser.ParseForIterable(dataKeyIterator);
                        datasChildren = this.Application.Solver.ResolveDataObjectPathObject(data, dataKeyIteratorParts);
                        if (range !== null)
                            datasChildren = this.Application.ControlFlow.ApplyRange(datasChildren, range);
                        if (datasChildren.length === 0)
                            return [3, 8];
                        return [4, this.ExecuteDataItem(sector, context, expression, dataKeyIterator, forText, ifText, all, datasChildren, dataKeyChildren, keyChildren, executionContext)];
                    case 7:
                        childExecuted = _a.sent();
                        if ((childExecuted) && (!all))
                            return [2, (true)];
                        _a.label = 8;
                    case 8:
                        j++;
                        return [3, 1];
                    case 9: return [2, (false)];
                }
            });
        });
    };
    DrapoControlFlow.prototype.ResolveControlFlowForViewportScroll = function (viewport) {
        return __awaiter(this, void 0, void 0, function () {
            var view, dForRender, dForRenders, isHash, hashTemplate, rowsBeforeRemove, rowsBeforeInsertStart, rowsBeforeInsertEnd, rowsAfterRemove, rowsAfterInsertStart, rowsAfterInsertEnd, rowRemove, elBallonAfter, rowNext, rowRemove, i, rowNext, fragmentBefore, rowRemove, i, rowPrevious, fragmentAfter, elementAfterPrevious;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        view = this.Application.ViewportHandler.GetView(viewport);
                        if (view === null)
                            return [2];
                        dForRender = viewport.Element.getAttribute('d-for-render');
                        dForRenders = (dForRender == null) || (dForRender == '') ? [] : this.Application.Parser.ParseBlock(dForRender, ',');
                        isHash = this.Application.Solver.Contains(dForRenders, 'hash');
                        hashTemplate = isHash ? this.GetElementHashTemplate(viewport.Element) : null;
                        rowsBeforeRemove = view[0];
                        rowsBeforeInsertStart = view[1];
                        rowsBeforeInsertEnd = view[2];
                        rowsAfterRemove = view[3];
                        rowsAfterInsertStart = view[4];
                        rowsAfterInsertEnd = view[5];
                        if (rowsBeforeRemove !== null) {
                            if (rowsBeforeRemove === -1) {
                                rowRemove = viewport.ElementBallonBefore.nextElementSibling;
                                elBallonAfter = viewport.ElementBallonAfter;
                                while ((rowRemove != null) && (rowRemove !== elBallonAfter)) {
                                    rowNext = rowRemove.nextElementSibling;
                                    rowRemove.remove();
                                    rowRemove = rowNext;
                                }
                            }
                            else {
                                rowRemove = viewport.ElementBallonBefore.nextElementSibling;
                                if (rowRemove != null) {
                                    for (i = 0; i < rowsBeforeRemove; i++) {
                                        rowNext = rowRemove.nextElementSibling;
                                        rowRemove.remove();
                                        rowRemove = rowNext;
                                    }
                                }
                            }
                        }
                        return [4, this.CreateControlFlowForViewportFragment(viewport, rowsBeforeInsertStart, rowsBeforeInsertEnd, hashTemplate)];
                    case 1:
                        fragmentBefore = _a.sent();
                        if (fragmentBefore !== null) {
                            viewport.ElementBallonBefore.after(fragmentBefore);
                        }
                        if (rowsAfterRemove !== null) {
                            rowRemove = viewport.ElementBallonAfter.previousElementSibling;
                            for (i = 0; i < rowsAfterRemove; i++) {
                                rowPrevious = rowRemove.previousElementSibling;
                                rowRemove.remove();
                                rowRemove = rowPrevious;
                            }
                        }
                        return [4, this.CreateControlFlowForViewportFragment(viewport, rowsAfterInsertStart, rowsAfterInsertEnd, hashTemplate)];
                    case 2:
                        fragmentAfter = _a.sent();
                        if (fragmentAfter !== null) {
                            elementAfterPrevious = viewport.ElementBallonAfter.previousElementSibling;
                            elementAfterPrevious.after(fragmentAfter);
                        }
                        this.Application.ViewportHandler.UpdateElementsBallon(viewport);
                        return [4, this.Application.ComponentHandler.UnloadComponentInstancesDetached(viewport.Sector)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.Document.CollectSector(viewport.Sector)];
                    case 4:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoControlFlow.prototype.CreateControlFlowForViewportFragment = function (viewport, start, end, hashTemplate) {
        return __awaiter(this, void 0, void 0, function () {
            var fragment, context, content, renderContext, i, data, template, item, hashValueCurrent, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if ((start === null) || (end == start))
                            return [2, (null)];
                        fragment = document.createDocumentFragment();
                        context = new DrapoContext();
                        context.Sector = viewport.Sector;
                        context.Index = start - 1;
                        context.IndexRelative = context.Index;
                        content = viewport.ElementTemplate.outerHTML;
                        this.InitializeContext(context, content);
                        renderContext = new DrapoRenderContext();
                        i = start;
                        _b.label = 1;
                    case 1:
                        if (!(i < end)) return [3, 7];
                        data = viewport.Data[i];
                        template = this.Application.Document.Clone(viewport.ElementTemplate);
                        item = context.Create(data, template, template, viewport.DataKey, viewport.Key, viewport.DataKeyIteratorRange, i, null);
                        return [4, this.ResolveControlFlowForIterationRender(viewport.Sector, context, template, renderContext, true, true)];
                    case 2:
                        _b.sent();
                        if (!(hashTemplate === null)) return [3, 3];
                        _a = null;
                        return [3, 5];
                    case 3: return [4, this.GetElementHashValue(viewport.Sector, context, template, hashTemplate)];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        hashValueCurrent = _a;
                        if (hashValueCurrent !== null)
                            template.setAttribute('d-hash', hashValueCurrent);
                        fragment.appendChild(template);
                        _b.label = 6;
                    case 6:
                        i++;
                        return [3, 1];
                    case 7: return [2, (fragment)];
                }
            });
        });
    };
    return DrapoControlFlow;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoCookieHandler = (function () {
    function DrapoCookieHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoCookieHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoCookieHandler.prototype.RetrieveData = function (name) {
        if (name === void 0) { name = 'drapo'; }
        var data = this.CreateStructure(name);
        var values = this.GetCookieValues(name);
        for (var i = 0; i < values.length; i++) {
            var value = values[i];
            data[value[0]] = value[1];
        }
        return (data);
    };
    DrapoCookieHandler.prototype.CreateStructure = function (name) {
        var object = {};
        if (name.toLowerCase() == 'drapo') {
            object.theme = '';
            object.view = '';
            object.culture = '';
        }
        return (object);
    };
    DrapoCookieHandler.prototype.GetCookieValues = function (name) {
        if (name === void 0) { name = 'drapo'; }
        var values = [];
        var cookieValue = this.GetCookieValue(name);
        if (cookieValue == null)
            return (values);
        return (this.CreateCookieValues(cookieValue));
    };
    DrapoCookieHandler.prototype.GetCookieValue = function (name) {
        var nameEqual = name + "=";
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i];
            while (cookie.charAt(0) == ' ') {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(nameEqual) == 0) {
                return (cookie.substring(nameEqual.length, cookie.length));
            }
        }
        return (null);
    };
    DrapoCookieHandler.prototype.CreateCookieValues = function (value) {
        var valueDecoded = this.Application.Serializer.EnsureUrlDecoded(value);
        var values = [];
        var keyValues = valueDecoded.split('&');
        for (var i = 0; i < keyValues.length; i++) {
            var keyValue = keyValues[i];
            var index = keyValue.indexOf('=');
            if (index < 0)
                continue;
            values.push([keyValue.substring(0, index), keyValue.substring(index + 1)]);
        }
        return (values);
    };
    DrapoCookieHandler.prototype.SetCookieValue = function (dataItem) {
        if (dataItem.Data == null)
            return (false);
        var data = this.CreateCookieValue(dataItem.Data);
        return (this.SetDocumentCookie(dataItem.CookieName, data));
    };
    DrapoCookieHandler.prototype.CreateCookieValue = function (object) {
        var data = '';
        for (var name_1 in object) {
            var value = object[name_1];
            if (value == null)
                continue;
            if (data.length > 0)
                data = data + '&';
            data = data + name_1 + '=' + value;
        }
        return (data);
    };
    DrapoCookieHandler.prototype.SetDocumentCookie = function (name, value) {
        document.cookie = name + "=" + value + ";expires=Thu, 03 Jun 2980 00:00:00 UTC;path=/";
        return (true);
    };
    DrapoCookieHandler.prototype.HandleCookieValuesChanges = function (cookieValuesBefore) {
        return __awaiter(this, void 0, void 0, function () {
            var cookieValues, namesChanged, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cookieValues = this.GetCookieValues();
                        namesChanged = this.GetCookieValuesNamedChanged(cookieValuesBefore, cookieValues);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < namesChanged.length)) return [3, 4];
                        return [4, this.HandleCookieValueChange(namesChanged[i])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2, (namesChanged.length > 0)];
                }
            });
        });
    };
    DrapoCookieHandler.prototype.HandleCookieValueChange = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(name === 'culture')) return [3, 2];
                        return [4, this.Application.Globalization.ReloadCulture()];
                    case 1:
                        _a.sent();
                        return [3, 4];
                    case 2:
                        if (!(name === 'theme')) return [3, 4];
                        return [4, this.Application.Stylist.ReloadStyles()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    DrapoCookieHandler.prototype.GetCookieValuesNamedChanged = function (cookieValuesBefore, cookieValues) {
        var changesNames = [];
        for (var i = 0; i < cookieValues.length; i++) {
            var cookieValue = cookieValues[i];
            var name_2 = cookieValue[0];
            var value = cookieValue[1];
            if (this.HasCookieValueChanged(cookieValuesBefore, name_2, value))
                changesNames.push(name_2);
        }
        return (changesNames);
    };
    DrapoCookieHandler.prototype.HasCookieValueChanged = function (cookieValues, name, value) {
        for (var i = 0; i < cookieValues.length; i++) {
            var cookieValue = cookieValues[i];
            var nameCurrent = cookieValue[0];
            if (name !== nameCurrent)
                continue;
            var valueCurrent = cookieValue[1];
            return (value !== valueCurrent);
        }
        return (true);
    };
    DrapoCookieHandler.prototype.GetTheme = function () {
        var cookieData = this.Application.CookieHandler.RetrieveData();
        if (cookieData == null)
            return ('');
        return (cookieData.theme);
    };
    DrapoCookieHandler.prototype.GetView = function () {
        var cookieData = this.Application.CookieHandler.RetrieveData();
        if (cookieData == null)
            return ('');
        return (cookieData.view);
    };
    return DrapoCookieHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoDebugger = (function () {
    function DrapoDebugger(application) {
        this._visible = false;
        this._active = false;
        this._sector = '__debugger';
        this.SESSION_STORAGE_KEY = 'drapoDebugger';
        this._application = application;
    }
    Object.defineProperty(DrapoDebugger.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDebugger.prototype, "Visible", {
        get: function () {
            return (this._visible);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDebugger.prototype, "Active", {
        get: function () {
            return (this._active);
        },
        enumerable: false,
        configurable: true
    });
    DrapoDebugger.prototype.ConnectDebugger = function () {
        return __awaiter(this, void 0, void 0, function () {
            var application, elDocument;
            return __generator(this, function (_a) {
                application = this.Application;
                elDocument = document.documentElement;
                this.Application.EventHandler.AttachEventListener(elDocument, 'keyup', 'keyup.debugger', function (e) {
                    if (!e.ctrlKey)
                        return;
                    if (e.key !== 'F2')
                        return;
                    application.Debugger.ToogleDebugger();
                });
                return [2];
            });
        });
    };
    DrapoDebugger.prototype.Initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var debuggerPropertiesText, debuggerProperties;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debuggerPropertiesText = window.sessionStorage.getItem(this.SESSION_STORAGE_KEY);
                        if (debuggerPropertiesText == null)
                            return [2];
                        debuggerProperties = this.Application.Serializer.Deserialize(debuggerPropertiesText);
                        return [4, this.Application.Storage.UpdateData('__debuggerProperties', null, debuggerProperties)];
                    case 1:
                        _a.sent();
                        this._active = true;
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.ToogleDebugger = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._visible)
                    return [2, (this.CloseDebugger())];
                else
                    return [2, (this.ShowDebugger())];
                return [2];
            });
        });
    };
    DrapoDebugger.prototype.ShowDebugger = function () {
        return __awaiter(this, void 0, void 0, function () {
            var elSector, fragment, elSectorNew;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._visible)
                            return [2, (false)];
                        return [4, this.Application.Storage.UnloadData('__objects', '')];
                    case 1:
                        _a.sent();
                        elSector = this.Application.Searcher.FindByAttributeAndValue('d-sector', this._sector);
                        if (elSector == null) {
                            fragment = document.createDocumentFragment();
                            elSectorNew = document.createElement('div');
                            elSectorNew.setAttribute('d-sector', this._sector);
                            elSectorNew.setAttribute('style', 'position:relative;z-index:99999');
                            fragment.appendChild(elSectorNew);
                            document.body.appendChild(fragment);
                        }
                        this.Application.Document.StartUpdate(this._sector);
                        return [4, this.Application.Document.LoadChildSectorContent(this._sector, '<d-debugger></d-debugger>')];
                    case 2:
                        _a.sent();
                        this._visible = true;
                        this._active = true;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDebugger.prototype.CloseDebugger = function () {
        return __awaiter(this, void 0, void 0, function () {
            var elSector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._visible)
                            return [2, (false)];
                        this.Application.Document.StartUpdate(this._sector);
                        return [4, this.Application.Document.LoadChildSectorContent(this._sector, '')];
                    case 1:
                        _a.sent();
                        elSector = this.Application.Searcher.FindByAttributeAndValue('d-sector', this._sector);
                        return [4, this.Application.Document.RemoveElement(elSector, false)];
                    case 2:
                        _a.sent();
                        this._visible = false;
                        this._active = false;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDebugger.prototype.HasBreakpoint = function (sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var breakpoints, i, breakpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2, (false)];
                        return [4, this.Application.Storage.RetrieveData('__breakpoints', '')];
                    case 1:
                        breakpoints = _a.sent();
                        for (i = 0; i < breakpoints.length; i++) {
                            breakpoint = breakpoints[i];
                            if ((this.Application.Document.IsEqualSector(breakpoint.sector, sector)) && (breakpoint.datakey === dataKey))
                                return [2, (true)];
                        }
                        return [2, (false)];
                }
            });
        });
    };
    DrapoDebugger.prototype.ActivateBreakpoint = function (sector, dataKey, functionsValue, functionValue, label) {
        return __awaiter(this, void 0, void 0, function () {
            var isRunning;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['sector'], sector, false)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['datakey'], dataKey, false)];
                    case 2:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['expression'], functionsValue, false)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['functionValue'], functionValue, false)];
                    case 4:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['label'], label, false)];
                    case 5:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['running'], false, false)];
                    case 6:
                        _a.sent();
                        return [4, this.Application.Observer.Notify('__runtime', null, null)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        if (!true) return [3, 12];
                        return [4, this.Application.Storage.ResolveMustaches('', '{{__runtime.running}}')];
                    case 9:
                        isRunning = _a.sent();
                        return [4, this.Application.Solver.ResolveConditional(isRunning)];
                    case 10:
                        if (_a.sent())
                            return [3, 12];
                        return [4, this.Application.Document.Sleep(1000)];
                    case 11:
                        _a.sent();
                        return [3, 8];
                    case 12: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.CleanRuntime = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['sector'], '', false)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['datakey'], '', false)];
                    case 2:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['expression'], '', false)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['functionValue'], '', false)];
                    case 4:
                        _a.sent();
                        return [4, this.Application.Storage.SetDataKeyField('__runtime', '', ['label'], '', false)];
                    case 5:
                        _a.sent();
                        return [4, this.Application.Observer.Notify('__runtime', null, null)];
                    case 6:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.NotifySectors = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        return [4, this.Application.Storage.ReloadData('__sectors', '')];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Storage.ReloadData('__objects', '')];
                    case 2:
                        _a.sent();
                        return [4, this.Application.Storage.ReloadData('__objectswatchsvalues', '')];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.NotifyStorage = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        if (this.Application.Document.IsHiddenKey(dataKey))
                            return [2];
                        return [4, this.Application.Storage.ReloadData('__objects', '')];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Storage.ReloadData('__objectswatchsvalues', '')];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.NotifyComponents = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        return [4, this.Application.Storage.ReloadData('__components', '')];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.AddNotify = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        if (this.Application.Document.IsHiddenKey(dataKey))
                            return [2];
                        return [4, this.Application.Storage.AddDataItem('__notifys', null, '', dataKey)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Storage.ReloadData('__objectswatchsvalues', '')];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.AddPipe = function (pipe) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        if (this.Application.Document.IsHiddenKey(pipe))
                            return [2];
                        return [4, this.Application.Storage.AddDataItem('__pipes', null, '', pipe)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.AddFunction = function (functionParsed) {
        return __awaiter(this, void 0, void 0, function () {
            var functionText, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        if (this.Application.Document.IsHiddenKey(functionParsed.Name))
                            return [2];
                        functionText = functionParsed.Name + '(';
                        for (i = 0; i < functionParsed.Parameters.length; i++) {
                            if (i != 0)
                                functionText += ',';
                            functionText += functionParsed.Parameters[i];
                        }
                        functionText += ')';
                        return [4, this.Application.Storage.AddDataItem('__functions', null, '', functionText)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.AddError = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            var lastError;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2];
                        return [4, this.Application.Storage.GetDataItemLast('__errors', '')];
                    case 1:
                        lastError = _a.sent();
                        if (lastError == error)
                            return [2];
                        return [4, this.Application.Storage.AddDataItem('__errors', null, '', error)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.GetObjects = function () {
        return __awaiter(this, void 0, void 0, function () {
            var objectsExpanded, objects;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Storage.RetrieveData('__objectsexpanded', null)];
                    case 1:
                        objectsExpanded = _a.sent();
                        objects = [];
                        return [4, this.CreateObjectSector(objectsExpanded, objects, null, 'root')];
                    case 2:
                        _a.sent();
                        return [2, (objects)];
                }
            });
        });
    };
    DrapoDebugger.prototype.CreateObject = function (type, key, name, sector, objectsExpanded) {
        return __awaiter(this, void 0, void 0, function () {
            var object, i;
            return __generator(this, function (_a) {
                object = {};
                object.Type = type;
                object.Key = key;
                object.Code = type + '_' + key;
                object.Name = name != null ? name : key;
                object.Children = [];
                object.Sector = sector;
                object.Action = this.CreateObjectAction(type, key, name, sector);
                object.IsExpanded = false;
                if (objectsExpanded != null) {
                    for (i = 0; i < objectsExpanded.length; i++) {
                        if (objectsExpanded[i] != object.Code)
                            continue;
                        object.IsExpanded = true;
                        break;
                    }
                }
                return [2, (object)];
            });
        });
    };
    DrapoDebugger.prototype.CreateObjectAction = function (type, key, name, sector) {
        if (type === 'sector')
            return ('UpdateDataField(__objectproperties,datakey,);UpdateDataField(__objectproperties,sector,' + sector + ');Debugger(highlight,sector,dbgDebuggerHighlight,' + sector + ')');
        if (type === 'data')
            return ('UpdateDataField(__objectproperties,sector,' + sector + ',false);UpdateDataField(__objectproperties,datakey,' + key + ');Debugger(highlight,sector,dbgDebuggerHighlight,);ReloadData(__objectdata)');
        return ('');
    };
    DrapoDebugger.prototype.CreateObjectSector = function (objectsExpanded, objects, sector, name) {
        if (name === void 0) { name = null; }
        return __awaiter(this, void 0, void 0, function () {
            var object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if ((sector != null) && (sector[0] == '_'))
                            return [2];
                        return [4, this.CreateObject('sector', sector, name != null ? name : sector, sector, objectsExpanded)];
                    case 1:
                        object = _a.sent();
                        objects.push(object);
                        return [4, this.InsertObjectSectorChildrenSectors(objectsExpanded, object.Children, sector)];
                    case 2:
                        _a.sent();
                        return [4, this.InsertObjectSectorChildrenData(object.Children, sector)];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.InsertObjectSectorChildrenSectors = function (objectsExpanded, objects, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var sectors, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sectors = this.Application.Document.GetSectorChildren(sector);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < sectors.length)) return [3, 4];
                        return [4, this.CreateObjectSector(objectsExpanded, objects, sectors[i])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.InsertObjectSectorChildrenData = function (objects, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeys, i, dataKey, object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeys = this.Application.Storage.GetSectorDataKeys(sector);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < dataKeys.length)) return [3, 4];
                        dataKey = dataKeys[i];
                        if (dataKey[0] == '_')
                            return [2];
                        return [4, this.CreateObject('data', dataKey, dataKey, sector, null)];
                    case 2:
                        object = _a.sent();
                        objects.push(object);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.CreateObjectData = function (sector, name, value, mustache) {
        var object = {};
        object.Name = name != null ? name : 'data';
        object.Value = value;
        object.Mustache = mustache;
        object.__objectdata = [];
        object.Action = 'UpdateDataField(__objectwatch,Sector,' + sector + ');UpdateDataField(__objectwatch,Mustache,' + object.Mustache + ');AddDataItem(__objectswatchs,__objectwatch);ReloadData(__objectswatchsvalues)';
        object.IsExpanded = name == null;
        return (object);
    };
    DrapoDebugger.prototype.GetObjectData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sector, dataKey, objects, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Storage.RetrieveDataValue(null, '{{__objectproperties.sector}}')];
                    case 1:
                        sector = _a.sent();
                        return [4, this.Application.Storage.RetrieveDataValue(null, '{{__objectproperties.datakey}}')];
                    case 2:
                        dataKey = _a.sent();
                        objects = [];
                        if (dataKey == '')
                            return [2, (objects)];
                        return [4, this.GetObjectDataItem(dataKey, sector)];
                    case 3:
                        data = _a.sent();
                        return [4, this.InsertObjectData(sector, objects, dataKey, null, data)];
                    case 4:
                        _a.sent();
                        return [2, (objects)];
                }
            });
        });
    };
    DrapoDebugger.prototype.GetObjectDataItem = function (dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var storageItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Storage.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        storageItem = _a.sent();
                        if (storageItem == null)
                            return [2, (null)];
                        if ((storageItem.Type == 'function') && (storageItem.OnLoad != null))
                            return [2, (storageItem.OnLoad)];
                        return [2, (storageItem.Data)];
                }
            });
        });
    };
    DrapoDebugger.prototype.InsertObjectData = function (sector, objects, mustachePrefix, name, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (data == null)
                            return [2];
                        if (name !== null)
                            mustachePrefix = mustachePrefix + '.' + name;
                        if (!Array.isArray(data)) return [3, 2];
                        return [4, this.InsertObjectDataArray(sector, objects, mustachePrefix, name, data)];
                    case 1:
                        _a.sent();
                        return [3, 8];
                    case 2:
                        if (!(data instanceof Object)) return [3, 4];
                        return [4, this.InsertObjectDataObject(sector, objects, mustachePrefix, name, data)];
                    case 3:
                        _a.sent();
                        return [3, 8];
                    case 4:
                        if (!((typeof data === 'string') || (data instanceof String))) return [3, 6];
                        return [4, this.InsertObjectDataString(sector, objects, mustachePrefix, name, data)];
                    case 5:
                        _a.sent();
                        return [3, 8];
                    case 6: return [4, this.InsertObjectDataString(sector, objects, mustachePrefix, name, data.toString())];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.InsertObjectDataObject = function (sector, objects, mustache, name, data) {
        return __awaiter(this, void 0, void 0, function () {
            var object, _a, _b, _c, _i, property, propertyName, propertyData;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        object = this.CreateObjectData(sector, name, '', mustache);
                        objects.push(object);
                        _a = data;
                        _b = [];
                        for (_c in _a)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3, 4];
                        _c = _b[_i];
                        if (!(_c in _a)) return [3, 3];
                        property = _c;
                        propertyName = property;
                        propertyData = data[property];
                        return [4, this.InsertObjectData(sector, object.__objectdata, mustache, propertyName, propertyData)];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.InsertObjectDataArray = function (sector, objects, mustache, name, data) {
        return __awaiter(this, void 0, void 0, function () {
            var object, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        object = this.CreateObjectData(sector, name, '', mustache);
                        objects.push(object);
                        return [4, this.InsertObjectDataString(sector, object.__objectdata, mustache + '.length', 'length', data.length.toString())];
                    case 1:
                        _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < data.length)) return [3, 5];
                        return [4, this.InsertObjectData(sector, object.__objectdata, mustache, '[' + i + ']', data[i])];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.InsertObjectDataString = function (sector, objects, mustache, name, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                objects.push(this.CreateObjectData(sector, name, data, mustache));
                return [2];
            });
        });
    };
    DrapoDebugger.prototype.CreateWatchValue = function (sector, mustache, value, index) {
        var object = {};
        object.Sector = sector == null ? 'root' : sector;
        object.Mustache = mustache;
        object.Value = value;
        object.ActionRemove = 'RemoveDataItemLookup(__objectswatchs,_Index,' + index + ');ReloadData(__objectswatchsvalues)';
        return (object);
    };
    DrapoDebugger.prototype.GetWatchsValues = function () {
        return __awaiter(this, void 0, void 0, function () {
            var objects, watchs, i, watch, sector, mustache, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        objects = [];
                        return [4, this.Application.Storage.RetrieveData('__objectswatchs', null)];
                    case 1:
                        watchs = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < watchs.length)) return [3, 5];
                        watch = watchs[i];
                        sector = watch.Sector;
                        mustache = watch.Mustache;
                        return [4, this.Application.Storage.RetrieveDataValue(sector, '{{' + mustache + '}}')];
                    case 3:
                        value = _a.sent();
                        objects.push(this.CreateWatchValue(sector, mustache, value, i));
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5: return [2, (objects)];
                }
            });
        });
    };
    DrapoDebugger.prototype.ExecuteFunctionDebugger = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var command;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = parameters[0].toLowerCase();
                        if (!(command == 'highlight')) return [3, 2];
                        return [4, this.ExecuteFunctionDebuggerHighligh(parameters)];
                    case 1:
                        _a.sent();
                        return [3, 6];
                    case 2:
                        if (!(command == 'reload')) return [3, 4];
                        return [4, this.ExecuteFunctionDebuggerReload()];
                    case 3:
                        _a.sent();
                        return [3, 6];
                    case 4:
                        if (!(command == 'persist')) return [3, 6];
                        return [4, this.ExecuteFunctionDebuggerPersist()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.ExecuteFunctionDebuggerHighligh = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var location;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        location = parameters[1].toLowerCase();
                        if (!(location == 'sector')) return [3, 2];
                        return [4, this.ExecuteFunctionDebuggerHighlighSector(parameters)];
                    case 1:
                        _a.sent();
                        return [3, 4];
                    case 2:
                        if (!(location == 'component')) return [3, 4];
                        return [4, this.ExecuteFunctionDebuggerHighlighComponent(parameters)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.ExecuteFunctionDebuggerHighlighSector = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var classHighlight, sector, elBeforeList, elBefore, elAfter;
            return __generator(this, function (_a) {
                classHighlight = parameters[2];
                sector = parameters[3];
                elBeforeList = document.getElementsByClassName(classHighlight);
                elBefore = elBeforeList.length > 0 ? elBeforeList[0] : null;
                elAfter = ((sector != '') && (sector != 'null')) ? this.Application.Searcher.FindByAttributeAndValue('d-sector', sector) : null;
                if (elBefore != null)
                    elBefore.classList.remove(classHighlight);
                if (elBefore != elAfter)
                    elAfter.classList.add(classHighlight);
                return [2];
            });
        });
    };
    DrapoDebugger.prototype.ExecuteFunctionDebuggerHighlighComponent = function (parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var classHighlight, index, elBeforeList, elBefore, components, elAfter;
            return __generator(this, function (_a) {
                classHighlight = parameters[2];
                index = Number(parameters[3]);
                elBeforeList = document.getElementsByClassName(classHighlight);
                elBefore = elBeforeList.length > 0 ? elBeforeList[0] : null;
                components = this.Application.ComponentHandler.Retrieve();
                elAfter = components[index][2];
                if (elBefore != null)
                    elBefore.classList.remove(classHighlight);
                if (elBefore != elAfter)
                    elAfter.classList.add(classHighlight);
                return [2];
            });
        });
    };
    DrapoDebugger.prototype.GetComponents = function () {
        return __awaiter(this, void 0, void 0, function () {
            var objectsExpanded, objects, components, i, component;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Storage.RetrieveData('__objectsexpanded', null)];
                    case 1:
                        objectsExpanded = _a.sent();
                        objects = [];
                        components = this.Application.ComponentHandler.Retrieve();
                        for (i = 0; i < components.length; i++) {
                            component = components[i];
                            objects.push(this.CreateComponentData(component[1], i));
                        }
                        return [2, (objects)];
                }
            });
        });
    };
    DrapoDebugger.prototype.CreateRequest = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2, (null)];
                        request = {};
                        request.Url = url;
                        request.Start = new Date(Date.now()).toJSON();
                        return [4, this.Application.Storage.AddDataItem('__requests', null, '', request, false)];
                    case 1:
                        _a.sent();
                        return [2, (request)];
                }
            });
        });
    };
    DrapoDebugger.prototype.FinishRequest = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var lastRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (request == null)
                            return [2, (null)];
                        request.End = new Date(Date.now()).toJSON();
                        return [4, this.Application.Storage.GetDataItemLast('__requests', '')];
                    case 1:
                        lastRequest = _a.sent();
                        request.Last = request === request;
                        return [4, this.Application.Observer.Notify('__requests', null, null)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.CreateComponentData = function (tag, index) {
        var object = {};
        object.Tag = tag;
        object.Action = 'Debugger(highlight,component,dbgDebuggerHighlight, ' + index + ')';
        return (object);
    };
    DrapoDebugger.prototype.AddSectorUpdate = function (name, parent, url) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorUpdate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Active)
                            return [2, (null)];
                        sectorUpdate = {};
                        sectorUpdate.Name = name;
                        sectorUpdate.Parent = parent;
                        sectorUpdate.Url = url;
                        return [4, this.Application.Storage.AddDataItem('__sectorsupdate', null, '', sectorUpdate)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.ExecuteFunctionDebuggerReload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var debuggerConfiguration;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!window.sessionStorage)
                            return [2];
                        return [4, this.Application.Storage.RetrieveData('__debuggerProperties', null)];
                    case 1:
                        debuggerConfiguration = _a.sent();
                        window.sessionStorage.setItem(this.SESSION_STORAGE_KEY, this.Application.Serializer.Serialize(debuggerConfiguration));
                        window.location.reload();
                        return [2];
                }
            });
        });
    };
    DrapoDebugger.prototype.ExecuteFunctionDebuggerPersist = function () {
        return __awaiter(this, void 0, void 0, function () {
            var debuggerConfiguration, persist;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!window.sessionStorage)
                            return [2];
                        return [4, this.Application.Storage.RetrieveData('__debuggerProperties', null)];
                    case 1:
                        debuggerConfiguration = _a.sent();
                        if (debuggerConfiguration == null)
                            return [2];
                        persist = this.Application.Solver.ResolveConditionalBoolean(debuggerConfiguration.persist);
                        if (persist)
                            window.sessionStorage.setItem(this.SESSION_STORAGE_KEY, this.Application.Serializer.Serialize(debuggerConfiguration));
                        else
                            window.sessionStorage.removeItem(this.SESSION_STORAGE_KEY);
                        return [2];
                }
            });
        });
    };
    return DrapoDebugger;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoDocument = (function () {
    function DrapoDocument(application) {
        this._pendingAuthorizations = 0;
        this._sectorsLoaded = [];
        this._message = null;
        this._sectorHierarchy = [];
        this._sectorFriends = [];
        this._lastGuid = null;
        this._application = application;
    }
    Object.defineProperty(DrapoDocument.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDocument.prototype, "Message", {
        get: function () {
            return (this._message);
        },
        set: function (value) {
            this._message = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoDocument.prototype.ResetPendingAuthorizations = function (count) {
        if (count === void 0) { count = 0; }
        this._pendingAuthorizations = count;
    };
    DrapoDocument.prototype.StartUpdate = function (sector) {
        if (sector == null) {
            this.InitializeSectorsLoaded();
        }
        else {
            for (var i = this._sectorsLoaded.length - 1; i >= 0; i--)
                if (this._sectorsLoaded[i] === sector)
                    this._sectorsLoaded.splice(i, 1);
        }
    };
    DrapoDocument.prototype.Resolve = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.StartUpdate(null);
                        return [4, this.ResolveInternal()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ResolveInternal = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Log.WriteVerbose('Document - ResolveInternal - Started');
                        return [4, this.ResolveParent()];
                    case 1:
                        if (!!(_a.sent())) return [3, 3];
                        return [4, this.ResolveChildren(null)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.Application.Log.WriteVerbose('Document - ResolveInternal - Finished');
                        return [4, this.Application.Storage.ResolveData(false)];
                    case 4:
                        _a.sent();
                        return [4, this.Application.ControlFlow.ResolveControlFlowDocument()];
                    case 5:
                        _a.sent();
                        return [4, this.Application.ComponentHandler.ResolveComponents()];
                    case 6:
                        _a.sent();
                        return [4, this.Application.Storage.ResolveData(true)];
                    case 7:
                        _a.sent();
                        return [4, this.Application.Barber.ResolveMustaches()];
                    case 8:
                        _a.sent();
                        return [4, this.TryOnAuthorizationRequest()];
                    case 9:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ResolveParent = function () {
        return __awaiter(this, void 0, void 0, function () {
            var divElement, parent, parentSector, sectors, html;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Log.WriteVerbose('Document - ResolveParent - Started');
                        divElement = this.Application.Searcher.FindByTagName('div');
                        if (divElement == null) {
                            this.Application.Log.WriteVerbose('Document - ResolveParent - Finished - NoDiv');
                            return [2, (false)];
                        }
                        parent = divElement.getAttribute('d-sector-parent-url');
                        if (parent == null) {
                            this.Application.Log.WriteVerbose('Document - ResolveParent - Finished - NoParent');
                            return [2, (false)];
                        }
                        parentSector = divElement.getAttribute('d-sector-parent');
                        if (parentSector == null) {
                            this.Application.Log.WriteVerbose('Document - ResolveParent - Finished - NoParentSector');
                            return [2, (false)];
                        }
                        sectors = this.ExtractSectors(divElement);
                        this.Application.Log.WriteVerbose('Document - ResolveParent - parent = {0}, parentSector = {1}', parent, parentSector);
                        return [4, this.Application.Server.GetViewHTML(parent)];
                    case 1:
                        html = _a.sent();
                        return [4, this.ResolveParentResponse(html, parent, parentSector, divElement.outerHTML, sectors)];
                    case 2:
                        _a.sent();
                        this.Application.Log.WriteVerbose('Document - ResolveParent - Finished');
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDocument.prototype.ResolveParentResponse = function (data, parent, parentSector, childHtml, sectors) {
        return __awaiter(this, void 0, void 0, function () {
            var elChildSector, i, sector, sectorName, url, container;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Log.WriteVerbose('Document - ResolveParentResponse - Started');
                        if (this.Application.Log.ShowHTML)
                            this.Application.Log.WriteVerbose('Document - ResolveParentResponse - data - {0}', data);
                        this.ReplaceDocument(data);
                        this.Application.Log.WriteVerbose('Document - ResolveParentResponse - parent = {0}, parentSector = {1}', parent, parentSector);
                        elChildSector = this.Application.Searcher.FindByAttributeAndValue('d-sector', parentSector);
                        if (!(elChildSector != null)) return [3, 2];
                        return [4, this.AddSectorFriends(parentSector, elChildSector.getAttribute('d-sector-friend'))];
                    case 1:
                        _a.sent();
                        this.SetHTML(elChildSector, childHtml);
                        _a.label = 2;
                    case 2:
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < sectors.length)) return [3, 7];
                        sector = sectors[i];
                        sectorName = sector[0];
                        url = sector[1];
                        container = sector[2];
                        return [4, this.AddSectorHierarchy(sectorName, parentSector)];
                    case 4:
                        _a.sent();
                        this.StartUpdate(sectorName);
                        return [4, this.LoadChildSector(sectorName, url, null, true, false, container)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3, 3];
                    case 7:
                        this.Application.Log.WriteVerbose('Document - ResolveParentResponse - Finished');
                        return [4, this.ResolveInternal()];
                    case 8:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ExtractSectors = function (el) {
        var attributes = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var attributeSectorProperty = this.ExtractSectorProperty(attribute.nodeName);
            if (attributeSectorProperty != null)
                attributes.push([attributeSectorProperty, attribute.nodeValue, el.getAttribute('d-sector-container-' + attributeSectorProperty)]);
        }
        return (attributes);
    };
    DrapoDocument.prototype.ExtractSectorProperty = function (property) {
        var parse = this.Application.Parser.ParseProperty(property);
        if (parse.length != 4)
            return (null);
        if (parse[0] != 'd')
            return (null);
        if ((parse[1].toLowerCase() != 'sector') || (parse[2] != 'default'))
            return (null);
        return (parse[3]);
    };
    DrapoDocument.prototype.ResolveChildren = function (elStart) {
        return __awaiter(this, void 0, void 0, function () {
            var elsSector, sector, sectorChildren, i, elSector, sectorChildParent, i, elChild, childSector, url, urlSector, urlResolved, _a, container, childContainer, dataPath, contextItem, item, html, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        elsSector = elStart == null ? this.Application.Searcher.FindAllByAttribute('d-sector') : this.Application.Searcher.FindAllByAttributeFromParent('d-sector', elStart);
                        if (elsSector.length === 0)
                            return [2];
                        sector = this.GetSector(elStart);
                        sectorChildren = [];
                        for (i = 0; i < elsSector.length; i++) {
                            elSector = elsSector[i];
                            sectorChildParent = this.GetSectorParent(elSector);
                            if (sector === sectorChildParent)
                                sectorChildren.push(elSector);
                        }
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < sectorChildren.length)) return [3, 16];
                        elChild = sectorChildren[i];
                        childSector = elChild.getAttribute('d-sector');
                        if (childSector == "@") {
                            childSector = this.CreateGuid();
                            elChild.setAttribute('d-sector', childSector);
                        }
                        if (this.IsSectorAlreadyLoaded(childSector))
                            return [3, 15];
                        this.MarkSectorAsLoaded(childSector);
                        url = elChild.getAttribute('d-sector-url');
                        if ((url != null) && (elChild.children.length > 0))
                            return [3, 15];
                        urlSector = this.GetSectorParent(elChild);
                        if (!(url != null)) return [3, 3];
                        return [4, this.Application.Storage.ResolveDataUrlMustaches(null, urlSector, url, null)];
                    case 2:
                        _a = _c.sent();
                        return [3, 4];
                    case 3:
                        _a = null;
                        _c.label = 4;
                    case 4:
                        urlResolved = _a;
                        container = null;
                        childContainer = elChild.getAttribute('d-container');
                        if (!(childContainer !== null)) return [3, 10];
                        if (!this.Application.Parser.IsMustache(childContainer)) return [3, 9];
                        dataPath = this.Application.Parser.ParseMustache(childContainer);
                        return [4, this.Application.Solver.CreateContextItemFromPath(childSector, dataPath)];
                    case 5:
                        contextItem = _c.sent();
                        return [4, this.Application.Solver.ResolveItemDataPathObject(childSector, contextItem, dataPath)];
                    case 6:
                        item = _c.sent();
                        if (!((item === null) || (item === ''))) return [3, 8];
                        item = this.Application.Document.CreateGuid();
                        return [4, this.Application.Solver.UpdateItemDataPathObject(childSector, contextItem, null, dataPath, item)];
                    case 7:
                        _c.sent();
                        _c.label = 8;
                    case 8:
                        container = item.toString();
                        return [3, 10];
                    case 9:
                        if (childContainer == "@") {
                            childContainer = this.CreateGuid();
                            elChild.setAttribute('d-container', childContainer);
                        }
                        container = childContainer;
                        _c.label = 10;
                    case 10:
                        if (!(urlResolved != null)) return [3, 12];
                        return [4, this.Application.Server.GetViewHTML(urlResolved)];
                    case 11:
                        _b = _c.sent();
                        return [3, 13];
                    case 12:
                        _b = null;
                        _c.label = 13;
                    case 13:
                        html = _b;
                        return [4, this.LoadChildSectorInternal(urlResolved, html, childSector, elChild, null, true, false, container)];
                    case 14:
                        _c.sent();
                        _c.label = 15;
                    case 15:
                        i++;
                        return [3, 1];
                    case 16: return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.LoadChildSectorInternal = function (url, data, sector, elSector, title, canRoute, canLoadDefaultSectors, container) {
        if (title === void 0) { title = null; }
        if (canRoute === void 0) { canRoute = true; }
        if (canLoadDefaultSectors === void 0) { canLoadDefaultSectors = false; }
        if (container === void 0) { container = null; }
        return __awaiter(this, void 0, void 0, function () {
            var content, elContentParent, route, sectorParent, divChildSectorLoaded, divElement, sectors, i, sectorInfo, sectorName, sectorUrl, sectorContainer, elSectorContent, onload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Log.WriteVerbose('Document - ResolveChildResponse - Started - Sector {0}', sector);
                        if (!(container !== null)) return [3, 2];
                        return [4, this.Application.SectorContainerHandler.Switch(sector, container)];
                    case 1:
                        if (_a.sent())
                            return [2];
                        content = this.Application.Parser.ParseDocumentContent(data);
                        elContentParent = document.createElement('div');
                        elContentParent.innerHTML = this.EnsureHTML(content);
                        elSector.appendChild(elContentParent.children[0]);
                        return [3, 4];
                    case 2:
                        if (!(data != null)) return [3, 4];
                        return [4, this.ReplaceSectorData(elSector, data)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        route = ((canRoute) && (url != null)) ? elSector.getAttribute('d-route') : 'false';
                        if (!((route == null) || (route != 'false'))) return [3, 6];
                        return [4, this.Application.Router.Route(url, sector, title)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        sectorParent = this.GetSectorParent(elSector);
                        return [4, this.Application.Debugger.AddSectorUpdate(sector, sectorParent, url)];
                    case 7:
                        _a.sent();
                        return [4, this.AddSectorHierarchy(sector, sectorParent)];
                    case 8:
                        _a.sent();
                        return [4, this.AddSectorFriends(sector, elSector.getAttribute('d-sector-friend'))];
                    case 9:
                        _a.sent();
                        if (!canLoadDefaultSectors) return [3, 14];
                        divChildSectorLoaded = elSector.children;
                        divElement = divChildSectorLoaded.length > 0 ? divChildSectorLoaded[0] : null;
                        sectors = divElement != null ? this.ExtractSectors(divElement) : [];
                        i = 0;
                        _a.label = 10;
                    case 10:
                        if (!(i < sectors.length)) return [3, 14];
                        sectorInfo = sectors[i];
                        sectorName = sectorInfo[0];
                        sectorUrl = sectorInfo[1];
                        sectorContainer = sectorInfo[2];
                        return [4, this.AddSectorHierarchy(sectorName, sector)];
                    case 11:
                        _a.sent();
                        this.StartUpdate(sectorName);
                        return [4, this.LoadChildSector(sectorName, sectorUrl, null, true, false, sectorContainer)];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13:
                        i++;
                        return [3, 10];
                    case 14:
                        if (data == '')
                            return [2];
                        elSectorContent = container !== null ? elSector.children[elSector.children.length - 1] : elSector;
                        return [4, this.Application.Storage.ResolveData(false, elSectorContent)];
                    case 15:
                        _a.sent();
                        return [4, this.Application.ControlFlow.ResolveControlFlowSector(elSectorContent)];
                    case 16:
                        _a.sent();
                        return [4, this.Application.ComponentHandler.ResolveComponents(elSectorContent)];
                    case 17:
                        _a.sent();
                        return [4, this.Application.Storage.ResolveData(true, elSectorContent)];
                    case 18:
                        _a.sent();
                        return [4, this.Application.Barber.ResolveMustaches(elSectorContent)];
                    case 19:
                        _a.sent();
                        return [4, this.ResolveChildren(elSectorContent)];
                    case 20:
                        _a.sent();
                        return [4, this.Application.Storage.LoadDataDelayedAndNotify()];
                    case 21:
                        _a.sent();
                        onload = elSector.getAttribute("d-on-load");
                        if (!(onload != null)) return [3, 23];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(sector, elSector, onload)];
                    case 22:
                        _a.sent();
                        _a.label = 23;
                    case 23: return [4, this.TryOnAuthorizationRequest()];
                    case 24:
                        _a.sent();
                        if (container !== null)
                            this.InitializeSectorElementDetach(elSectorContent);
                        return [4, this.Application.ComponentHandler.UnloadComponentInstancesDetached(sector)];
                    case 25:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ReplaceSectorData = function (elChildSector, data) {
        return __awaiter(this, void 0, void 0, function () {
            var content, attributes, templateUrl, template, templateUrlContent, templateContent, elSectorTemplate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (data === null) {
                            this.SetHTML(elChildSector, '');
                            return [2, (false)];
                        }
                        content = this.Application.Parser.ParseDocumentContent(data);
                        attributes = this.Application.Parser.ParseElementAttributes(content);
                        templateUrl = this.Application.Solver.Get(attributes, 'd-templateurl');
                        if (templateUrl === null) {
                            this.SetHTML(elChildSector, content);
                            return [2, (true)];
                        }
                        template = this.Application.Solver.Get(attributes, 'd-template');
                        if (template === null)
                            template = 'template';
                        return [4, this.Application.Server.GetViewHTML(templateUrl)];
                    case 1:
                        templateUrlContent = _a.sent();
                        templateContent = this.Application.Parser.ParseDocumentContent(templateUrlContent);
                        this.SetHTML(elChildSector, templateContent);
                        elSectorTemplate = this.Application.Searcher.FindByAttributeAndValueFromParent('d-template', template, elChildSector);
                        if (elSectorTemplate == null)
                            this.SetHTML(elChildSector, content);
                        else
                            this.SetHTML(elSectorTemplate, content);
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDocument.prototype.ResolveWindow = function (elWindow) {
        return __awaiter(this, void 0, void 0, function () {
            var sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sector = this.Application.Document.GetSector(elWindow);
                        this.Application.Document.StartUpdate(sector);
                        return [4, this.Application.Storage.ResolveData(false, elWindow)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.ControlFlow.ResolveControlFlowSector(elWindow, false)];
                    case 2:
                        _a.sent();
                        return [4, this.Application.ComponentHandler.ResolveComponents(elWindow)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.Storage.ResolveData(true, elWindow)];
                    case 4:
                        _a.sent();
                        return [4, this.Application.Barber.ResolveMustaches(elWindow)];
                    case 5:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ResolveComponentDynamicSector = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var elSector, isSectorGuid, sectorParent, sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        elSector = el.getAttribute('d-sector');
                        if (elSector == null)
                            return [2];
                        isSectorGuid = elSector == '@';
                        if ((!isSectorGuid) && (this.Application.Document.IsSectorReady(elSector)))
                            return [2];
                        sectorParent = this.GetSectorParent(el);
                        sector = isSectorGuid ? this.CreateGuid() : elSector;
                        if (isSectorGuid)
                            el.setAttribute('d-sector', sector);
                        return [4, this.AddSectorHierarchy(sector, sectorParent)];
                    case 1:
                        _a.sent();
                        return [4, this.AddSectorFriends(sector, el.getAttribute('d-sector-friend'))];
                    case 2:
                        _a.sent();
                        this.MarkSectorAsLoaded(sector);
                        return [4, this.Application.Storage.ResolveData(true, el)];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ResolveComponentUpdate = function (el, context) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Storage.ResolveData(false, el)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.ControlFlow.ResolveControlFlowSector(el)];
                    case 2:
                        _a.sent();
                        return [4, this.Application.ComponentHandler.ResolveComponentsElement(el, context, true, true)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.Storage.ResolveData(true, el)];
                    case 4:
                        _a.sent();
                        return [4, this.Application.Barber.ResolveMustaches(el, null, false)];
                    case 5:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.RemoveElement = function (el, checkSector) {
        if (checkSector === void 0) { checkSector = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el.parentNode)
                            el.parentNode.removeChild(el);
                        if (!checkSector) return [3, 2];
                        return [4, this.RemoveElementIteration(el)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.RemoveElementIteration = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var sector, children, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sector = el.getAttribute('d-sector');
                        if (!(sector != null)) return [3, 2];
                        return [4, this.RemoveSectorData(sector)];
                    case 1:
                        _a.sent();
                        return [3, 6];
                    case 2:
                        children = [].slice.call(el.children);
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < children.length)) return [3, 6];
                        return [4, this.RemoveElementIteration(children[i])];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3, 3];
                    case 6: return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.RemoveSectorData = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var sectors, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sectors = this.GetSectorChildren(sector);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < sectors.length)) return [3, 4];
                        return [4, this.RemoveSectorData(sectors[i])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        this.CleanSectorMetadataInternal(sector);
                        return [4, this.Application.Storage.RemoveBySector(sector)];
                    case 5:
                        _a.sent();
                        this.Application.SectorContainerHandler.RemoveBySector(sector);
                        this.Application.ComponentHandler.UnloadComponentInstances(sector);
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.LoadChildSector = function (sectorName, url, title, canRoute, canLoadDefaultSectors, container) {
        if (title === void 0) { title = null; }
        if (canRoute === void 0) { canRoute = true; }
        if (canLoadDefaultSectors === void 0) { canLoadDefaultSectors = false; }
        if (container === void 0) { container = null; }
        return __awaiter(this, void 0, void 0, function () {
            var elsSector, elSector, i, el, urlResolved, _a, html, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.IsSectorAlreadyLoaded(sectorName))
                            return [2, (false)];
                        this.MarkSectorAsLoaded(sectorName);
                        elsSector = this.Application.Searcher.FindAllByAttributeAndValue('d-sector', sectorName);
                        elSector = null;
                        for (i = elsSector.length - 1; i >= 0; i--) {
                            el = elsSector[i];
                            if (this.IsElementDetached(el))
                                continue;
                            elSector = el;
                            break;
                        }
                        if (elSector == null) {
                            this.Application.Log.WriteVerbose('Document - LoadChildSector - Missing Sector - {0}', sectorName);
                            return [2, (false)];
                        }
                        if (!((url === null) || (url === ''))) return [3, 1];
                        _a = '';
                        return [3, 3];
                    case 1: return [4, this.Application.Storage.ResolveDataUrlMustaches(null, null, url, null)];
                    case 2:
                        _a = _c.sent();
                        _c.label = 3;
                    case 3:
                        urlResolved = _a;
                        if (!((urlResolved === null) || (urlResolved === ''))) return [3, 4];
                        _b = '';
                        return [3, 6];
                    case 4: return [4, this.Application.Server.GetViewHTML(urlResolved)];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        html = _b;
                        return [4, this.LoadChildSectorInternal(url, html, sectorName, elSector, title, canRoute, canLoadDefaultSectors, container)];
                    case 7:
                        _c.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDocument.prototype.LoadChildSectorContent = function (sectorName, content) {
        return __awaiter(this, void 0, void 0, function () {
            var elSector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.IsSectorAlreadyLoaded(sectorName))
                            return [2, (false)];
                        this.MarkSectorAsLoaded(sectorName);
                        elSector = this.Application.Searcher.FindByAttributeAndValue('d-sector', sectorName);
                        if (elSector == null) {
                            this.Application.Log.WriteVerbose('Document - LoadChildSectorContent - Missing Sector - {0}', sectorName);
                            return [2, (false)];
                        }
                        return [4, this.LoadChildSectorInternal(null, content, sectorName, elSector, null, false, false, null)];
                    case 1:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDocument.prototype.LoadChildSectorDefault = function (sectorName) {
        return __awaiter(this, void 0, void 0, function () {
            var elSector, url, urlSector, urlResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        elSector = this.Application.Searcher.FindByAttributeAndValue('d-sector', sectorName);
                        if (elSector == null) {
                            this.Application.Log.WriteVerbose('Document - LoadChildSectorDefault - Missing Sector - {0}', sectorName);
                            return [2, (false)];
                        }
                        if (elSector.children.length == 0)
                            return [2, (false)];
                        url = elSector.getAttribute('d-sector-url');
                        if ((url === null))
                            url = '';
                        urlSector = this.GetSectorParent(elSector);
                        return [4, this.Application.Storage.ResolveDataUrlMustaches(null, urlSector, url, null)];
                    case 1:
                        urlResolved = _a.sent();
                        return [4, this.LoadChildSector(sectorName, urlResolved, null, false, false)];
                    case 2: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoDocument.prototype.ReplaceDocument = function (data) {
        this.Application.Log.WriteVerbose('Document - ReplaceDocument - Data - {0}', data);
        var head = this.ExtractHeadInnerHtml(data);
        if (head != null)
            this.SetHTML(document.head, head);
        var body = this.ExtractBodyInnerHtml(data);
        if (body != null)
            this.SetHTML(document.body, body);
    };
    DrapoDocument.prototype.ReplaceElement = function (el, elNew) {
        var parent = el.parentElement;
        if (parent != null)
            parent.replaceChild(elNew, el);
    };
    DrapoDocument.prototype.Show = function (el) {
        var elCurrent = el;
        if ((elCurrent.tagName === 'SPAN') && (el.children.length == 1)) {
            var elChild = el.children[0];
            if ((elChild.tagName === 'OPTION') || (elChild.tagName === 'OPTGROUP'))
                elCurrent = elChild;
        }
        this.ShowInternal(elCurrent);
        return (elCurrent);
    };
    DrapoDocument.prototype.ShowInternal = function (el) {
        var display = el.style.display;
        if (display === 'none')
            el.style.display = '';
        var style = el.getAttribute('style');
        if (style === '')
            el.removeAttribute('style');
    };
    DrapoDocument.prototype.Hide = function (el) {
        var isOption = el.tagName === 'OPTION';
        var isOptGroup = ((!isOption) && (el.tagName === 'OPTGROUP'));
        var elParent = el.parentElement;
        var hasParent = elParent != null;
        var isParentOptGroup = ((isOption) && (hasParent) && (elParent.tagName === 'OPTGROUP'));
        if (((isOption) && (!isParentOptGroup)) || (isOptGroup)) {
            var elWrap = ((hasParent) && (elParent.tagName === 'SPAN')) ? elParent : this.Wrap(el, 'SPAN');
            this.HideInternal(elWrap);
            return (elWrap);
        }
        else {
            this.HideInternal(el);
            return (el);
        }
    };
    DrapoDocument.prototype.HideInternal = function (el) {
        el.style.display = 'none';
    };
    DrapoDocument.prototype.GetWrapper = function (el) {
        if (el.tagName !== 'span')
            return (null);
        if (el.children.length !== 1)
            return (null);
        return el.children[0];
    };
    DrapoDocument.prototype.Wrap = function (el, tagName) {
        var wrapper = document.createElement(tagName);
        el.parentNode.insertBefore(wrapper, el);
        wrapper.appendChild(el);
        return (wrapper);
    };
    DrapoDocument.prototype.GetElementAttributes = function (el) {
        var attributes = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            attributes.push([attribute.nodeName, attribute.nodeValue]);
        }
        return (attributes);
    };
    DrapoDocument.prototype.GetElementAttributesFilteredPrefix = function (el, prefix) {
        if ((prefix === null) || (prefix === ''))
            return (this.GetElementAttributes(el));
        var attributes = [];
        var length = prefix.length;
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var name_1 = attribute.nodeName;
            if (name_1.length < length)
                continue;
            if (name_1.substring(0, length) !== prefix)
                continue;
            attributes.push([name_1.substring(length), attribute.nodeValue]);
        }
        return (attributes);
    };
    DrapoDocument.prototype.SetElementAttributes = function (el, attributes) {
        for (var i = 0; i < attributes.length; i++) {
            var attribute = attributes[i];
            el.setAttribute(attribute[0], attribute[1]);
        }
    };
    DrapoDocument.prototype.ExtractHeadInnerHtml = function (data) {
        var index = data.indexOf('<head>');
        if (index < 0)
            return (null);
        var indexEnd = data.indexOf('</head>');
        var head = data.substr(index + 6, indexEnd - (index + 6));
        var headWithoutFramework = this.RemoveFramework(head);
        return (headWithoutFramework);
    };
    DrapoDocument.prototype.RemoveFramework = function (data) {
        var indexScript = 0;
        while ((indexScript = data.indexOf('<script', indexScript)) >= 0) {
            var indexScriptEnd = data.indexOf('</script>', indexScript);
            if (indexScriptEnd > indexScript) {
                var script = data.substring(indexScript, indexScriptEnd + 9);
                if (script.indexOf('drapo.js') >= 0)
                    return (data.replace(script, ''));
            }
            indexScript = indexScriptEnd;
        }
        return (data);
    };
    DrapoDocument.prototype.ExtractBodyInnerHtml = function (data) {
        var index = data.indexOf('<body>');
        if (index >= 0) {
            var indexEnd = data.indexOf('</body>');
            return (data.substr(index + 6, indexEnd - (index + 6)));
        }
        index = data.indexOf('<div');
        if (index >= 0) {
            return (data.substr(index));
        }
        return (null);
    };
    DrapoDocument.prototype.IsElementInserted = function (list, itemInsert) {
        for (var i = 0; i < list.length; i++) {
            if (list[i] == itemInsert)
                return (false);
        }
        list.push(itemInsert);
        return (true);
    };
    DrapoDocument.prototype.IsElementAttached = function (el) {
        var elc = el;
        while (elc != null) {
            if (elc.tagName === 'BODY')
                return (true);
            elc = elc.parentElement;
        }
        return (false);
    };
    DrapoDocument.prototype.IsElementInsideControlFlow = function (el) {
        if (el.getAttribute == null)
            return (false);
        if (el.tagName === 'BODY')
            return (false);
        var dfor = el.getAttribute('d-for');
        if (dfor != null)
            return (true);
        var elParent = el.parentElement;
        if (elParent == null)
            return (true);
        return (this.IsElementInsideControlFlow(elParent));
    };
    DrapoDocument.prototype.IsElementInsideControlFlowOrContext = function (el) {
        if (el.getAttribute == null)
            return (false);
        if (el.tagName === 'BODY')
            return (false);
        var dfor = el.getAttribute('d-for');
        if (dfor != null)
            return (true);
        var elPrevious = el.previousElementSibling;
        if (elPrevious != null)
            return (this.IsElementInsideControlFlowOrContext(elPrevious));
        var elParent = el.parentElement;
        if (elParent == null)
            return (true);
        return (this.IsElementInsideControlFlowOrContext(elParent));
    };
    DrapoDocument.prototype.IsElementPreprocessed = function (el) {
        if (el.getAttribute == null)
            return (false);
        var pre = el.getAttribute('d-pre');
        if (pre === 'true')
            return (true);
        var elParent = el.parentElement;
        if (elParent == null)
            return (false);
        return (this.IsElementPreprocessed(elParent));
    };
    DrapoDocument.prototype.RequestAuthorization = function (dataKey, type) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Observer.SubscribeAuthorization(dataKey, type);
                        return [4, this.TryOnAuthorizationRequest()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.TryOnAuthorizationRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pendingAuthorizations;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pendingAuthorizations = this.Application.Observer.GetPendingAuthorization();
                        if (this._pendingAuthorizations === pendingAuthorizations)
                            return [2, (false)];
                        this._pendingAuthorizations = pendingAuthorizations;
                        return [4, this.OnAuthorizationRequest()];
                    case 1:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoDocument.prototype.OnAuthorizationRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var onAuthorizationRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetOnAuthorizationRequest()];
                    case 1:
                        onAuthorizationRequest = _a.sent();
                        if ((onAuthorizationRequest === null) || (onAuthorizationRequest === ''))
                            return [2];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, onAuthorizationRequest)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.IsSectorAlreadyLoaded = function (sector) {
        for (var i = 0; i < this._sectorsLoaded.length; i++)
            if (this._sectorsLoaded[i] === sector)
                return (true);
        return (false);
    };
    DrapoDocument.prototype.MarkSectorAsLoaded = function (sector) {
        this._sectorsLoaded.push(sector);
    };
    DrapoDocument.prototype.InitializeSectorsLoaded = function () {
        this._sectorsLoaded = [];
    };
    DrapoDocument.prototype.GetSectorParent = function (el) {
        return (this.GetSector(el.parentElement));
    };
    DrapoDocument.prototype.GetSector = function (el) {
        if (el == null)
            return (null);
        var sector = el.getAttribute('d-sector');
        if (sector != null)
            return (sector);
        return (this.GetSector(el.parentElement));
    };
    DrapoDocument.prototype.GetSectorElement = function (sector) {
        return (this.Application.Searcher.FindByAttributeAndValue('d-sector', sector));
    };
    DrapoDocument.prototype.GetSectorElementInner = function (sector) {
        var elSector = this.GetSectorElement(sector);
        if ((elSector == null) || (elSector.children.length == 0))
            return (null);
        for (var i = elSector.children.length - 1; i >= 0; i--) {
            var elSectorChild = elSector.children[i];
            var detach = elSectorChild.getAttribute('d-detach');
            if ((detach === null) || (detach === '') || (detach === 'active'))
                return (elSectorChild);
        }
        return (null);
    };
    DrapoDocument.prototype.SetSectorElementInner = function (sector, el, canDetach) {
        var elSector = this.GetSectorElement(sector);
        if (elSector == null)
            return (null);
        for (var i = elSector.children.length - 1; i >= 0; i--) {
            var elSectorChild = elSector.children[i];
            var detach = elSectorChild.getAttribute('d-detach');
            if (detach == null) {
                elSector.removeChild(elSectorChild);
            }
            else {
                if (detach === 'active') {
                    var elSectorChildDisplay = elSectorChild.style.display;
                    var detachValue = ((elSectorChildDisplay != null) && (elSectorChildDisplay != '')) ? elSectorChildDisplay : 'empty';
                    elSectorChild.style.display = 'none';
                    elSectorChild.setAttribute('d-detach', detachValue);
                }
            }
        }
        if (el === null)
            return;
        if (canDetach) {
            elSector.appendChild(el);
        }
        else {
            if (el.parentElement == null) {
                el.setAttribute('d-detach', 'active');
                elSector.appendChild(el);
            }
            else {
                var detach = el.getAttribute('d-detach');
                el.style.display = detach != 'empty' ? detach : '';
                el.setAttribute('d-detach', 'active');
            }
        }
    };
    DrapoDocument.prototype.CreateHTMLElement = function (html, onlyLast) {
        if (onlyLast === void 0) { onlyLast = false; }
        if (html == null)
            return (null);
        var elContainer = document.createElement('div');
        elContainer.innerHTML = this.EnsureHTML(html);
        if (onlyLast)
            return elContainer.children[elContainer.children.length - 1];
        return elContainer.children[0];
    };
    DrapoDocument.prototype.InitializeSectorElementDetach = function (el) {
        if (this.CanDetachElement(el))
            return;
        el.setAttribute('d-detach', 'active');
    };
    DrapoDocument.prototype.CanDetachElement = function (el) {
        if (this.HasElementIframe(el))
            return (false);
        if (this.HasElementCantDetach(el))
            return (false);
        return (true);
    };
    DrapoDocument.prototype.IsElementDetached = function (el) {
        if (el.tagName === 'BODY')
            return (false);
        var detach = el.getAttribute('d-detach');
        if ((detach !== null) && (detach !== '') && (detach != 'active'))
            return (true);
        if (el.parentElement == null)
            return (true);
        return (this.IsElementDetached(el.parentElement));
    };
    DrapoDocument.prototype.IsElementAlive = function (el) {
        if (el === null)
            return (false);
        if (el.tagName === 'BODY')
            return (true);
        if (this.Application.SectorContainerHandler.IsElementContainerized(el))
            return (true);
        return (this.IsElementAlive(el.parentElement));
    };
    DrapoDocument.prototype.IsElementInsideComponent = function (el) {
        if (el === null)
            return (false);
        if (el.tagName === 'BODY')
            return (false);
        if (this.Application.ComponentHandler.IsComponent(el.tagName.toLowerCase()))
            return (true);
        return (this.IsElementInsideComponent(el.parentElement));
    };
    DrapoDocument.prototype.HasElementIframe = function (el) {
        if (el == null)
            return (false);
        if (el.tagName.toLowerCase() === 'iframe')
            return (true);
        var children = [].slice.call(el.children);
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            var hasChildIframe = this.HasElementIframe(child);
            if (hasChildIframe)
                return (true);
        }
        return (false);
    };
    DrapoDocument.prototype.HasElementCantDetach = function (el) {
        if (el == null)
            return (false);
        var detachable = el.getAttribute('d-detachable');
        if (detachable === 'false')
            return (true);
        var children = [].slice.call(el.children);
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            var hasElementCantDetach = this.HasElementCantDetach(child);
            if (hasElementCantDetach)
                return (true);
        }
        return (false);
    };
    DrapoDocument.prototype.GetSectorImpersonate = function (el) {
        if (el == null)
            return (null);
        var sector = el.getAttribute('d-sector');
        if (sector != null)
            return (null);
        var sectorImpersonate = el.getAttribute('d-sector-impersonate');
        if (sectorImpersonate != null)
            return (sectorImpersonate);
        return (this.GetSectorImpersonate(el.parentElement));
    };
    DrapoDocument.prototype.IsSectorDynamic = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetSectorImpersonate(el)];
                    case 1:
                        sector = _a.sent();
                        return [2, (this.Application.Parser.IsMustache(sector))];
                }
            });
        });
    };
    DrapoDocument.prototype.GetSectorResolved = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            var sector, sectorImpersonate, sectorResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sector = this.GetSector(el);
                        sectorImpersonate = this.GetSectorImpersonate(el);
                        if (sectorImpersonate == null)
                            return [2, (sector)];
                        return [4, this.Application.Storage.ResolveDataUrlMustaches(null, sector, sectorImpersonate, null)];
                    case 1:
                        sectorResolved = _a.sent();
                        return [2, (sectorResolved)];
                }
            });
        });
    };
    DrapoDocument.prototype.Clone = function (el) {
        if (el == null)
            return (null);
        return el.cloneNode(true);
    };
    DrapoDocument.prototype.Select = function (el) {
        var eli = el;
        if (eli.select != null)
            eli.select();
    };
    DrapoDocument.prototype.GetValue = function (el) {
        var eli = el;
        if (eli.value)
            return (eli.value);
        return ('');
    };
    DrapoDocument.prototype.SetValue = function (el, value) {
        var eli = el;
        if (eli.value)
            eli.value = value;
    };
    DrapoDocument.prototype.GetText = function (el) {
        if (el.children.length > 0)
            return ('');
        var eli = el;
        if (eli.textContent)
            return (eli.textContent);
        return (eli.innerText);
    };
    DrapoDocument.prototype.SetText = function (el, value) {
        if (el.children.length > 0)
            return;
        var eli = el;
        if (eli.textContent)
            eli.textContent = value;
        else
            eli.innerText = value;
    };
    DrapoDocument.prototype.GetHTML = function (el) {
        return (el.innerHTML);
    };
    DrapoDocument.prototype.GetHTMLEncoded = function (html) {
        var div = document.createElement('div');
        var text = document.createTextNode(html);
        div.appendChild(text);
        var contentEncoded = div.innerHTML;
        return (contentEncoded);
    };
    DrapoDocument.prototype.EnsureHTML = function (value) {
        var valueHTML = value.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, "<$1></$2>");
        return (valueHTML);
    };
    DrapoDocument.prototype.SetHTML = function (el, value) {
        var valueHTML = this.EnsureHTML(value);
        el.innerHTML = valueHTML;
    };
    DrapoDocument.prototype.GetProperty = function (el, propertyName) {
        var elAny = el;
        return (elAny[propertyName]);
    };
    DrapoDocument.prototype.CreateGuid = function (isShort) {
        if (isShort === void 0) { isShort = true; }
        if (isShort)
            return (this.CreateGuidShort());
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    DrapoDocument.prototype.CreateGuidShort = function () {
        var guid = this.CreateGuidShortInternal();
        while (guid === this._lastGuid)
            guid = this.CreateGuidShortInternal();
        this._lastGuid = guid;
        return (guid);
    };
    DrapoDocument.prototype.CreateGuidShortInternal = function () {
        var date = new Date();
        var hexa = date.getTime().toString(16);
        if (hexa.length <= 8)
            return (hexa);
        return (hexa.substr(hexa.length - 8));
    };
    DrapoDocument.prototype.EnsureElementHasID = function (el) {
        var id = el.getAttribute('d-id');
        if (id != null)
            return (id);
        id = this.CreateGuid();
        el.setAttribute('d-id', id);
        return (id);
    };
    DrapoDocument.prototype.ApplyNodeDifferences = function (parent, nodeOld, nodeNew, isHTML) {
        if (!nodeOld) {
            parent.appendChild(nodeNew);
        }
        else if (!nodeNew) {
            parent.removeChild(nodeOld);
        }
        else if (this.IsNodeDifferentType(nodeOld, nodeNew)) {
            parent.replaceChild(nodeNew, nodeOld);
        }
        else {
            if ((isHTML) && (nodeOld.outerHTML == nodeNew.outerHTML))
                return;
            this.ApplyNodeEventsDifferences(nodeOld, nodeNew);
            this.ApplyNodeSpecialDifferences(nodeOld, nodeNew);
            this.ApplyNodeAttributesDifferences(nodeOld, nodeNew);
            var childrenOld = nodeOld != null ? [].slice.call(nodeOld.children) : [];
            var childrenNew = nodeNew != null ? [].slice.call(nodeNew.children) : [];
            var lengthOld = childrenOld.length;
            var lengthNew = childrenNew.length;
            if ((lengthOld === 0) && (lengthNew === 0)) {
                if (nodeOld.textContent !== nodeNew.textContent)
                    nodeOld.textContent = nodeNew.textContent;
            }
            else {
                for (var i = 0; i < lengthNew || i < lengthOld; i++) {
                    this.ApplyNodeDifferences(nodeOld, childrenOld[i], childrenNew[i], isHTML);
                }
            }
        }
    };
    DrapoDocument.prototype.ApplyNodeDifferencesRenderClass = function (nodeOld, nodeNew) {
        var className = nodeNew.className;
        if (nodeOld.className !== className)
            nodeOld.className = className;
    };
    DrapoDocument.prototype.IsNodeDifferentType = function (nodeOld, nodeNew) {
        if ((typeof nodeOld) !== (typeof nodeNew))
            return (true);
        if ((nodeOld.nodeType) !== (nodeNew.nodeType))
            return (true);
        if ((nodeOld.tagName) !== (nodeNew.tagName))
            return (true);
        return (false);
    };
    DrapoDocument.prototype.ApplyNodeEventsDifferences = function (nodeOld, nodeNew) {
        this.Application.EventHandler.SyncNodeEventsDifferences(nodeOld, nodeNew);
    };
    DrapoDocument.prototype.ApplyNodeSpecialDifferences = function (nodeOld, nodeNew) {
        var tag = nodeOld.tagName.toLowerCase();
        if (tag === "input")
            this.ApplyNodeSpecialDifferencesInput(nodeOld, nodeNew);
        else if (tag === "select")
            this.ApplyNodeSpecialDifferencesSelect(nodeOld, nodeNew);
        else if (tag === "textarea")
            this.ApplyNodeSpecialDifferencesTextarea(nodeOld, nodeNew);
    };
    DrapoDocument.prototype.ApplyNodeSpecialDifferencesInput = function (nodeOld, nodeNew) {
        var type = nodeOld.type;
        if (((type == 'checkbox')) && (nodeOld.checked !== nodeNew.checked))
            nodeOld.checked = nodeNew.checked;
        if (((type == 'text') || (type == 'password')) && (nodeOld.value !== nodeNew.value))
            nodeOld.value = nodeNew.value;
    };
    DrapoDocument.prototype.ApplyNodeSpecialDifferencesSelect = function (nodeOld, nodeNew) {
        if (nodeOld.value !== nodeNew.value)
            nodeOld.value = nodeNew.value;
    };
    DrapoDocument.prototype.ApplyNodeSpecialDifferencesTextarea = function (nodeOld, nodeNew) {
        if (nodeOld.value !== nodeNew.value)
            nodeOld.value = nodeNew.value;
    };
    DrapoDocument.prototype.ApplyNodeAttributesDifferences = function (nodeOld, nodeNew) {
        var attributesOld = this.ExtactNodeAttributes(nodeOld);
        var attributesNew = this.ExtactNodeAttributes(nodeNew);
        for (var i = 0; i < attributesNew.length; i++) {
            var attribute = attributesNew[i];
            var name_2 = attribute[0];
            var valueNew = attribute[1];
            var valueOld = this.ExtractNodeAttributeValue(attributesOld, name_2);
            if (valueNew === valueOld)
                continue;
            if ((name_2 === 'class') && (this.Application.Validator.IsValidatorInterface(nodeOld)))
                continue;
            nodeOld.setAttribute(name_2, valueNew);
        }
        for (var i = 0; i < attributesOld.length; i++) {
            var attribute = attributesOld[i];
            var name_3 = attribute[0];
            var valueNew = this.ExtractNodeAttributeValue(attributesNew, name_3);
            if (valueNew !== null)
                continue;
            nodeOld.removeAttribute(name_3);
        }
    };
    DrapoDocument.prototype.ExtactNodeAttributes = function (node) {
        var attributes = [];
        var nodeAttributes = node.attributes;
        var length = nodeAttributes.length;
        for (var i = 0; i < length; i++) {
            var nodeAttribute = nodeAttributes[i];
            attributes.push([nodeAttribute.name, nodeAttribute.value]);
        }
        return (attributes);
    };
    DrapoDocument.prototype.ExtractNodeAttributeValue = function (attributes, name) {
        for (var i = attributes.length - 1; i >= 0; i--)
            if (attributes[i][0] === name)
                return (attributes[i][1]);
        return (null);
    };
    DrapoDocument.prototype.Contains = function (element) {
        return (document.documentElement.contains(element));
    };
    DrapoDocument.prototype.ExtractQueryString = function (canUseRouter) {
        var url = canUseRouter ? document.location.href : this.Application.Router.GetLastRouteUrl();
        if (url == null)
            url = document.location.href;
        return (this.Application.Parser.ParseQueryString(url));
    };
    DrapoDocument.prototype.Sleep = function (timeout) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve) { return setTimeout(resolve, timeout); })];
            });
        });
    };
    DrapoDocument.prototype.WaitForMessage = function (retry, interval) {
        if (retry === void 0) { retry = 1000; }
        if (interval === void 0) { interval = 50; }
        return __awaiter(this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < retry)) return [3, 4];
                        if (this.Message != null)
                            return [2, (this.Message)];
                        return [4, this.Application.Document.Sleep(interval)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2, (null)];
                }
            });
        });
    };
    DrapoDocument.prototype.AddSectorHierarchy = function (sector, sectorParent) {
        return __awaiter(this, void 0, void 0, function () {
            var i, sectorHierarchyCurrent, sectorHierarchy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this._sectorHierarchy.length)) return [3, 4];
                        sectorHierarchyCurrent = this._sectorHierarchy[i];
                        if (sectorHierarchyCurrent[0] !== sector)
                            return [3, 3];
                        sectorHierarchyCurrent[1] = sectorParent;
                        return [4, this.Application.Debugger.NotifySectors()];
                    case 2:
                        _a.sent();
                        return [2];
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        sectorHierarchy = [sector, sectorParent];
                        this._sectorHierarchy.push(sectorHierarchy);
                        return [4, this.Application.Debugger.NotifySectors()];
                    case 5:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.GetSectorAndChildren = function (sector) {
        var sectors = [];
        sectors.push(sector);
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchy = this._sectorHierarchy[i];
            if (sectorHierarchy[1] !== sector)
                continue;
            var sectorChild = sectorHierarchy[0];
            sectors.push(sectorChild);
            var sectorChildren = this.GetSectorHierarchyChildren(sectorChild);
            for (var j = 0; j < sectorChildren.length; j++)
                sectors.push(sectorChildren[j]);
        }
        return (sectors);
    };
    DrapoDocument.prototype.GetSectorChildren = function (sector) {
        var sectors = [];
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchy = this._sectorHierarchy[i];
            if (sectorHierarchy[1] !== sector)
                continue;
            var sectorChild = sectorHierarchy[0];
            sectors.push(sectorChild);
        }
        return (sectors);
    };
    DrapoDocument.prototype.GetSectorHierarchyChildren = function (sector) {
        var sectors = [];
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchy = this._sectorHierarchy[i];
            if (sectorHierarchy[1] !== sector)
                continue;
            var sectorChild = sectorHierarchy[0];
            sectors.push(sectorChild);
            var sectorChildren = this.GetSectorHierarchyChildren(sectorChild);
            for (var j = 0; j < sectorChildren.length; j++)
                sectors.push(sectorChildren[j]);
        }
        return (sectors);
    };
    DrapoDocument.prototype.IsSectorReady = function (sector) {
        if (sector == null)
            return (true);
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchy = this._sectorHierarchy[i];
            if (sectorHierarchy[0] === sector)
                return (true);
        }
        return (false);
    };
    DrapoDocument.prototype.GetSectorHierarchyParents = function (sector) {
        var sectors = [sector];
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchy = this._sectorHierarchy[i];
            if (sectorHierarchy[0] !== sector)
                continue;
            var sectorParent = sectorHierarchy[1];
            if (sectorParent == null)
                continue;
            var sectorParents = this.GetSectorHierarchyParents(sectorParent);
            for (var j = 0; j < sectorParents.length; j++)
                sectors.push(sectorParents[j]);
        }
        return (sectors);
    };
    DrapoDocument.prototype.AppendSectorHierarchyBySector = function (sectorHierarchy, sector) {
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchyCurrent = this._sectorHierarchy[i];
            if (sectorHierarchyCurrent[0] !== sector)
                continue;
            sectorHierarchy.push([sector, sectorHierarchyCurrent[1]]);
            break;
        }
    };
    DrapoDocument.prototype.AddSectorHierarchys = function (sectorHierarchys) {
        for (var i = 0; i < sectorHierarchys.length; i++)
            this._sectorHierarchy.push(sectorHierarchys[i]);
    };
    DrapoDocument.prototype.AppendSectorFriendsBySector = function (sectorFriends, sector) {
        for (var i = 0; i < this._sectorFriends.length; i++) {
            var sectorFriend = this._sectorFriends[i];
            if (sectorFriend[0] !== sector)
                continue;
            sectorFriends.push([sector, this.Application.Solver.CloneArrayString(sectorFriend[1])]);
            break;
        }
    };
    DrapoDocument.prototype.AddSectorFriendsRange = function (sectorFriends) {
        for (var i = 0; i < sectorFriends.length; i++)
            this._sectorFriends.push(sectorFriends[i]);
    };
    DrapoDocument.prototype.IsSystemKey = function (key) {
        return ((key.length > 2) && (key[0] == '_') && (key[1] == '_'));
    };
    DrapoDocument.prototype.IsHiddenKey = function (key) {
        return ((key.length > 1) && (key[0] == '_'));
    };
    DrapoDocument.prototype.GetSectors = function () {
        var sectors = [];
        sectors.push('');
        for (var i = 0; i < this._sectorHierarchy.length; i++) {
            var sectorHierarchy = this._sectorHierarchy[i];
            var sector = sectorHierarchy[0];
            if (this.IsSystemKey(sector))
                continue;
            sectors.push(sector);
        }
        return (sectors);
    };
    DrapoDocument.prototype.IsEqualSector = function (sector1, sector2) {
        var sector1Root = this.IsSectorRoot(sector1);
        var sector2Root = this.IsSectorRoot(sector2);
        if ((sector1Root) && (sector2Root))
            return (true);
        if ((sector1Root) || (sector2Root))
            return (false);
        return (sector1 === sector2);
    };
    DrapoDocument.prototype.IsSectorRoot = function (sector) {
        return ((sector === null) || (sector === ''));
    };
    DrapoDocument.prototype.CleanSectorMetadata = function (sector) {
        if (sector == null)
            return;
        var sectorChildren = this.GetSectorAndChildren(sector);
        for (var i = 0; i < sectorChildren.length; i++)
            this.CleanSectorMetadataInternal(sectorChildren[i]);
    };
    DrapoDocument.prototype.CleanSectorMetadataInternal = function (sector) {
        for (var i = this._sectorFriends.length - 1; i >= 0; i--) {
            var sectorFriends = this._sectorFriends[i];
            if (sectorFriends[0] !== sector)
                continue;
            this._sectorFriends.splice(i, 1);
            break;
        }
        for (var i = this._sectorHierarchy.length - 1; i >= 0; i--) {
            var sectorHierarchy = this._sectorHierarchy[i];
            if (sectorHierarchy[0] !== sector)
                continue;
            this._sectorHierarchy.splice(i, 1);
        }
    };
    DrapoDocument.prototype.GetSectorsAllowed = function (sector) {
        if (sector == null)
            return (null);
        var sectors = this.GetSectorHierarchyParents(sector);
        for (var i = 0; i < sectors.length; i++) {
            var sectorCurrent = sectors[i];
            var sectorCurrentFriends = this.GetSectorFriends(sectorCurrent);
            if (sectorCurrentFriends == null)
                continue;
            for (var j = 0; j < sectorCurrentFriends.length; j++) {
                var sectorCurrentFriend = sectorCurrentFriends[j];
                if (this.Application.Solver.Contains(sectors, sectorCurrentFriend))
                    continue;
                sectors.push(sectorCurrentFriend);
                var sectorCurrentFriendChildren = this.GetSectorHierarchyChildren(sectorCurrentFriend);
                for (var k = 0; k < sectorCurrentFriendChildren.length; k++) {
                    var sectorCurrentFriendChild = sectorCurrentFriendChildren[k];
                    if (this.Application.Solver.Contains(sectors, sectorCurrentFriendChild))
                        continue;
                    sectors.push(sectorCurrentFriendChild);
                }
            }
        }
        return (sectors);
    };
    DrapoDocument.prototype.IsSectorAllowed = function (sector, sectors) {
        if (sector == null)
            return (true);
        if (sectors == null)
            return (true);
        for (var i = 0; i < sectors.length; i++)
            if (sectors[i] == sector)
                return (true);
        return (false);
    };
    DrapoDocument.prototype.AddSectorFriends = function (sector, sectorFriendsText) {
        return __awaiter(this, void 0, void 0, function () {
            var friends, i, sectorFriend, i, sectorFriendsCurrent, sectorFriends;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (sectorFriendsText == null)
                            return [2];
                        friends = this.Application.Parser.ParseTags(sectorFriendsText);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < friends.length)) return [3, 4];
                        if (!this.Application.Parser.IsMustache(friends[i])) return [3, 3];
                        return [4, this.Application.Storage.RetrieveDataValue(sector, friends[i])];
                    case 2:
                        sectorFriend = _a.sent();
                        friends.splice(i, 1);
                        friends.push(sectorFriend);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        for (i = 0; i < this._sectorFriends.length; i++) {
                            sectorFriendsCurrent = this._sectorFriends[i];
                            if (sectorFriendsCurrent[0] !== sector)
                                continue;
                            sectorFriendsCurrent[1] = friends;
                            return [2];
                        }
                        sectorFriends = [sector, friends];
                        this._sectorFriends.push(sectorFriends);
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.GetSectorFriends = function (sector) {
        for (var i = 0; i < this._sectorFriends.length; i++) {
            var sectorFriends = this._sectorFriends[i];
            if (sectorFriends[0] === sector)
                return (sectorFriends[1]);
        }
        return (null);
    };
    DrapoDocument.prototype.CollectSector = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var i, sectorHierarchy, sectorCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._sectorHierarchy.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 5];
                        sectorHierarchy = this._sectorHierarchy[i];
                        if (sectorHierarchy[1] !== sector)
                            return [3, 4];
                        sectorCurrent = sectorHierarchy[0];
                        return [4, this.CollectSector(sectorCurrent)];
                    case 2:
                        _a.sent();
                        if (this.Application.Searcher.FindByAttributeAndValue('d-sector', sectorCurrent) !== null)
                            return [3, 4];
                        return [4, this.Application.SectorContainerHandler.UnloadSector(sectorCurrent)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i--;
                        return [3, 1];
                    case 5: return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.IsFirstChild = function (el) {
        return (this.GetIndex(el) === 0);
    };
    DrapoDocument.prototype.IsLastChild = function (el) {
        return (this.GetNextAll(el).length === 0);
    };
    DrapoDocument.prototype.GetIndex = function (el) {
        var elParent = el.parentElement;
        if (elParent == null)
            return (-1);
        for (var i = 0; i < elParent.children.length; i++)
            if (el === elParent.children[i])
                return (i);
        return (-1);
    };
    DrapoDocument.prototype.GetNextAll = function (el) {
        var elParent = el.parentElement;
        if (elParent == null)
            return ([]);
        var els = [];
        var found = false;
        for (var i = 0; i < elParent.children.length; i++) {
            var elChild = elParent.children[i];
            if (el === elChild)
                found = true;
            else if (found)
                els.push(elChild);
        }
        return (els);
    };
    DrapoDocument.prototype.ReceiveMessage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(message.Action === 'execute')) return [3, 2];
                        return [4, this.ExecuteMessage(message)];
                    case 1:
                        _a.sent();
                        return [3, 5];
                    case 2:
                        if (!(message.Action === 'update')) return [3, 4];
                        return [4, this.UpdateMessage(message)];
                    case 3:
                        _a.sent();
                        return [3, 5];
                    case 4:
                        this.Message = message;
                        _a.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.ExecuteMessage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var storageItem, valueFunction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.Application.IsLoaded) return [3, 2];
                        return [4, this.Sleep(50)];
                    case 1:
                        _a.sent();
                        return [3, 0];
                    case 2: return [4, this.Application.Storage.RetrieveDataItem(message.DataKey, message.Sector)];
                    case 3:
                        storageItem = _a.sent();
                        if (storageItem === null)
                            return [2];
                        if (!storageItem.IsTypeValue)
                            return [2];
                        valueFunction = storageItem.Data;
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(message.Sector, null, valueFunction)];
                    case 4:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.UpdateMessage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Storage.UpdateData(message.DataKey, message.Sector, message.Data)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.GetClipboard = function () {
        return __awaiter(this, void 0, void 0, function () {
            var value, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4, this.GetClipboardValueAsync()];
                    case 1:
                        value = _b.sent();
                        if (value !== null)
                            return [2, (value)];
                        return [2, (this.GetClipboardValueExecCommand())];
                    case 2:
                        _a = _b.sent();
                        return [2, ('')];
                    case 3: return [2];
                }
            });
        });
    };
    DrapoDocument.prototype.GetClipboardValueAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var clipboard, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clipboard = navigator.clipboard;
                        if (clipboard == null)
                            return [2, (null)];
                        if (!clipboard.readText)
                            return [2, (null)];
                        return [4, clipboard.readText()];
                    case 1:
                        value = _a.sent();
                        return [2, (value)];
                }
            });
        });
    };
    DrapoDocument.prototype.GetClipboardValueExecCommand = function () {
        return __awaiter(this, void 0, void 0, function () {
            var el, value;
            return __generator(this, function (_a) {
                el = document.createElement('textarea');
                document.body.appendChild(el);
                el.select();
                document.execCommand('paste');
                value = el.value;
                document.body.removeChild(el);
                return [2, (value)];
            });
        });
    };
    DrapoDocument.prototype.SetClipboard = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.SetClipboardEvent(value)];
                    case 1:
                        if (_a.sent())
                            return [2, (true)];
                        return [4, this.SetClipboardTextArea(value)];
                    case 2: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoDocument.prototype.SetClipboardEvent = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var result, listener;
            return __generator(this, function (_a) {
                result = false;
                listener = function (ev) {
                    if (!ev.clipboardData)
                        return (false);
                    ev.preventDefault();
                    ev.clipboardData.setData('text/plain', value);
                    result = true;
                    return (true);
                };
                try {
                    document.addEventListener('copy', listener);
                    document.execCommand('copy');
                }
                catch (_b) {
                    return [2, (false)];
                }
                finally {
                    document.removeEventListener('copy', listener);
                }
                return [2, (result)];
            });
        });
    };
    DrapoDocument.prototype.SetClipboardTextArea = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var el, result;
            return __generator(this, function (_a) {
                el = document.createElement('textarea');
                el.setAttribute('style', 'width:1px;height:0px;border:0;opacity:0;');
                el.value = value;
                document.body.appendChild(el);
                el.select();
                result = document.execCommand('copy');
                document.body.removeChild(el);
                return [2, (result)];
            });
        });
    };
    DrapoDocument.prototype.StartUnitTest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var elUnitTest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        elUnitTest = this.Application.Searcher.FindByAttributeAndValue('d-id', '__drapoUnitTest');
                        if ((elUnitTest == null))
                            return [2];
                        return [4, this.Application.EventHandler.TriggerClick(elUnitTest)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    return DrapoDocument;
}());

"use strict";
var DrapoDrag = (function () {
    function DrapoDrag() {
        this._action = 'move';
        this._tags = [];
    }
    Object.defineProperty(DrapoDrag.prototype, "Code", {
        get: function () {
            return (this._code);
        },
        set: function (value) {
            this._code = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "Action", {
        get: function () {
            return (this._action);
        },
        set: function (value) {
            this._action = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "Item", {
        get: function () {
            return (this._contextItem);
        },
        set: function (value) {
            this._contextItem = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "Tags", {
        get: function () {
            return (this._tags);
        },
        set: function (value) {
            this._tags = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "Notify", {
        get: function () {
            return (this._notify);
        },
        set: function (value) {
            this._notify = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "OnBefore", {
        get: function () {
            return (this._onBefore);
        },
        set: function (value) {
            this._onBefore = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "OnAfter", {
        get: function () {
            return (this._onAfter);
        },
        set: function (value) {
            this._onAfter = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "DataKey", {
        get: function () {
            return (this._dataKey);
        },
        set: function (value) {
            this._dataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoDrag.prototype, "Custom", {
        get: function () {
            return (this._custom);
        },
        set: function (value) {
            this._custom = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoDrag.prototype.IsMatch = function (tags) {
        for (var i = 0; i < tags.length; i++) {
            var tag = tags[i];
            for (var j = 0; j < this._tags.length; j++) {
                if (this._tags[j] === tag)
                    return (true);
            }
        }
        return (false);
    };
    return DrapoDrag;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoEventHandler = (function () {
    function DrapoEventHandler(application) {
        this._debounceDefault = 500;
        this._debounceDefaultClick = 200;
        this._debounce = 'debounce';
        this._detach = 'detach';
        this._eventsRunning = [];
        this._application = application;
    }
    Object.defineProperty(DrapoEventHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoEventHandler.prototype.HasContentEventContext = function (content) {
        return (content.indexOf('d-on-') > -1);
    };
    DrapoEventHandler.prototype.CreateEventNamespace = function (el, location, eventType, namespace) {
        if (namespace === void 0) { namespace = 'default'; }
        if (eventType === 'load')
            return (eventType);
        if (location === null)
            return (eventType + '.' + namespace);
        var did = this.Application.Document.EnsureElementHasID(el);
        return (eventType + '.' + did);
    };
    DrapoEventHandler.prototype.GetEventPropagation = function (el, eventType) {
        var propagationValue = el.getAttribute('d-propagation-' + eventType);
        if (propagationValue == null)
            return (true);
        return (this.Application.Solver.ResolveConditionalBoolean(propagationValue));
    };
    DrapoEventHandler.prototype.RetrieveEventBinder = function (element, location) {
        if (location == null)
            return (element);
        if (this.IsLocationBody(location))
            return (document.documentElement);
        return (null);
    };
    DrapoEventHandler.prototype.IsLocationBody = function (location) {
        return (location === 'body');
    };
    DrapoEventHandler.prototype.GetElementParent = function (element, levels) {
        if (levels === void 0) { levels = 0; }
        var current = element;
        for (var i = 0; (i < levels) && (current != null); i++)
            current = current.parentElement;
        if (current == null)
            return (null);
        if (current.tagName.toLowerCase() === 'body')
            return (document.body);
        return (current);
    };
    DrapoEventHandler.prototype.Attach = function (el, renderContext) {
        return __awaiter(this, void 0, void 0, function () {
            var events, application, sector, isSectorDynamic, _loop_1, this_1, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        events = this.RetrieveElementEvents(el);
                        if (events.length == 0)
                            return [2];
                        application = this.Application;
                        return [4, this.Application.Document.GetSectorResolved(el)];
                    case 1:
                        sector = _a.sent();
                        return [4, this.Application.Document.IsSectorDynamic(el)];
                    case 2:
                        isSectorDynamic = _a.sent();
                        _loop_1 = function (i) {
                            var event_1, eventType, functionsValue, _b, eventFilter, location_1, isLocationBody, eventNamespace, binder, propagation, isDelay, debounceTimeout, elDebounceTimeout, delayTimeout, eventsDetach, eventsDetachActivated, eventAttribute;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        event_1 = events[i];
                                        eventType = event_1[2];
                                        if (!this_1.IsEventTypeValid(eventType))
                                            return [2, "continue"];
                                        functionsValue = event_1[3];
                                        _b = (!isSectorDynamic);
                                        if (!_b) return [3, 2];
                                        return [4, this_1.HasEventContext(sector, renderContext, functionsValue, event_1[5])];
                                    case 1:
                                        _b = (_c.sent());
                                        _c.label = 2;
                                    case 2:
                                        if (_b)
                                            return [2, "continue"];
                                        eventFilter = event_1[4];
                                        location_1 = event_1[1];
                                        isLocationBody = this_1.IsLocationBody(location_1);
                                        eventNamespace = this_1.CreateEventNamespace(el, location_1, eventType, 'noContext');
                                        binder = this_1.RetrieveEventBinder(el, location_1);
                                        if (binder === null)
                                            return [2, "continue"];
                                        propagation = this_1.GetEventPropagation(el, eventType);
                                        isDelay = this_1.IsEventDelay(el, eventType);
                                        debounceTimeout = this_1._debounceDefaultClick;
                                        elDebounceTimeout = isDelay ? null : this_1.GetEventDebounce(el, eventType);
                                        if (elDebounceTimeout !== null) {
                                            isDelay = true;
                                            debounceTimeout = elDebounceTimeout;
                                        }
                                        delayTimeout = null;
                                        eventsDetach = this_1.GetEventDetach(el, eventType);
                                        eventsDetachActivated = false;
                                        eventAttribute = event_1[0];
                                        this_1.DetachEventListener(binder, eventNamespace);
                                        this_1.AttachEventListener(binder, eventType, eventNamespace, function (e) { return __awaiter(_this, void 0, void 0, function () {
                                            var sectorEvent, _a, j, eventDetach, eventDetachNamespace, functionsValueCurrent;
                                            return __generator(this, function (_b) {
                                                switch (_b.label) {
                                                    case 0:
                                                        if ((isLocationBody) && (!application.Document.Contains(el))) {
                                                            application.EventHandler.DetachEventListener(binder, eventNamespace);
                                                            return [2, (true)];
                                                        }
                                                        if (!application.EventHandler.IsValidEventFilter(e, eventFilter))
                                                            return [2, (true)];
                                                        if (!isSectorDynamic) return [3, 2];
                                                        return [4, this.Application.Document.GetSectorResolved(el)];
                                                    case 1:
                                                        _a = _b.sent();
                                                        return [3, 3];
                                                    case 2:
                                                        _a = sector;
                                                        _b.label = 3;
                                                    case 3:
                                                        sectorEvent = _a;
                                                        return [4, this.Application.Validator.IsValidationEventValid(el, sectorEvent, eventType, location_1, e, null)];
                                                    case 4:
                                                        if (!(_b.sent()))
                                                            return [2, (true)];
                                                        if (eventsDetachActivated)
                                                            return [2, (true)];
                                                        if (eventsDetach != null) {
                                                            for (j = 0; j < eventsDetach.length; j++) {
                                                                eventDetach = eventsDetach[j];
                                                                eventDetachNamespace = this.CreateEventNamespace(el, null, eventDetach, 'noContext');
                                                                application.EventHandler.DetachEventListener(binder, eventNamespace);
                                                                if (eventDetach === eventType)
                                                                    eventsDetachActivated = true;
                                                            }
                                                        }
                                                        functionsValueCurrent = el.getAttribute(eventAttribute);
                                                        if (!isDelay) {
                                                            application.EventHandler.ExecuteEvent(sector, null, el, e, functionsValueCurrent, isSectorDynamic);
                                                        }
                                                        else {
                                                            if (delayTimeout != null)
                                                                clearTimeout(delayTimeout);
                                                            delayTimeout = setTimeout(function () {
                                                                clearTimeout(delayTimeout);
                                                                delayTimeout = null;
                                                                application.EventHandler.ExecuteEvent(sector, null, el, e, functionsValueCurrent, isSectorDynamic);
                                                            }, debounceTimeout);
                                                        }
                                                        return [2, (propagation)];
                                                }
                                            });
                                        }); });
                                        return [2];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < events.length)) return [3, 6];
                        return [5, _loop_1(i)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3, 3];
                    case 6: return [2];
                }
            });
        });
    };
    DrapoEventHandler.prototype.AttachContext = function (context, el, sector, renderContext) {
        return __awaiter(this, void 0, void 0, function () {
            var events, application, contextItem, _loop_2, this_2, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        events = this.RetrieveElementEvents(el);
                        if (events.length == 0)
                            return [2];
                        application = this.Application;
                        contextItem = context.Item;
                        _loop_2 = function (i) {
                            var event_2, eventType, functionsValueOriginal, eventFilter, location_2, isLocationBody, functionsValue, eventNamespace, binder, propagation, isDelay, debounceTimeout, elDebounceTimeout, delayTimeout, eventsDetach, eventsDetachActivated;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        event_2 = events[i];
                                        eventType = event_2[2];
                                        if (!this_2.IsEventTypeValid(eventType))
                                            return [2, "continue"];
                                        functionsValueOriginal = event_2[3];
                                        return [4, this_2.HasEventContext(sector, renderContext, functionsValueOriginal, event_2[5])];
                                    case 1:
                                        if (!(_b.sent()))
                                            return [2, "continue"];
                                        eventFilter = event_2[4];
                                        location_2 = event_2[1];
                                        isLocationBody = this_2.IsLocationBody(location_2);
                                        functionsValue = this_2.Application.Solver.ResolveSystemContextPath(sector, context, functionsValueOriginal);
                                        eventNamespace = this_2.CreateEventNamespace(el, location_2, eventType, 'context');
                                        binder = this_2.RetrieveEventBinder(el, location_2);
                                        if (binder === null)
                                            return [2, "continue"];
                                        propagation = this_2.GetEventPropagation(el, eventType);
                                        isDelay = this_2.IsEventDelay(el, eventType);
                                        debounceTimeout = this_2._debounceDefaultClick;
                                        elDebounceTimeout = isDelay ? null : this_2.GetEventDebounce(el, eventType);
                                        if (elDebounceTimeout !== null) {
                                            isDelay = true;
                                            debounceTimeout = elDebounceTimeout;
                                        }
                                        delayTimeout = null;
                                        eventsDetach = this_2.GetEventDetach(el, eventType);
                                        eventsDetachActivated = false;
                                        this_2.DetachEventListener(binder, eventNamespace);
                                        this_2.AttachEventListener(binder, eventType, eventNamespace, function (e) { return __awaiter(_this, void 0, void 0, function () {
                                            var sectorLocal, j, eventDetach, eventDetachNamespace;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if ((isLocationBody) && (!application.Document.Contains(el))) {
                                                            application.EventHandler.DetachEventListener(binder, eventNamespace);
                                                            return [2, (true)];
                                                        }
                                                        if (!application.EventHandler.IsValidEventFilter(e, eventFilter))
                                                            return [2, (true)];
                                                        sectorLocal = application.Document.GetSector(e.target);
                                                        return [4, this.Application.Validator.IsValidationEventValid(el, sectorLocal, eventType, location_2, e, contextItem)];
                                                    case 1:
                                                        if (!(_a.sent()))
                                                            return [2, (true)];
                                                        if (eventsDetachActivated)
                                                            return [2, (true)];
                                                        if (eventsDetach != null) {
                                                            for (j = 0; j < eventsDetach.length; j++) {
                                                                eventDetach = eventsDetach[j];
                                                                eventDetachNamespace = this.CreateEventNamespace(el, null, eventDetach, 'noContext');
                                                                application.EventHandler.DetachEventListener(binder, eventNamespace);
                                                                if (eventDetach === eventType)
                                                                    eventsDetachActivated = true;
                                                            }
                                                        }
                                                        if (!isDelay) {
                                                            application.EventHandler.ExecuteEvent(sectorLocal, contextItem, el, e, functionsValue);
                                                        }
                                                        else {
                                                            if (delayTimeout != null)
                                                                clearTimeout(delayTimeout);
                                                            delayTimeout = setTimeout(function () {
                                                                clearTimeout(delayTimeout);
                                                                delayTimeout = null;
                                                                application.EventHandler.ExecuteEvent(sectorLocal, contextItem, el, e, functionsValue);
                                                            }, debounceTimeout);
                                                        }
                                                        return [2, (propagation)];
                                                }
                                            });
                                        }); });
                                        return [2];
                                }
                            });
                        };
                        this_2 = this;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < events.length)) return [3, 4];
                        return [5, _loop_2(i)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoEventHandler.prototype.HasEventContext = function (sector, renderContext, functionsValue, validation) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.Application.FunctionHandler.HasFunctionMustacheContext(functionsValue, sector, renderContext)];
                    case 1:
                        if (_b.sent())
                            return [2, (true)];
                        _a = (validation != null);
                        if (!_a) return [3, 3];
                        return [4, this.Application.FunctionHandler.HasFunctionMustacheContext(validation, sector, renderContext)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        if (_a)
                            return [2, (true)];
                        return [2, (false)];
                }
            });
        });
    };
    DrapoEventHandler.prototype.AttachEventListener = function (el, eventType, eventNamespace, callback) {
        var elEventListeners = this.GetElementEventListenerContainer(el);
        var elEventListener = new DrapoEventListener();
        elEventListener.EventType = eventType;
        elEventListener.EventNamespace = eventNamespace;
        elEventListener.Function = callback;
        elEventListeners.push(elEventListener);
        el.addEventListener(eventType, callback);
        this.SetElementEventListenerContainer(el, elEventListeners);
    };
    DrapoEventHandler.prototype.DetachEventListener = function (el, eventNamespace) {
        var elEventListeners = this.GetElementEventListenerContainer(el);
        for (var i = elEventListeners.length - 1; i >= 0; i--) {
            var elEventListener = elEventListeners[i];
            if (elEventListener.EventNamespace !== eventNamespace)
                continue;
            elEventListeners.splice(i, 1);
            el.removeEventListener(elEventListener.EventType, elEventListener.Function);
            this.SetElementEventListenerContainer(el, elEventListeners);
            return (true);
        }
        return (false);
    };
    DrapoEventHandler.prototype.SetElementEventListenerContainer = function (el, elEventListeners) {
        var elAny = el;
        elAny._events = elEventListeners;
    };
    DrapoEventHandler.prototype.GetElementEventListenerContainer = function (el) {
        var elAny = el;
        if (elAny._events == null) {
            var elEventListeners = [];
            elAny._events = elEventListeners;
            return (elEventListeners);
        }
        return elAny._events;
    };
    DrapoEventHandler.prototype.ExecuteEvent = function (sector, contextItem, element, event, functionsValue, isSectorDynamic) {
        if (isSectorDynamic === void 0) { isSectorDynamic = false; }
        return __awaiter(this, void 0, void 0, function () {
            var isEventSingle, eventSingleClass, sectorEvent, _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 7]);
                        isEventSingle = element.getAttribute('d-event-single') === 'true';
                        if ((isEventSingle) && (this.IsEventRunning(element)))
                            return [2];
                        eventSingleClass = null;
                        if (isEventSingle) {
                            this.AddEventRunning(element);
                            eventSingleClass = element.getAttribute('d-event-single-class');
                            if (eventSingleClass != null)
                                element.classList.add(eventSingleClass);
                        }
                        if (!isSectorDynamic) return [3, 2];
                        return [4, this.Application.Document.GetSectorResolved(element)];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = sector;
                        _b.label = 3;
                    case 3:
                        sectorEvent = _a;
                        return [4, this.Application.FunctionHandler.ResolveFunction(sectorEvent, contextItem, element, event, functionsValue)];
                    case 4:
                        _b.sent();
                        if (isEventSingle) {
                            this.RemoveEventRunning(element);
                            if (eventSingleClass != null)
                                element.classList.remove(eventSingleClass);
                        }
                        return [3, 7];
                    case 5:
                        e_1 = _b.sent();
                        return [4, this.Application.ExceptionHandler.Handle(e_1, 'DrapoEventHandler - ExecuteEvent')];
                    case 6:
                        _b.sent();
                        return [3, 7];
                    case 7: return [2];
                }
            });
        });
    };
    DrapoEventHandler.prototype.IsEventRunning = function (element) {
        for (var i = this._eventsRunning.length - 1; i >= 0; i--) {
            var elementCurrent = this._eventsRunning[i];
            if (elementCurrent === element)
                return (true);
        }
        return (false);
    };
    DrapoEventHandler.prototype.AddEventRunning = function (element) {
        this._eventsRunning.push(element);
    };
    DrapoEventHandler.prototype.RemoveEventRunning = function (element) {
        for (var i = this._eventsRunning.length - 1; i >= 0; i--) {
            var elementCurrent = this._eventsRunning[i];
            if (elementCurrent === element)
                this._eventsRunning.splice(i, 1);
        }
    };
    DrapoEventHandler.prototype.IsEventTypeValid = function (eventType) {
        if (eventType == 'click')
            return (true);
        if (eventType == 'change')
            return (true);
        if (eventType == 'keyup')
            return (true);
        if (eventType == 'blur')
            return (true);
        if (eventType == 'dblclick')
            return (true);
        if (eventType == 'input')
            return (true);
        if (eventType == 'load')
            return (true);
        if (eventType == 'mousedown')
            return (true);
        if (eventType == 'mouseover')
            return (true);
        if (eventType == 'mouseup')
            return (true);
        if (eventType === 'model')
            return (false);
        this.Application.ExceptionHandler.HandleError('DrapoEventHandler - EventType Unknown - {0}', eventType);
        return (false);
    };
    DrapoEventHandler.prototype.IsEventDelay = function (el, eventType) {
        if (eventType !== 'click')
            return (false);
        return (this.HasEventDoubleClickInParent(el));
    };
    DrapoEventHandler.prototype.GetEventDebounce = function (el, eventType) {
        var elEventTypeDebounce = el.getAttribute('d-on-' + eventType + '-' + this._debounce);
        if ((elEventTypeDebounce == null) || (elEventTypeDebounce == ''))
            return (null);
        if (elEventTypeDebounce === 'true')
            return (this._debounceDefault);
        return (this.Application.Parser.ParseNumber(elEventTypeDebounce, this._debounceDefault));
    };
    DrapoEventHandler.prototype.GetEventDetach = function (el, eventType) {
        var elEventTypeDetach = el.getAttribute('d-on-' + eventType + '-' + this._detach);
        if ((elEventTypeDetach == null) || (elEventTypeDetach == ''))
            return (null);
        if (elEventTypeDetach === 'true')
            return ([eventType]);
        return (this.Application.Parser.ParsePipes(elEventTypeDetach));
    };
    DrapoEventHandler.prototype.HasEventDoubleClickInParent = function (el) {
        if (el == null)
            return (false);
        var doubleClickEvent = el.getAttribute('d-on-dblclick');
        if ((doubleClickEvent != null) && (doubleClickEvent != ''))
            return (true);
        return (this.HasEventDoubleClickInParent(el.parentElement));
    };
    DrapoEventHandler.prototype.IsEventTypeKeyboard = function (eventType) {
        return (eventType == 'keyup');
    };
    DrapoEventHandler.prototype.IsValidEventFilter = function (e, eventFilter) {
        if (eventFilter == null)
            return (true);
        if (this.IsEventTypeKeyboard(e.type))
            return (this.IsValidEventFilterKeyboard(e, eventFilter));
        return (true);
    };
    DrapoEventHandler.prototype.IsValidEventFilterKeyboard = function (e, eventFilter) {
        return (this.GetKeyboardMapping(e.key) == this.GetKeyboardMapping(eventFilter));
    };
    DrapoEventHandler.prototype.GetKeyboardMapping = function (key) {
        if (key == null)
            return (null);
        key = key.toLowerCase();
        if (key === 'esc')
            key = 'escape';
        if (key === 'del')
            key = 'delete';
        return (key);
    };
    DrapoEventHandler.prototype.RetrieveElementEvents = function (el) {
        var events = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var event_3 = this.Application.Parser.ParseEventProperty(el, attribute.nodeName, attribute.nodeValue);
            if ((event_3 != null) && (event_3[4] !== this._debounce) && (event_3[4] !== this._detach))
                events.push(event_3);
        }
        return (events);
    };
    DrapoEventHandler.prototype.TriggerClick = function (el) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Trigger(el, 'click')];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoEventHandler.prototype.Trigger = function (el, type) {
        return __awaiter(this, void 0, void 0, function () {
            var event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event = new Event(type);
                        return [4, this.TriggerEvent(el, event)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoEventHandler.prototype.TriggerEvent = function (el, event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, (el.dispatchEvent(event))];
            });
        });
    };
    DrapoEventHandler.prototype.SyncNodeEventsDifferences = function (nodeOld, nodeNew) {
        var eventsOld = this.GetElementEventListenerContainer(nodeOld);
        var eventsNew = this.GetElementEventListenerContainer(nodeNew);
        for (var i = 0; i < eventsNew.length; i++) {
            var eventNew = eventsNew[i];
            var eventOld = this.GetEventListener(eventNew.EventNamespace, eventsOld);
            if (eventOld == null) {
                var elEventListener = new DrapoEventListener();
                elEventListener.EventType = eventNew.EventType;
                elEventListener.EventNamespace = eventNew.EventNamespace;
                elEventListener.Function = eventNew.Function;
                eventsOld.push(elEventListener);
                this.AttachEventListener(nodeOld, elEventListener.EventType, elEventListener.EventNamespace, elEventListener.Function);
            }
            else {
                this.DetachEventListener(nodeOld, eventOld.EventNamespace);
                eventOld.Function = eventNew.Function;
                this.AttachEventListener(nodeOld, eventOld.EventType, eventOld.EventNamespace, eventOld.Function);
            }
        }
        for (var i = eventsOld.length - 1; i >= 0; i--) {
            var eventOld = eventsOld[i];
            var eventNew = this.GetEventListener(eventOld.EventNamespace, eventsNew);
            if (eventNew !== null)
                continue;
            this.DetachEventListener(nodeOld, eventOld.EventNamespace);
        }
        if ((eventsOld.length > 0) || (eventsNew.length > 0))
            this.SetElementEventListenerContainer(nodeOld, eventsOld);
    };
    DrapoEventHandler.prototype.GetEventListener = function (eventNamespace, events) {
        for (var i = 0; i < events.length; i++) {
            var event_4 = events[i];
            if (event_4.EventNamespace === eventNamespace)
                return (event_4);
        }
        return (null);
    };
    return DrapoEventHandler;
}());

"use strict";
var DrapoEventListener = (function () {
    function DrapoEventListener() {
        this._eventType = null;
        this._eventNamespace = null;
        this._function = null;
    }
    Object.defineProperty(DrapoEventListener.prototype, "EventType", {
        get: function () {
            return (this._eventType);
        },
        set: function (value) {
            this._eventType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoEventListener.prototype, "EventNamespace", {
        get: function () {
            return (this._eventNamespace);
        },
        set: function (value) {
            this._eventNamespace = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoEventListener.prototype, "Function", {
        get: function () {
            return (this._function);
        },
        set: function (value) {
            this._function = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoEventListener;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoExceptionHandler = (function () {
    function DrapoExceptionHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoExceptionHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoExceptionHandler.prototype.Handle = function (e, context) {
        if (context === void 0) { context = null; }
        return __awaiter(this, void 0, void 0, function () {
            var message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        message = context != null ? context : 'DrapoExceptionHandler - Handle - Exception';
                        return [4, this.Application.Log.WriteError('Drapo - ' + message + ' - Stack: ' + e.stack.toString(), [])];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoExceptionHandler.prototype.HandleError = function (message) {
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Log.WriteError('Drapo - ' + message, parameters)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    return DrapoExceptionHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoExecutionContext = (function () {
    function DrapoExecutionContext(application) {
        this._application = null;
        this._hasError = false;
        this._canReset = false;
        this._hasBreakpoint = false;
        this._sector = '';
        this._dataKey = '';
        this._data = null;
        this._sectorContainer = [];
        this._windowsAutoClose = [];
        this._stack = new DrapoStack();
        this._application = application;
    }
    Object.defineProperty(DrapoExecutionContext.prototype, "HasError", {
        get: function () {
            return (this._hasError);
        },
        set: function (value) {
            this._hasError = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExecutionContext.prototype, "CanReset", {
        get: function () {
            return (this._canReset);
        },
        set: function (value) {
            this._canReset = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExecutionContext.prototype, "HasBreakpoint", {
        get: function () {
            return (this._hasBreakpoint);
        },
        set: function (value) {
            this._hasBreakpoint = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExecutionContext.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExecutionContext.prototype, "DataKey", {
        get: function () {
            return (this._dataKey);
        },
        set: function (value) {
            this._dataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExecutionContext.prototype, "Data", {
        get: function () {
            return (this._data);
        },
        set: function (value) {
            this._data = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExecutionContext.prototype, "Stack", {
        get: function () {
            return (this._stack);
        },
        enumerable: false,
        configurable: true
    });
    DrapoExecutionContext.prototype.Continue = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, (!this._hasError)];
            });
        });
    };
    DrapoExecutionContext.prototype.AddSectorContainer = function (sector, containerCode) {
        for (var i = 0; i < this._sectorContainer.length; i++) {
            var tuple = this._sectorContainer[i];
            if (tuple[0] !== sector)
                continue;
            tuple[1] = containerCode;
            break;
        }
        this._sectorContainer.push([sector, containerCode]);
    };
    DrapoExecutionContext.prototype.HasSectorContainer = function (sector) {
        for (var i = 0; i < this._sectorContainer.length; i++) {
            var tuple = this._sectorContainer[i];
            if (tuple[0] === sector)
                return (true);
        }
        return (false);
    };
    DrapoExecutionContext.prototype.GetSectorContainer = function (sector) {
        for (var i = 0; i < this._sectorContainer.length; i++) {
            var tuple = this._sectorContainer[i];
            if (tuple[0] === sector)
                return (tuple[1]);
        }
        return (null);
    };
    DrapoExecutionContext.prototype.AddWindowAutoClose = function (window) {
        this._windowsAutoClose.push(window);
    };
    DrapoExecutionContext.prototype.GetWindowsAutoClose = function () {
        return (this._windowsAutoClose);
    };
    return DrapoExecutionContext;
}());

"use strict";
var DrapoExpressionItem = (function () {
    function DrapoExpressionItem(type, value) {
        if (value === void 0) { value = ''; }
        this._value = '';
        this._items = [];
        this._type = type;
        this.Value = value;
    }
    Object.defineProperty(DrapoExpressionItem.prototype, "Type", {
        get: function () {
            return (this._type);
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExpressionItem.prototype, "Value", {
        get: function () {
            return (this._value);
        },
        set: function (value) {
            if ((value != null) && (value.length > 1) && (value[0] === "'") && (value[value.length - 1] === "'"))
                this._value = value.substring(1, value.length - 1);
            else if ((value != null) && (value.length > 1) && (value[0] === '"') && (value[value.length - 1] === '"'))
                this._value = value.substring(1, value.length - 1);
            else
                this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoExpressionItem.prototype, "Items", {
        get: function () {
            return (this._items);
        },
        set: function (value) {
            this._items = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoExpressionItem.prototype.GetItemIndex = function (value) {
        for (var i = 0; i < this._items.length; i++)
            if (this._items[i].Value === value)
                return (i);
        return (null);
    };
    return DrapoExpressionItem;
}());

"use strict";
var DrapoExpressionItemType;
(function (DrapoExpressionItemType) {
    DrapoExpressionItemType[DrapoExpressionItemType["Block"] = 0] = "Block";
    DrapoExpressionItemType[DrapoExpressionItemType["Text"] = 1] = "Text";
    DrapoExpressionItemType[DrapoExpressionItemType["Function"] = 2] = "Function";
    DrapoExpressionItemType[DrapoExpressionItemType["Mustache"] = 3] = "Mustache";
    DrapoExpressionItemType[DrapoExpressionItemType["Comparator"] = 4] = "Comparator";
    DrapoExpressionItemType[DrapoExpressionItemType["Logical"] = 5] = "Logical";
    DrapoExpressionItemType[DrapoExpressionItemType["Deny"] = 6] = "Deny";
    DrapoExpressionItemType[DrapoExpressionItemType["Arithmetic"] = 7] = "Arithmetic";
})(DrapoExpressionItemType || (DrapoExpressionItemType = {}));

"use strict";
var DrapoFormatter = (function () {
    function DrapoFormatter(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoFormatter.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoFormatter.prototype.Format = function (value, format, culture, applyTimezone) {
        if (culture === void 0) { culture = null; }
        if (applyTimezone === void 0) { applyTimezone = null; }
        if ((value == null) || (value === ''))
            return ('');
        if (this.Application.Parser.IsBoolean(value))
            return (value);
        if (this.Application.Parser.IsNumber(value))
            return (this.FormatNumber(this.Application.Parser.ParseNumber(value), format, culture));
        return (this.FormatDate(value, format, culture, applyTimezone == null ? true : applyTimezone));
    };
    DrapoFormatter.prototype.FormatDate = function (value, format, culture, applyTimezone) {
        var date = this.Application.Parser.ParseDate(value);
        if (date === null)
            return (value);
        if (applyTimezone) {
            var timeZone = this.Application.Config.GetTimezone();
            if (timeZone != null)
                date.setHours(date.getHours() + timeZone);
        }
        var formatConverted = this.ConvertDateFormat(format, culture);
        var formatTokens = this.Application.Parser.ParseFormat(formatConverted);
        var dateFormatted = this.GetDateFormattedTokens(date, formatTokens, culture);
        return (dateFormatted);
    };
    DrapoFormatter.prototype.ConvertDateFormat = function (format, culture) {
        var formatConverted = format;
        switch (format) {
            case "d":
            case "D":
            case "t":
            case "T":
            case "g":
            case "G":
            case "r":
                formatConverted = this.Application.Globalization.GetDateFormat(format, culture);
                break;
        }
        return (formatConverted);
    };
    DrapoFormatter.prototype.GetDateFormattedTokens = function (date, formatTokens, culture) {
        var dateCulture = '';
        for (var i = 0; i < formatTokens.length; i++) {
            var formatToken = formatTokens[i];
            dateCulture = dateCulture + this.GetDateFormattedToken(date, formatToken, culture);
        }
        return (dateCulture);
    };
    DrapoFormatter.prototype.GetDateFormattedToken = function (date, formatToken, culture) {
        var dateFormat = formatToken;
        switch (formatToken) {
            case 'YYYY':
            case 'yyyy':
                dateFormat = date.getFullYear().toString();
                break;
            case 'YY':
            case 'yy':
                var yearFull = date.getFullYear().toString();
                dateFormat = yearFull.substring(2);
                break;
            case 'M':
                dateFormat = (date.getMonth() + 1).toString();
                break;
            case 'MM':
                dateFormat = this.EnsureLength((date.getMonth() + 1).toString());
                break;
            case 'MMM':
                dateFormat = this.Application.Globalization.GetMonthNameShort(date.getMonth(), culture);
                break;
            case 'MMMM':
                dateFormat = this.Application.Globalization.GetMonthName(date.getMonth(), culture);
                break;
            case 'D':
            case 'd':
                dateFormat = (date.getDate()).toString();
            case 'DD':
            case 'dd':
                dateFormat = this.EnsureLength((date.getDate()).toString());
                break;
            case 'DDD':
            case 'ddd':
                dateFormat = this.Application.Globalization.GetDayOfWeekNameShort(date.getDay(), culture);
                break;
            case 'DDDD':
            case 'dddd':
                dateFormat = this.Application.Globalization.GetDayOfWeekName(date.getDay(), culture);
                break;
            case 'h':
                var hours = date.getHours();
                if (hours > 12)
                    hours = hours - 12;
                dateFormat = hours.toString();
                break;
            case 'hh':
                var hoursDouble = date.getHours();
                if (hoursDouble > 12)
                    hoursDouble = hoursDouble - 12;
                dateFormat = this.EnsureLength(hoursDouble.toString());
                break;
            case 'H':
                dateFormat = date.getHours().toString();
                break;
            case 'HH':
                dateFormat = this.EnsureLength(date.getHours().toString());
                break;
            case 'm':
                dateFormat = date.getMinutes().toString();
                break;
            case 'mm':
                dateFormat = this.EnsureLength(date.getMinutes().toString());
                break;
            case 's':
                dateFormat = date.getSeconds().toString();
            case 'ss':
                dateFormat = this.EnsureLength(date.getSeconds().toString());
                break;
            case 'f':
            case 'F':
                dateFormat = this.EnsureLengthMax(date.getMilliseconds().toString(), 1);
                break;
            case 'ff':
            case 'FF':
                dateFormat = this.EnsureLengthMax(date.getMilliseconds().toString(), 2);
                break;
            case 'fff':
            case 'FFF':
                dateFormat = this.EnsureLengthMax(date.getMilliseconds().toString(), 3);
                break;
        }
        return (dateFormat);
    };
    DrapoFormatter.prototype.EnsureLength = function (data, length) {
        if (length === void 0) { length = 2; }
        while (data.length < length)
            data = '0' + data;
        return (data);
    };
    DrapoFormatter.prototype.EnsureLengthMax = function (data, length) {
        if (data.length > length)
            return (data.substring(0, length));
        return (data);
    };
    DrapoFormatter.prototype.FormatNumber = function (value, format, culture) {
        var formatTokens = this.Application.Parser.ParseFormat(format);
        if (formatTokens.length == 0)
            return (value.toString());
        var formatTokenType = formatTokens[0];
        if ((formatTokenType === 'N') || (formatTokenType === 'n'))
            return (this.FormatNumberNumeric(value, formatTokens, culture));
        if ((formatTokenType === 'P') || (formatTokenType === 'p'))
            return (this.FormatNumberPercentage(value, formatTokens, culture));
        if ((formatTokenType === 'D') || (formatTokenType === 'd'))
            return (this.FormatNumberDecimal(value, formatTokens, culture));
        if ((formatTokenType === 'T') || (formatTokenType === 't'))
            return (this.FormatNumberTimespan(value, formatTokens, culture));
        if ((formatTokenType === 'S') || (formatTokenType === 's'))
            return (this.FormatNumberSize(value, formatTokens, culture));
        return (value.toString());
    };
    DrapoFormatter.prototype.FormatNumberNumeric = function (value, formatTokens, culture) {
        var decimals = this.GetFormatTokenNumber(formatTokens, 1, 2);
        var isNegative = value < 0;
        var valueAbsolute = Math.abs(value);
        var valueDecimals = valueAbsolute.toFixed(decimals);
        var valueDecimalsWithCulture = this.GetNumberFormattedWithCulture(valueDecimals, culture);
        return ((isNegative ? '-' : '') + valueDecimalsWithCulture);
    };
    DrapoFormatter.prototype.FormatNumberPercentage = function (value, formatTokens, culture) {
        var decimals = this.GetFormatTokenNumber(formatTokens, 1, 2);
        var isNegative = value < 0;
        var valueAbsolute = Math.abs(value);
        var valueDecimals = (valueAbsolute * 100).toFixed(decimals);
        var valueDecimalsWithCulture = this.GetNumberFormattedWithCulture(valueDecimals, culture);
        return ((isNegative ? '-' : '') + valueDecimalsWithCulture + ' %');
    };
    DrapoFormatter.prototype.FormatNumberDecimal = function (value, formatTokens, culture) {
        var decimals = this.GetFormatTokenNumber(formatTokens, 1, 1);
        var isNegative = value < 0;
        var valueAbsolute = Math.abs(value);
        var valueDecimals = this.EnsureLength(valueAbsolute.toFixed(0), decimals);
        var valueDecimalsWithCulture = this.GetNumberFormattedWithCulture(valueDecimals, culture);
        return ((isNegative ? '-' : '') + valueDecimalsWithCulture);
    };
    DrapoFormatter.prototype.FormatNumberTimespan = function (value, formatTokens, culture) {
        if (value === 0)
            return ('');
        if (value < 0)
            return (((formatTokens != null) && (formatTokens.length > 1)) ? formatTokens[1] : '');
        if (value < 1000)
            return (value.toString() + 'ms');
        if (value < (1000 * 60)) {
            var seconds = Math.floor(value / 1000);
            return (seconds.toString() + 's');
        }
        if (value < (1000 * 60 * 60)) {
            var minutes = Math.floor(value / (1000 * 60));
            return (minutes.toString() + 'm' + this.FormatNumberTimespan(value - (minutes * 1000 * 60), null, culture));
        }
        var hours = Math.floor(value / (1000 * 60 * 60));
        return (hours.toString() + 'h' + this.FormatNumberTimespan(value - (hours * 1000 * 60 * 60), null, culture));
    };
    DrapoFormatter.prototype.FormatNumberSize = function (value, formatTokens, culture) {
        var type = 0;
        var valueSize = value;
        while (valueSize > 1000) {
            valueSize = valueSize / 1000;
            type++;
        }
        return (valueSize.toString() + this.Application.Globalization.GetNumberSizeTypeName(type, culture));
    };
    DrapoFormatter.prototype.GetNumberFormattedWithCulture = function (value, culture) {
        var delimiterDecimal = this.Application.Globalization.GetDelimiterDecimal(culture);
        var delimiterThousandes = this.Application.Globalization.GetDelimiterThousands(culture);
        if (delimiterDecimal !== '.')
            value = value.replace('.', delimiterDecimal);
        var index = value.indexOf(delimiterDecimal);
        if (index === -1)
            index = value.length;
        for (var i = index - 3; i > 0; i = i - 3)
            value = value.substring(0, i) + delimiterThousandes + value.substring(i);
        return (value);
    };
    DrapoFormatter.prototype.GetFormatTokenNumber = function (formatTokens, index, valueDefault) {
        if (index >= formatTokens.length)
            return (valueDefault);
        var token = formatTokens[index];
        return (this.Application.Parser.ParseNumber(token, valueDefault));
    };
    return DrapoFormatter;
}());

"use strict";
var DrapoFunction = (function () {
    function DrapoFunction() {
        this._name = null;
        this._parameters = [];
    }
    Object.defineProperty(DrapoFunction.prototype, "Name", {
        get: function () {
            return (this._name);
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoFunction.prototype, "Parameters", {
        get: function () {
            return (this._parameters);
        },
        set: function (value) {
            this._parameters = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoFunction;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoFunctionHandler = (function () {
    function DrapoFunctionHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoFunctionHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoFunctionHandler.prototype.ResolveFunctionWithoutContext = function (sector, element, functionsValue, executionContext) {
        if (executionContext === void 0) { executionContext = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunction(sector, null, element, null, functionsValue, executionContext, true)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.CreateExecutionContext = function (canReset) {
        if (canReset === void 0) { canReset = true; }
        var executionContext = new DrapoExecutionContext(this.Application);
        executionContext.CanReset = canReset;
        if (canReset)
            this.Application.Server.HasBadRequest = false;
        return (executionContext);
    };
    DrapoFunctionHandler.prototype.FinalizeExecutionContext = function (executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var windowsAutoClose, i, windowAutoClose;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        windowsAutoClose = executionContext.GetWindowsAutoClose();
                        i = windowsAutoClose.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        windowAutoClose = windowsAutoClose[i];
                        return [4, this.Application.WindowHandler.TryClose(windowAutoClose)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.IsExecutionBroked = function (executionContext) {
        if (executionContext.HasError)
            return (true);
        if (!executionContext.CanReset)
            return (false);
        if (this.Application.Server.HasBadRequest) {
            this.Application.Server.HasBadRequest = false;
            executionContext.HasError = true;
            return (true);
        }
        return (false);
    };
    DrapoFunctionHandler.prototype.ReplaceFunctionExpressions = function (sector, context, expression, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ReplaceFunctionExpressionsContext(sector, context, expression, canBind, this.CreateExecutionContext(false))];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ReplaceFunctionExpressionsContext = function (sector, context, expression, canBind, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var functionsParsed, i, functionParse, functionParsed, dataPath, data, functionInnerParsed, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        functionsParsed = this.Application.Parser.ParseFunctions(expression);
                        i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(i < functionsParsed.length)) return [3, 9];
                        functionParse = functionsParsed[i];
                        functionParsed = this.Application.Parser.ParseFunction(functionParse);
                        if (functionParsed === null)
                            return [3, 8];
                        if (!this.Application.Parser.IsMustache(functionParse)) return [3, 4];
                        dataPath = this.Application.Parser.ParseMustache(functionParse);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, context.Item, dataPath)];
                    case 2:
                        data = _d.sent();
                        if ((data == null) || (data == ''))
                            return [3, 8];
                        functionParse = data;
                        return [4, this.ReplaceFunctionExpressionsContext(sector, context, functionParse, canBind, executionContext)];
                    case 3:
                        functionInnerParsed = _d.sent();
                        if (functionInnerParsed === functionParse)
                            return [3, 8];
                        functionParse = functionInnerParsed;
                        expression = expression.replace(functionParse, functionInnerParsed);
                        _d.label = 4;
                    case 4:
                        functionParsed = this.Application.Parser.ParseFunction(functionParse);
                        if (!(functionParsed == null)) return [3, 6];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoFunctionHandler - ResolveFunction - Invalid Parse - {0}', functionParse)];
                    case 5:
                        _d.sent();
                        return [3, 8];
                    case 6:
                        _b = (_a = expression).replace;
                        _c = [functionParse];
                        return [4, this.ExecuteFunctionContextSwitch(sector, context.Item, null, null, functionParsed, executionContext)];
                    case 7:
                        expression = _b.apply(_a, _c.concat([_d.sent()]));
                        _d.label = 8;
                    case 8:
                        i++;
                        return [3, 1];
                    case 9: return [2, (expression)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ResolveFunction = function (sector, contextItem, element, event, functionsValue, executionContext, forceFinalizeExecutionContext) {
        if (executionContext === void 0) { executionContext = null; }
        if (forceFinalizeExecutionContext === void 0) { forceFinalizeExecutionContext = false; }
        return __awaiter(this, void 0, void 0, function () {
            var created, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        created = false;
                        if (created = executionContext === null) {
                            executionContext = this.CreateExecutionContext();
                        }
                        return [4, this.ResolveFunctionContext(sector, contextItem, element, event, functionsValue, executionContext)];
                    case 1:
                        result = _a.sent();
                        if (!((created) || (forceFinalizeExecutionContext))) return [3, 3];
                        return [4, this.FinalizeExecutionContext(executionContext)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2, (result)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ResolveFunctionContext = function (sector, contextItem, element, event, functionsValue, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var result, functionsParsed, i, functionParse, dataPath, data, dataKey, _a, _b, functionParsed, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        result = '';
                        if (this.IsExecutionBroked(executionContext))
                            return [2, (result)];
                        functionsParsed = this.Application.Parser.ParseFunctions(functionsValue);
                        i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(i < functionsParsed.length)) return [3, 14];
                        functionParse = functionsParsed[i];
                        if (functionParse == '')
                            return [3, 13];
                        if (!this.Application.Parser.IsMustache(functionParse)) return [3, 5];
                        dataPath = this.Application.Parser.ParseMustache(functionParse);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 2:
                        data = _d.sent();
                        if ((data == null) || (data == ''))
                            return [3, 13];
                        dataKey = this.Application.Solver.ResolveDataKey(dataPath);
                        _a = executionContext;
                        return [4, this.Application.Debugger.HasBreakpoint(sector, dataKey)];
                    case 3:
                        _a.HasBreakpoint = _d.sent();
                        executionContext.Sector = sector;
                        executionContext.DataKey = dataKey;
                        _b = result;
                        return [4, this.ResolveFunctionContext(sector, contextItem, element, event, data, executionContext)];
                    case 4:
                        result = _b + (_d.sent());
                        if (this.IsExecutionBroked(executionContext))
                            return [2, (result)];
                        return [3, 13];
                    case 5:
                        functionParsed = this.Application.Parser.ParseFunction(functionParse);
                        if (!(functionParsed == null)) return [3, 7];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoFunctionHandler - ResolveFunction - Invalid Parse - {0}', functionParse)];
                    case 6:
                        _d.sent();
                        return [3, 13];
                    case 7:
                        if (!executionContext.HasBreakpoint) return [3, 9];
                        return [4, this.Application.Debugger.ActivateBreakpoint(executionContext.Sector, executionContext.DataKey, functionsValue, functionParse, 'before')];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9:
                        _c = result;
                        return [4, this.ExecuteFunctionContextSwitch(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 10:
                        result = _c + (_d.sent());
                        if (!((executionContext.HasBreakpoint) && (i == (functionsParsed.length - 1)))) return [3, 12];
                        return [4, this.Application.Debugger.ActivateBreakpoint(executionContext.Sector, executionContext.DataKey, functionsValue, functionParse, 'after')];
                    case 11:
                        _d.sent();
                        _d.label = 12;
                    case 12:
                        if (this.IsExecutionBroked(executionContext))
                            return [2, (result)];
                        _d.label = 13;
                    case 13:
                        i++;
                        return [3, 1];
                    case 14: return [4, this.Application.Debugger.CleanRuntime()];
                    case 15:
                        _d.sent();
                        return [2, (result)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ResolveFunctionParameter = function (sector, contextItem, element, executionContext, parameter, canForceLoadDataDelay, canUseReturnFunction, isRecursive) {
        if (canForceLoadDataDelay === void 0) { canForceLoadDataDelay = false; }
        if (canUseReturnFunction === void 0) { canUseReturnFunction = false; }
        if (isRecursive === void 0) { isRecursive = false; }
        return __awaiter(this, void 0, void 0, function () {
            var functionParsed, valueFunction, mustaches, mustache, value, valueReplaceMustache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!canUseReturnFunction) return [3, 4];
                        functionParsed = this.Application.Parser.ParseFunction(parameter);
                        if (!(functionParsed != null)) return [3, 4];
                        return [4, this.ExecuteFunctionContextSwitch(sector, contextItem, element, null, functionParsed, executionContext)];
                    case 1:
                        valueFunction = _a.sent();
                        if (!isRecursive) return [3, 3];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, valueFunction)];
                    case 2: return [2, (_a.sent())];
                    case 3: return [2, (valueFunction)];
                    case 4:
                        if (!this.Application.Parser.HasMustache(parameter))
                            return [2, (parameter)];
                        if (this.Application.Parser.HasFunction(parameter))
                            return [2, (parameter)];
                        mustaches = this.Application.Parser.ParseMustaches(parameter);
                        if (mustaches.length == 0)
                            return [2, (parameter)];
                        mustache = this.Application.Parser.ParseMustache(mustaches[0]);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, mustache, canForceLoadDataDelay, executionContext)];
                    case 5:
                        value = _a.sent();
                        if ((!isRecursive) && (parameter === mustaches[0]))
                            return [2, (value)];
                        valueReplaceMustache = parameter.replace(mustaches[0], value);
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, valueReplaceMustache)];
                    case 6: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ResolveExecutionContextMustache = function (sector, executionContext, value) {
        if (executionContext == null)
            return (value);
        if (!this.Application.Parser.HasMustache(value))
            return (value);
        var mustaches = this.Application.Parser.ParseMustaches(value);
        for (var i = 0; i < mustaches.length; i++) {
            var mustache = mustaches[i];
            var dataPath = this.Application.Parser.ParseMustache(mustache);
            var mustacheResolved = this.Application.Solver.GetExecutionContextPathValue(sector, executionContext, dataPath);
            if (mustacheResolved !== null)
                value = value.replace(mustache, mustacheResolved);
        }
        return (value);
    };
    DrapoFunctionHandler.prototype.ResolveFunctions = function (sector, contextItem, element, executionContext, value, checkInvalidFunction) {
        if (checkInvalidFunction === void 0) { checkInvalidFunction = true; }
        return __awaiter(this, void 0, void 0, function () {
            var functionsParsed, i, functionText, functionParsed, valueFunction, valueReplaceFunction, mustaches, mustache, mustacheValue, valueReplaceMustache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        functionsParsed = this.Application.Parser.ParseFunctionsPartial(value);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < functionsParsed.length)) return [3, 5];
                        functionText = functionsParsed[i];
                        functionParsed = this.Application.Parser.ParseFunction(functionText);
                        if (functionParsed === null)
                            return [3, 4];
                        return [4, this.ExecuteFunctionContextSwitch(sector, contextItem, element, null, functionParsed, executionContext, checkInvalidFunction)];
                    case 2:
                        valueFunction = _a.sent();
                        if ((valueFunction === null) && (!checkInvalidFunction))
                            return [3, 4];
                        valueReplaceFunction = value.replace(functionText, valueFunction);
                        return [4, this.ResolveFunctions(sector, contextItem, element, executionContext, valueReplaceFunction, checkInvalidFunction)];
                    case 3: return [2, (_a.sent())];
                    case 4:
                        i++;
                        return [3, 1];
                    case 5:
                        if (!this.Application.Parser.HasMustache(value))
                            return [2, (value)];
                        mustaches = this.Application.Parser.ParseMustaches(value);
                        if (mustaches.length == 0)
                            return [2, (value)];
                        mustache = this.Application.Parser.ParseMustache(mustaches[0]);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, mustache, true)];
                    case 6:
                        mustacheValue = _a.sent();
                        valueReplaceMustache = value.replace(mustaches[0], mustacheValue);
                        return [4, this.ResolveFunctions(sector, contextItem, element, executionContext, valueReplaceMustache, checkInvalidFunction)];
                    case 7: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ResolveFunctionParameterDataFields = function (sector, contextItem, element, parameter, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value, mustache, dataFields;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, parameter)];
                    case 1:
                        value = _a.sent();
                        if ((value == null) || (value == ''))
                            return [2, (null)];
                        mustache = '{{' + value + '}}';
                        dataFields = this.Application.Parser.ParseMustache(mustache);
                        return [2, (dataFields)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionContextSwitch = function (sector, contextItem, element, event, functionParsed, executionContext, checkInvalidFunction) {
        if (checkInvalidFunction === void 0) { checkInvalidFunction = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Debugger.AddFunction(functionParsed)];
                    case 1:
                        _a.sent();
                        if (functionParsed.Name === 'external')
                            return [2, (this.ExecuteFunctionExternal(contextItem, element, event, functionParsed))];
                        if (!(functionParsed.Name === 'toggleitemfield')) return [3, 3];
                        return [4, this.ExecuteFunctionToggleItemField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 2: return [2, (_a.sent())];
                    case 3:
                        if (!(functionParsed.Name === 'toggledata')) return [3, 5];
                        return [4, this.ExecuteFunctionToggleData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 4: return [2, (_a.sent())];
                    case 5:
                        if (!(functionParsed.Name === 'uncheckitemfield')) return [3, 7];
                        return [4, this.ExecuteFunctionUncheckItemField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 6: return [2, (_a.sent())];
                    case 7:
                        if (!(functionParsed.Name === 'clearitemfield')) return [3, 9];
                        return [4, this.ExecuteFunctionClearItemField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 8: return [2, (_a.sent())];
                    case 9:
                        if (!(functionParsed.Name === 'updateitemfield')) return [3, 11];
                        return [4, this.ExecuteFunctionUpdateItemField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 10: return [2, (_a.sent())];
                    case 11:
                        if (!(functionParsed.Name === 'checkdatafield')) return [3, 13];
                        return [4, this.ExecuteFunctionCheckDataField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 12: return [2, (_a.sent())];
                    case 13:
                        if (!(functionParsed.Name === 'uncheckdatafield')) return [3, 15];
                        return [4, this.ExecuteFunctionUncheckDataField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 14: return [2, (_a.sent())];
                    case 15:
                        if (!(functionParsed.Name === 'cleardatafield')) return [3, 17];
                        return [4, this.ExecuteFunctionClearDataField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 16: return [2, (_a.sent())];
                    case 17:
                        if (!(functionParsed.Name === 'updatedatafield')) return [3, 19];
                        return [4, this.ExecuteFunctionUpdateDataField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 18: return [2, (_a.sent())];
                    case 19:
                        if (!(functionParsed.Name === 'updatedatafieldlookup')) return [3, 21];
                        return [4, this.ExecuteFunctionUpdateDataFieldLookup(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 20: return [2, (_a.sent())];
                    case 21:
                        if (!(functionParsed.Name === 'checkitemfield')) return [3, 23];
                        return [4, this.ExecuteFunctionCheckItemField(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 22: return [2, (_a.sent())];
                    case 23:
                        if (!(functionParsed.Name === 'moveitem')) return [3, 25];
                        return [4, this.ExecuteFunctionMoveItem(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 24: return [2, (_a.sent())];
                    case 25:
                        if (!(functionParsed.Name === 'updatedataurl')) return [3, 27];
                        return [4, this.ExecuteFunctionUpdateDataUrl(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 26: return [2, (_a.sent())];
                    case 27:
                        if (!(functionParsed.Name === 'updatedataurlset')) return [3, 29];
                        return [4, this.ExecuteFunctionUpdateDataUrlSet(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 28: return [2, (_a.sent())];
                    case 29:
                        if (!(functionParsed.Name === 'adddataitem')) return [3, 31];
                        return [4, this.ExecuteFunctionAddDataItem(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 30: return [2, (_a.sent())];
                    case 31:
                        if (!(functionParsed.Name === 'removedataitem')) return [3, 33];
                        return [4, this.ExecuteFunctionRemoveDataItem(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 32: return [2, (_a.sent())];
                    case 33:
                        if (!(functionParsed.Name === 'removedataitemlookup')) return [3, 35];
                        return [4, this.ExecuteFunctionRemoveDataItemLookup(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 34: return [2, (_a.sent())];
                    case 35:
                        if (!(functionParsed.Name === 'containsdataitem')) return [3, 37];
                        return [4, this.ExecuteFunctionContainsDataItem(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 36: return [2, (_a.sent())];
                    case 37:
                        if (!(functionParsed.Name === 'updatesector')) return [3, 39];
                        return [4, this.ExecuteFunctionUpdateSector(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 38: return [2, (_a.sent())];
                    case 39:
                        if (!(functionParsed.Name === 'switchsector')) return [3, 41];
                        return [4, this.ExecuteFunctionSwitchSector(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 40: return [2, (_a.sent())];
                    case 41:
                        if (!(functionParsed.Name === 'reloadsector')) return [3, 43];
                        return [4, this.ExecuteFunctionReloadSector(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 42: return [2, (_a.sent())];
                    case 43:
                        if (!(functionParsed.Name === 'clearsector')) return [3, 45];
                        return [4, this.ExecuteFunctionClearSector(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 44: return [2, (_a.sent())];
                    case 45:
                        if (!(functionParsed.Name === 'loadsectorcontent')) return [3, 47];
                        return [4, this.ExecuteFunctionLoadSectorContent(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 46: return [2, (_a.sent())];
                    case 47:
                        if (!(functionParsed.Name === 'postdata')) return [3, 49];
                        return [4, this.ExecuteFunctionPostData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 48: return [2, (_a.sent())];
                    case 49:
                        if (!(functionParsed.Name === 'postdataitem')) return [3, 51];
                        return [4, this.ExecuteFunctionPostDataItem(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 50: return [2, (_a.sent())];
                    case 51:
                        if (!(functionParsed.Name === 'cleardata')) return [3, 53];
                        return [4, this.ExecuteFunctionClearData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 52: return [2, (_a.sent())];
                    case 53:
                        if (!(functionParsed.Name === 'unloaddata')) return [3, 55];
                        return [4, this.ExecuteFunctionUnloadData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 54: return [2, (_a.sent())];
                    case 55:
                        if (!(functionParsed.Name === 'createdata')) return [3, 57];
                        return [4, this.ExecuteFunctionCreateData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 56: return [2, (_a.sent())];
                    case 57:
                        if (!(functionParsed.Name === 'updatedata')) return [3, 59];
                        return [4, this.ExecuteFunctionUpdateData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 58: return [2, (_a.sent())];
                    case 59:
                        if (!(functionParsed.Name === 'reloaddata')) return [3, 61];
                        return [4, this.ExecuteFunctionReloadData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 60: return [2, (_a.sent())];
                    case 61:
                        if (!(functionParsed.Name === 'filterdata')) return [3, 63];
                        return [4, this.ExecuteFunctionFilterData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 62: return [2, (_a.sent())];
                    case 63:
                        if (!(functionParsed.Name === 'hasdatachanges')) return [3, 65];
                        return [4, this.ExecuteFunctionHasDataChanges(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 64: return [2, (_a.sent())];
                    case 65:
                        if (!(functionParsed.Name === 'acceptdatachanges')) return [3, 67];
                        return [4, this.ExecuteFunctionAcceptDataChanges(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 66: return [2, (_a.sent())];
                    case 67:
                        if (!(functionParsed.Name === 'reloadpage')) return [3, 69];
                        return [4, this.ExecuteFunctionReloadPage(sector, contextItem, element, event, functionParsed)];
                    case 68: return [2, (_a.sent())];
                    case 69:
                        if (!(functionParsed.Name === 'closepage')) return [3, 71];
                        return [4, this.ExecuteFunctionClosePage(sector, contextItem, element, event, functionParsed)];
                    case 70: return [2, (_a.sent())];
                    case 71:
                        if (!(functionParsed.Name === 'redirectpage')) return [3, 73];
                        return [4, this.ExecuteFunctionRedirectPage(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 72: return [2, (_a.sent())];
                    case 73:
                        if (!(functionParsed.Name === 'updateurl')) return [3, 75];
                        return [4, this.ExecuteFunctionUpdateURL(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 74: return [2, (_a.sent())];
                    case 75:
                        if (!(functionParsed.Name === 'updatetoken')) return [3, 77];
                        return [4, this.ExecuteFunctionUpdateToken(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 76: return [2, (_a.sent())];
                    case 77:
                        if (!(functionParsed.Name === 'cleartoken')) return [3, 79];
                        return [4, this.ExecuteFunctionClearToken(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 78: return [2, (_a.sent())];
                    case 79:
                        if (functionParsed.Name === 'hastoken')
                            return [2, (this.ExecuteFunctionHasToken(sector, contextItem, element, event, functionParsed, executionContext))];
                        if (!(functionParsed.Name === 'updatetokenantiforgery')) return [3, 81];
                        return [4, this.ExecuteFunctionUpdateTokenAntiforgery(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 80: return [2, (_a.sent())];
                    case 81:
                        if (!(functionParsed.Name === 'destroycontainer')) return [3, 83];
                        return [4, this.ExecuteFunctionDestroyContainer(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 82: return [2, (_a.sent())];
                    case 83:
                        if (!(functionParsed.Name === 'if')) return [3, 85];
                        return [4, this.ExecuteFunctionIf(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 84: return [2, (_a.sent())];
                    case 85:
                        if (!(functionParsed.Name === 'async')) return [3, 87];
                        return [4, this.ExecuteFunctionAsync(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 86: return [2, (_a.sent())];
                    case 87:
                        if (!(functionParsed.Name === 'notify')) return [3, 89];
                        return [4, this.ExecuteFunctionNotify(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 88: return [2, (_a.sent())];
                    case 89:
                        if (!(functionParsed.Name === 'focus')) return [3, 91];
                        return [4, this.ExecuteFunctionFocus(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 90: return [2, (_a.sent())];
                    case 91:
                        if (!(functionParsed.Name === 'showwindow')) return [3, 93];
                        return [4, this.ExecuteFunctionShowWindow(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 92: return [2, (_a.sent())];
                    case 93:
                        if (!(functionParsed.Name === 'closewindow')) return [3, 95];
                        return [4, this.ExecuteFunctionCloseWindow(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 94: return [2, (_a.sent())];
                    case 95:
                        if (!(functionParsed.Name === 'hidewindow')) return [3, 97];
                        return [4, this.ExecuteFunctionHideWindow(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 96: return [2, (_a.sent())];
                    case 97:
                        if (!(functionParsed.Name === 'getwindow')) return [3, 99];
                        return [4, this.ExecuteFunctionGetWindow(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 98: return [2, (_a.sent())];
                    case 99:
                        if (!(functionParsed.Name === 'setexternal')) return [3, 101];
                        return [4, this.ExecuteFunctionSetExternal(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 100: return [2, (_a.sent())];
                    case 101:
                        if (!(functionParsed.Name === 'getexternal')) return [3, 103];
                        return [4, this.ExecuteFunctionGetExternal(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 102: return [2, (_a.sent())];
                    case 103:
                        if (!(functionParsed.Name === 'setexternalframe')) return [3, 105];
                        return [4, this.ExecuteFunctionSetExternalFrame(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 104: return [2, (_a.sent())];
                    case 105:
                        if (!(functionParsed.Name === 'getexternalframe')) return [3, 107];
                        return [4, this.ExecuteFunctionGetExternalFrame(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 106: return [2, (_a.sent())];
                    case 107:
                        if (!(functionParsed.Name === 'setexternalframemessage')) return [3, 109];
                        return [4, this.ExecuteFunctionSetExternalFrameMessage(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 108: return [2, (_a.sent())];
                    case 109:
                        if (!(functionParsed.Name === 'getexternalframemessage')) return [3, 111];
                        return [4, this.ExecuteFunctionGetExternalFrameMessage(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 110: return [2, (_a.sent())];
                    case 111:
                        if (!(functionParsed.Name === 'createguid')) return [3, 113];
                        return [4, this.ExecuteFunctionCreateGuid(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 112: return [2, (_a.sent())];
                    case 113:
                        if (!(functionParsed.Name === 'createtick')) return [3, 115];
                        return [4, this.ExecuteFunctionCreateTick(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 114: return [2, (_a.sent())];
                    case 115:
                        if (!(functionParsed.Name === 'getdate')) return [3, 117];
                        return [4, this.ExecuteFunctionGetDate(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 116: return [2, (_a.sent())];
                    case 117:
                        if (!(functionParsed.Name === 'adddate')) return [3, 119];
                        return [4, this.ExecuteFunctionAddDate(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 118: return [2, (_a.sent())];
                    case 119:
                        if (!(functionParsed.Name === 'pushstack')) return [3, 121];
                        return [4, this.ExecuteFunctionPushStack(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 120: return [2, (_a.sent())];
                    case 121:
                        if (!(functionParsed.Name === 'popstack')) return [3, 123];
                        return [4, this.ExecuteFunctionPopStack(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 122: return [2, (_a.sent())];
                    case 123:
                        if (!(functionParsed.Name === 'peekstack')) return [3, 125];
                        return [4, this.ExecuteFunctionPeekStack(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 124: return [2, (_a.sent())];
                    case 125:
                        if (!(functionParsed.Name === 'execute')) return [3, 127];
                        return [4, this.ExecuteFunctionExecute(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 126: return [2, (_a.sent())];
                    case 127:
                        if (!(functionParsed.Name === 'executedataitem')) return [3, 129];
                        return [4, this.ExecuteFunctionExecuteDataItem(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 128: return [2, (_a.sent())];
                    case 129:
                        if (!(functionParsed.Name === 'executecomponentfunction')) return [3, 131];
                        return [4, this.ExecuteFunctionExecuteComponentFunction(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 130: return [2, (_a.sent())];
                    case 131:
                        if (!(functionParsed.Name === 'executeinstancefunction')) return [3, 133];
                        return [4, this.ExecuteFunctionExecuteInstanceFunction(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 132: return [2, (_a.sent())];
                    case 133:
                        if (!(functionParsed.Name === 'cast')) return [3, 135];
                        return [4, this.ExecuteFunctionCast(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 134: return [2, (_a.sent())];
                    case 135:
                        if (!(functionParsed.Name === 'encodeurl')) return [3, 137];
                        return [4, this.ExecuteFunctionEncodeUrl(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 136: return [2, (_a.sent())];
                    case 137:
                        if (!(functionParsed.Name === 'addrequestheader')) return [3, 139];
                        return [4, this.ExecuteFunctionAddRequestHeader(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 138: return [2, (_a.sent())];
                    case 139:
                        if (!(functionParsed.Name === 'getsector')) return [3, 141];
                        return [4, this.ExecuteFunctionGetSector(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 140: return [2, (_a.sent())];
                    case 141:
                        if (!(functionParsed.Name === 'getclipboard')) return [3, 143];
                        return [4, this.ExecuteFunctionGetClipboard(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 142: return [2, (_a.sent())];
                    case 143:
                        if (!(functionParsed.Name === 'setclipboard')) return [3, 145];
                        return [4, this.ExecuteFunctionSetClipboard(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 144: return [2, (_a.sent())];
                    case 145:
                        if (!(functionParsed.Name === 'createtimer')) return [3, 147];
                        return [4, this.ExecuteFunctionCreateTimer(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 146: return [2, (_a.sent())];
                    case 147:
                        if (!(functionParsed.Name === 'createreference')) return [3, 149];
                        return [4, this.ExecuteFunctionCreateReference(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 148: return [2, (_a.sent())];
                    case 149:
                        if (!(functionParsed.Name === 'wait')) return [3, 151];
                        return [4, this.ExecuteFunctionWait(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 150: return [2, (_a.sent())];
                    case 151:
                        if (!(functionParsed.Name === 'executevalidation')) return [3, 153];
                        return [4, this.ExecuteFunctionExecuteValidation(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 152: return [2, (_a.sent())];
                    case 153:
                        if (!(functionParsed.Name === 'clearvalidation')) return [3, 155];
                        return [4, this.ExecuteFunctionClearValidation(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 154: return [2, (_a.sent())];
                    case 155:
                        if (!(functionParsed.Name === 'downloaddata')) return [3, 157];
                        return [4, this.ExecuteFunctionDownloadData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 156: return [2, (_a.sent())];
                    case 157:
                        if (!(functionParsed.Name === 'detectview')) return [3, 159];
                        return [4, this.ExecuteFunctionDetectView(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 158: return [2, (_a.sent())];
                    case 159:
                        if (!(functionParsed.Name === 'setconfig')) return [3, 161];
                        return [4, this.ExecuteFunctionSetConfig(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 160: return [2, (_a.sent())];
                    case 161:
                        if (!(functionParsed.Name === 'getconfig')) return [3, 163];
                        return [4, this.ExecuteFunctionGetConfig(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 162: return [2, (_a.sent())];
                    case 163:
                        if (!(functionParsed.Name === 'lockplumber')) return [3, 165];
                        return [4, this.ExecuteFunctionLockPlumber(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 164: return [2, (_a.sent())];
                    case 165:
                        if (!(functionParsed.Name === 'unlockplumber')) return [3, 167];
                        return [4, this.ExecuteFunctionUnlockPlumber(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 166: return [2, (_a.sent())];
                    case 167:
                        if (!(functionParsed.Name === 'lockdata')) return [3, 169];
                        return [4, this.ExecuteFunctionLockData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 168: return [2, (_a.sent())];
                    case 169:
                        if (!(functionParsed.Name === 'unlockdata')) return [3, 171];
                        return [4, this.ExecuteFunctionUnlockData(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 170: return [2, (_a.sent())];
                    case 171:
                        if (!(functionParsed.Name === 'clearplumber')) return [3, 173];
                        return [4, this.ExecuteFunctionClearPlumber(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 172: return [2, (_a.sent())];
                    case 173:
                        if (!(functionParsed.Name === 'debugger')) return [3, 175];
                        return [4, this.ExecuteFunctionDebugger(sector, contextItem, element, event, functionParsed, executionContext)];
                    case 174: return [2, (_a.sent())];
                    case 175:
                        if (!checkInvalidFunction)
                            return [2, (null)];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoFunctionHandler - ExecuteFunction - Invalid Function - {0}', functionParsed.Name)];
                    case 176:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionExternal = function (contextItem, element, event, functionParsed) {
        return ('');
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionSetExternal = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var externalFunction, dataKey, isCloneText, isClone, _a, data, windowFunction;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        externalFunction = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        dataKey = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        isCloneText = _b.sent();
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 4];
                        _a = false;
                        return [3, 6];
                    case 4: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 5:
                        _a = _b.sent();
                        _b.label = 6;
                    case 6:
                        isClone = _a;
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 7:
                        data = _b.sent();
                        windowFunction = window[externalFunction];
                        if (typeof windowFunction !== 'function')
                            return [2, ('')];
                        windowFunction(isClone ? this.Application.Solver.Clone(data, true) : data);
                        return [2];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetExternal = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var externalFunction, dataKey, isCloneText, isClone, _a, windowFunction, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        externalFunction = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        dataKey = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        isCloneText = _b.sent();
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 4];
                        _a = false;
                        return [3, 6];
                    case 4: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 5:
                        _a = _b.sent();
                        _b.label = 6;
                    case 6:
                        isClone = _a;
                        windowFunction = window[externalFunction];
                        if (typeof windowFunction !== 'function')
                            return [2, ('')];
                        data = windowFunction();
                        return [4, this.Application.Storage.UpdateData(dataKey, sector, isClone ? this.Application.Solver.Clone(data, true) : data)];
                    case 7:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionSetExternalFrame = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var frameID, externalFunction, dataKey, isCloneText, isClone, _a, data, frame, frameContent, application, windowFunction, eventType, eventNamespace_1, elFrame_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        frameID = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        externalFunction = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        dataKey = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 4:
                        isCloneText = _b.sent();
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 5];
                        _a = false;
                        return [3, 7];
                    case 5: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 6:
                        _a = _b.sent();
                        _b.label = 7;
                    case 7:
                        isClone = _a;
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 8:
                        data = _b.sent();
                        frame = document.getElementById(frameID);
                        if (frame == null)
                            return [2, ('')];
                        frameContent = (frame.contentWindow || frame.contentDocument);
                        application = this.Application;
                        windowFunction = frameContent[externalFunction];
                        if (typeof windowFunction !== 'function') {
                            eventType = 'load';
                            eventNamespace_1 = this.Application.EventHandler.CreateEventNamespace(null, null, eventType);
                            elFrame_1 = frame;
                            this.Application.EventHandler.AttachEventListener(elFrame_1, eventType, eventNamespace_1, function () {
                                windowFunction = frameContent[externalFunction];
                                if (typeof windowFunction !== 'function')
                                    return ('');
                                application.EventHandler.DetachEventListener(elFrame_1, eventNamespace_1);
                                windowFunction(isClone ? application.Solver.Clone(data, true) : data);
                            });
                        }
                        else {
                            windowFunction(isClone ? this.Application.Solver.Clone(data, true) : data);
                        }
                        return [2];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetExternalFrame = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var frameID, externalFunction, dataKey, isCloneText, isClone, _a, frame, frameContent, windowFunction, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        frameID = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        externalFunction = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        dataKey = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 4:
                        isCloneText = _b.sent();
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 5];
                        _a = false;
                        return [3, 7];
                    case 5: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 6:
                        _a = _b.sent();
                        _b.label = 7;
                    case 7:
                        isClone = _a;
                        frame = document.getElementById(frameID);
                        if (frame == null)
                            return [2, ('')];
                        frameContent = (frame.contentWindow || frame.contentDocument);
                        windowFunction = frameContent[externalFunction];
                        if (typeof windowFunction !== 'function')
                            return [2, ('')];
                        data = windowFunction();
                        return [4, this.Application.Storage.UpdateData(dataKey, sector, isClone ? this.Application.Solver.Clone(data, true) : data)];
                    case 8:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionSetExternalFrameMessage = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var frameID, externalFunction, dataKey, isCloneText, isClone, _a, data, frame, frameContent, message, application, eventType, eventNamespace, elFrame;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        frameID = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        externalFunction = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        dataKey = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 4:
                        isCloneText = _b.sent();
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 5];
                        _a = false;
                        return [3, 7];
                    case 5: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 6:
                        _a = _b.sent();
                        _b.label = 7;
                    case 7:
                        isClone = _a;
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 8:
                        data = _b.sent();
                        frame = document.getElementById(frameID);
                        if (frame == null)
                            return [2, ('')];
                        frameContent = (frame.contentWindow || frame.contentDocument);
                        message = new DrapoMessage();
                        message.Action = 'set';
                        message.DataKey = dataKey;
                        message.Tag = externalFunction;
                        message.Data = isClone ? this.Application.Solver.Clone(data, true) : data;
                        application = this.Application;
                        eventType = 'load';
                        eventNamespace = this.Application.EventHandler.CreateEventNamespace(null, null, eventType);
                        elFrame = frame;
                        this.Application.EventHandler.AttachEventListener(elFrame, eventType, eventNamespace, function () {
                            application.EventHandler.DetachEventListener(elFrame, eventNamespace);
                            frameContent.postMessage(message, "*");
                        });
                        return [2];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetExternalFrameMessage = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var frameID, externalFunction, dataKey, isCloneText, isClone, _a, frame, frameContent, message, messagePost, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        frameID = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        externalFunction = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        dataKey = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 4:
                        isCloneText = _b.sent();
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 5];
                        _a = false;
                        return [3, 7];
                    case 5: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 6:
                        _a = _b.sent();
                        _b.label = 7;
                    case 7:
                        isClone = _a;
                        frame = document.getElementById(frameID);
                        if (frame == null)
                            return [2, ('')];
                        frameContent = (frame.contentWindow || frame.contentDocument);
                        message = new DrapoMessage();
                        message.Action = 'get';
                        message.DataKey = dataKey;
                        message.Tag = externalFunction;
                        message.Data = null;
                        this.Application.Document.Message = null;
                        frameContent.postMessage(message, "*");
                        return [4, this.Application.Document.WaitForMessage()];
                    case 8:
                        messagePost = _b.sent();
                        data = messagePost != null ? messagePost._data : [];
                        return [4, this.Application.Storage.UpdateData(dataKey, sector, isClone ? this.Application.Solver.Clone(data, true) : data)];
                    case 9:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionToggleItemField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, notifyText, notify, _a, stateAny, state, stateUpdated;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataPath = this.Application.Parser.ParseMustache(functionParsed.Parameters[0]);
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 4:
                        stateAny = _b.sent();
                        state = this.Application.Solver.ResolveConditionalBoolean(((stateAny == null) || ((typeof stateAny) === 'string')) ? stateAny : stateAny.toString());
                        stateUpdated = !state;
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, stateUpdated, notify)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionToggleData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var source, isSourceMustache, mustacheParts, dataKey, itemText, item, dataPath, dataItem, itemPath, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        source = functionParsed.Parameters[0];
                        isSourceMustache = this.Application.Parser.IsMustache(source);
                        mustacheParts = isSourceMustache ? this.Application.Parser.ParseMustache(source) : null;
                        dataKey = mustacheParts != null ? this.Application.Solver.ResolveDataKey(mustacheParts) : source;
                        itemText = functionParsed.Parameters[1];
                        item = null;
                        if (!this.Application.Parser.IsMustache(itemText)) return [3, 2];
                        dataPath = this.Application.Parser.ParseMustache(itemText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 1:
                        item = _b.sent();
                        return [3, 7];
                    case 2:
                        if (!this.Application.Storage.IsDataKey(itemText, sector)) return [3, 4];
                        return [4, this.Application.Storage.RetrieveDataItem(itemText, sector)];
                    case 3:
                        dataItem = _b.sent();
                        if (dataItem != null)
                            item = dataItem.Data;
                        return [3, 7];
                    case 4:
                        if (!(contextItem == null)) return [3, 5];
                        item = itemText;
                        return [3, 7];
                    case 5:
                        itemPath = [];
                        itemPath.push(itemText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, itemPath)];
                    case 6:
                        item = _b.sent();
                        _b.label = 7;
                    case 7:
                        if (item == null)
                            return [2, (null)];
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 8];
                        _a = true;
                        return [3, 10];
                    case 8: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 9:
                        _a = _b.sent();
                        _b.label = 10;
                    case 10:
                        notify = _a;
                        return [4, this.Application.Storage.ToggleData(dataKey, mustacheParts, sector, item, notify)];
                    case 11:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUncheckItemField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataPath = this.Application.Parser.ParseMustache(functionParsed.Parameters[0]);
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, false)];
                    case 1:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearItemField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataPath = this.Application.Parser.ParseMustache(functionParsed.Parameters[0]);
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, null, notify)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateItemField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, i, dataPathValue, dataPathValueResolved, recursiveText, _a, recursive, _b, resolveText, _c, resolve, _d, item, _e, notifyText, notify, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        dataPath = this.Application.Parser.ParseMustache(functionParsed.Parameters[0]);
                        i = 0;
                        _g.label = 1;
                    case 1:
                        if (!(i < dataPath.length)) return [3, 4];
                        dataPathValue = dataPath[i];
                        if (!this.Application.Parser.HasMustache(dataPathValue))
                            return [3, 3];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, dataPathValue)];
                    case 2:
                        dataPathValueResolved = _g.sent();
                        if (dataPathValue !== dataPathValueResolved)
                            dataPath[i] = dataPathValueResolved;
                        _g.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        if (!(functionParsed.Parameters.length > 3)) return [3, 6];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 5:
                        _a = _g.sent();
                        return [3, 7];
                    case 6:
                        _a = null;
                        _g.label = 7;
                    case 7:
                        recursiveText = _a;
                        if (!((recursiveText == null) || (recursiveText == ''))) return [3, 8];
                        _b = false;
                        return [3, 10];
                    case 8: return [4, this.Application.Solver.ResolveConditional(recursiveText)];
                    case 9:
                        _b = _g.sent();
                        _g.label = 10;
                    case 10:
                        recursive = _b;
                        if (!(functionParsed.Parameters.length > 4)) return [3, 12];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[4])];
                    case 11:
                        _c = _g.sent();
                        return [3, 13];
                    case 12:
                        _c = null;
                        _g.label = 13;
                    case 13:
                        resolveText = _c;
                        if (!((resolveText == null) || (resolveText == ''))) return [3, 14];
                        _d = true;
                        return [3, 16];
                    case 14: return [4, this.Application.Solver.ResolveConditional(resolveText)];
                    case 15:
                        _d = _g.sent();
                        _g.label = 16;
                    case 16:
                        resolve = _d;
                        if (!resolve) return [3, 18];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1], true, true, recursive)];
                    case 17:
                        _e = _g.sent();
                        return [3, 19];
                    case 18:
                        _e = functionParsed.Parameters[1];
                        _g.label = 19;
                    case 19:
                        item = _e;
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 20];
                        _f = true;
                        return [3, 22];
                    case 20: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 21:
                        _f = _g.sent();
                        _g.label = 22;
                    case 22:
                        notify = _f;
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, item, notify)];
                    case 23:
                        _g.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCheckDataField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataFields, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        return [4, this.ResolveFunctionParameterDataFields(sector, contextItem, element, functionParsed.Parameters[1], executionContext)];
                    case 1:
                        dataFields = _b.sent();
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 2];
                        _a = true;
                        return [3, 4];
                    case 2: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        notify = _a;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, true, notify)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUncheckDataField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataFields, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        return [4, this.ResolveFunctionParameterDataFields(sector, contextItem, element, functionParsed.Parameters[1], executionContext)];
                    case 1:
                        dataFields = _b.sent();
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 2];
                        _a = true;
                        return [3, 4];
                    case 2: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        notify = _a;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, false, notify)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearDataField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataFields, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        return [4, this.ResolveFunctionParameterDataFields(sector, contextItem, element, functionParsed.Parameters[1], executionContext)];
                    case 1:
                        dataFields = _b.sent();
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 2];
                        _a = true;
                        return [3, 4];
                    case 2: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        notify = _a;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, null, notify)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateDataField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataFields, recursiveText, _a, recursive, _b, resolveText, _c, resolve, _d, value, _e, notifyText, _f, notify, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        dataKey = _h.sent();
                        return [4, this.ResolveFunctionParameterDataFields(sector, contextItem, element, functionParsed.Parameters[1], executionContext)];
                    case 2:
                        dataFields = _h.sent();
                        if (!(functionParsed.Parameters.length > 4)) return [3, 4];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[4])];
                    case 3:
                        _a = _h.sent();
                        return [3, 5];
                    case 4:
                        _a = null;
                        _h.label = 5;
                    case 5:
                        recursiveText = _a;
                        if (!((recursiveText == null) || (recursiveText == ''))) return [3, 6];
                        _b = false;
                        return [3, 8];
                    case 6: return [4, this.Application.Solver.ResolveConditional(recursiveText)];
                    case 7:
                        _b = _h.sent();
                        _h.label = 8;
                    case 8:
                        recursive = _b;
                        if (!(functionParsed.Parameters.length > 5)) return [3, 10];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[5])];
                    case 9:
                        _c = _h.sent();
                        return [3, 11];
                    case 10:
                        _c = null;
                        _h.label = 11;
                    case 11:
                        resolveText = _c;
                        if (!((resolveText == null) || (resolveText == ''))) return [3, 12];
                        _d = true;
                        return [3, 14];
                    case 12: return [4, this.Application.Solver.ResolveConditional(resolveText)];
                    case 13:
                        _d = _h.sent();
                        _h.label = 14;
                    case 14:
                        resolve = _d;
                        if (!resolve) return [3, 16];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2], true, true, recursive)];
                    case 15:
                        _e = _h.sent();
                        return [3, 17];
                    case 16:
                        _e = functionParsed.Parameters[2];
                        _h.label = 17;
                    case 17:
                        value = _e;
                        if (!(functionParsed.Parameters.length > 3)) return [3, 19];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 18:
                        _f = _h.sent();
                        return [3, 20];
                    case 19:
                        _f = null;
                        _h.label = 20;
                    case 20:
                        notifyText = _f;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 21];
                        _g = true;
                        return [3, 23];
                    case 21: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 22:
                        _g = _h.sent();
                        _h.label = 23;
                    case 23:
                        notify = _g;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, value, notify)];
                    case 24:
                        _h.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateDataFieldLookup = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataFieldSeek, valueSeek, dataField, valueText, value, dataPath, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        dataKey = _c.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        dataFieldSeek = _c.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        valueSeek = _c.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 4:
                        dataField = _c.sent();
                        valueText = functionParsed.Parameters[4];
                        value = null;
                        if (!this.Application.Parser.IsMustache(valueText)) return [3, 6];
                        dataPath = this.Application.Parser.ParseMustache(valueText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 5:
                        value = _c.sent();
                        return [3, 7];
                    case 6:
                        value = valueText;
                        _c.label = 7;
                    case 7:
                        if (!(functionParsed.Parameters.length > 3)) return [3, 9];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[5])];
                    case 8:
                        _a = _c.sent();
                        return [3, 10];
                    case 9:
                        _a = null;
                        _c.label = 10;
                    case 10:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 11];
                        _b = true;
                        return [3, 13];
                    case 11: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 12:
                        _b = _c.sent();
                        _c.label = 13;
                    case 13:
                        notify = _b;
                        return [4, this.Application.Storage.UpdateDataFieldLookup(dataKey, sector, dataFieldSeek, valueSeek, dataField, value, notify)];
                    case 14:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCheckItemField = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, notifyText, nofity, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataPath = this.Application.Parser.ParseMustache(functionParsed.Parameters[0]);
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        nofity = _a;
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, true, nofity)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionMoveItem = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var key, rangeIndex, notifyText, notify, _a, dataItem, index;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        key = _b.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        rangeIndex = _b.sent();
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 3];
                        _a = true;
                        return [3, 5];
                    case 3: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        notify = _a;
                        return [4, this.Application.Storage.RetrieveDataItem(contextItem.DataKey, sector)];
                    case 6:
                        dataItem = _b.sent();
                        if (dataItem == null)
                            return [2, ('')];
                        index = this.Application.ControlFlow.GetRangeIndex(dataItem.Data, rangeIndex);
                        return [4, this.Application.Storage.MoveDataIndex(contextItem.DataKey, sector, contextItem.Data, index, notify)];
                    case 7:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateDataUrl = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataUrl, elDataKey, dataUrlCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        dataUrl = functionParsed.Parameters[1];
                        elDataKey = this.Application.Searcher.FindByAttributeAndValue('d-dataKey', dataKey);
                        if (elDataKey == null)
                            return [2, ('')];
                        dataUrlCurrent = elDataKey.getAttribute('d-dataUrlGet');
                        if (dataUrl === dataUrlCurrent)
                            return [2, ('')];
                        elDataKey.setAttribute('d-dataUrlGet', dataUrl);
                        return [4, this.Application.Storage.DiscardCacheData(dataKey, sector)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.Observer.Notify(dataKey, null, null)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateDataUrlSet = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataUrl, elDataKey, dataUrlCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 1:
                        dataUrl = _a.sent();
                        elDataKey = this.Application.Searcher.FindByAttributeAndValue('d-dataKey', dataKey);
                        if (elDataKey == null)
                            return [2, ('')];
                        dataUrlCurrent = elDataKey.getAttribute('d-dataUrlSet');
                        if (dataUrl === dataUrlCurrent)
                            return [2, ('')];
                        elDataKey.setAttribute('d-dataUrlSet', dataUrl);
                        return [4, this.Application.Storage.DiscardCacheData(dataKey, sector)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionAddDataItem = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var source, isSourceMustache, mustacheParts, dataKey, itemText, item, dataPath, dataItem, itemPath, notifyText, notify, _a, isCloneText, isClone, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        source = functionParsed.Parameters[0];
                        isSourceMustache = this.Application.Parser.IsMustache(source);
                        mustacheParts = isSourceMustache ? this.Application.Parser.ParseMustache(source) : null;
                        dataKey = mustacheParts != null ? this.Application.Solver.ResolveDataKey(mustacheParts) : source;
                        itemText = functionParsed.Parameters[1];
                        item = null;
                        if (!this.Application.Parser.IsMustache(itemText)) return [3, 2];
                        dataPath = this.Application.Parser.ParseMustache(itemText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 1:
                        item = _c.sent();
                        return [3, 7];
                    case 2:
                        if (!this.Application.Storage.IsDataKey(itemText, sector)) return [3, 4];
                        return [4, this.Application.Storage.RetrieveDataItem(itemText, sector)];
                    case 3:
                        dataItem = _c.sent();
                        if (dataItem != null)
                            item = dataItem.Data;
                        return [3, 7];
                    case 4:
                        if (!(contextItem == null)) return [3, 5];
                        item = itemText;
                        return [3, 7];
                    case 5:
                        itemPath = [];
                        itemPath.push(itemText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, itemPath)];
                    case 6:
                        item = _c.sent();
                        _c.label = 7;
                    case 7:
                        if (item == null)
                            return [2, (null)];
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 8];
                        _a = true;
                        return [3, 10];
                    case 8: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 9:
                        _a = _c.sent();
                        _c.label = 10;
                    case 10:
                        notify = _a;
                        isCloneText = functionParsed.Parameters[3];
                        if (!((isCloneText == null) || (isCloneText == ''))) return [3, 11];
                        _b = true;
                        return [3, 13];
                    case 11: return [4, this.Application.Solver.ResolveConditional(isCloneText)];
                    case 12:
                        _b = _c.sent();
                        _c.label = 13;
                    case 13:
                        isClone = _b;
                        return [4, this.Application.Storage.AddDataItem(dataKey, mustacheParts, sector, isClone ? this.Application.Solver.Clone(item) : item, notify)];
                    case 14:
                        _c.sent();
                        return [2];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionRemoveDataItem = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var source, isSourceMustache, mustacheParts, dataKey, itemText, itemPath, item, notifyText, notify, _a, deleted;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        source = functionParsed.Parameters[0];
                        isSourceMustache = this.Application.Parser.IsMustache(source);
                        mustacheParts = isSourceMustache ? this.Application.Parser.ParseMustache(source) : null;
                        dataKey = mustacheParts != null ? this.Application.Solver.ResolveDataKey(mustacheParts) : source;
                        itemText = functionParsed.Parameters[1];
                        itemPath = [];
                        if (this.Application.Parser.IsMustache(itemText)) {
                            itemPath = this.Application.Parser.ParseMustache(itemText);
                        }
                        else {
                            itemPath.push(itemText);
                        }
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, itemPath)];
                    case 1:
                        item = _b.sent();
                        if (item == null)
                            return [2, (null)];
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 2];
                        _a = true;
                        return [3, 4];
                    case 2: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        notify = _a;
                        return [4, this.Application.Storage.DeleteDataItem(dataKey, mustacheParts, sector, item, notify)];
                    case 5:
                        deleted = _b.sent();
                        if (!deleted)
                            return [2, (null)];
                        return [2];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionRemoveDataItemLookup = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, dataFieldSeek, valueSeek, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dataPath = functionParsed.Parameters[0];
                        return [4, this.ResolveFunctionParameterDataFields(sector, contextItem, element, functionParsed.Parameters[1], executionContext)];
                    case 1:
                        dataFieldSeek = _c.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 2:
                        valueSeek = _c.sent();
                        if (!(functionParsed.Parameters.length > 3)) return [3, 4];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 3:
                        _a = _c.sent();
                        return [3, 5];
                    case 4:
                        _a = null;
                        _c.label = 5;
                    case 5:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 6];
                        _b = true;
                        return [3, 8];
                    case 6: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 7:
                        _b = _c.sent();
                        _c.label = 8;
                    case 8:
                        notify = _b;
                        return [4, this.Application.Storage.RemoveDataItemLookup(dataPath, sector, dataFieldSeek, valueSeek, notify)];
                    case 9:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionContainsDataItem = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItemText, dataItemPath, item, dataContainerText, dataContainerPath, dataKeyContainer, storageItem, contextContainer, i, dataContainer, containerItem, itemContainer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataItemText = functionParsed.Parameters[1];
                        dataItemPath = [];
                        if (this.Application.Parser.IsMustache(dataItemText)) {
                            dataItemPath = this.Application.Parser.ParseMustache(dataItemText);
                        }
                        else {
                            dataItemPath.push(dataItemText);
                        }
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataItemPath)];
                    case 1:
                        item = _a.sent();
                        dataContainerText = functionParsed.Parameters[0];
                        dataContainerPath = [];
                        if (this.Application.Parser.IsMustache(dataContainerText)) {
                            dataContainerPath = this.Application.Parser.ParseMustache(dataContainerText);
                        }
                        else {
                            dataContainerPath.push(dataContainerText);
                        }
                        dataKeyContainer = dataContainerPath[0];
                        return [4, this.Application.Storage.RetrieveDataItem(dataKeyContainer, sector)];
                    case 2:
                        storageItem = _a.sent();
                        if (storageItem == null)
                            return [2, ('false')];
                        contextContainer = new DrapoContext();
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < storageItem.Data.length)) return [3, 6];
                        dataContainer = storageItem.Data[i];
                        containerItem = contextContainer.Create(dataContainer, null, null, dataKeyContainer, dataKeyContainer, null, i);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, containerItem, dataContainerPath)];
                    case 4:
                        itemContainer = _a.sent();
                        if (item == itemContainer)
                            return [2, ('true')];
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3, 3];
                    case 6: return [2, ('false')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateSector = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var title, canRouteText, canRoute, _a, canLoadDefaultSectorsText, canLoadDefaultSectors, _b, containerText, container, dataPath, item, sectorName, url;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        title = null;
                        if (!(functionParsed.Parameters.length >= 3)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 1:
                        title = _c.sent();
                        _c.label = 2;
                    case 2:
                        canRouteText = functionParsed.Parameters[3];
                        if (!((canRouteText == null) || (canRouteText == ''))) return [3, 3];
                        _a = true;
                        return [3, 5];
                    case 3: return [4, this.Application.Solver.ResolveConditional(canRouteText)];
                    case 4:
                        _a = _c.sent();
                        _c.label = 5;
                    case 5:
                        canRoute = _a;
                        canLoadDefaultSectorsText = functionParsed.Parameters.length >= 4 ? functionParsed.Parameters[4] : null;
                        if (!((canLoadDefaultSectorsText == null) || (canLoadDefaultSectorsText == ''))) return [3, 6];
                        _b = false;
                        return [3, 8];
                    case 6: return [4, this.Application.Solver.ResolveConditional(canLoadDefaultSectorsText)];
                    case 7:
                        _b = _c.sent();
                        _c.label = 8;
                    case 8:
                        canLoadDefaultSectors = _b;
                        containerText = functionParsed.Parameters.length >= 5 ? functionParsed.Parameters[5] : null;
                        container = null;
                        if (!(containerText !== null)) return [3, 13];
                        if (!this.Application.Parser.IsMustache(containerText)) return [3, 12];
                        dataPath = this.Application.Parser.ParseMustache(containerText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 9:
                        item = _c.sent();
                        if (!((item === null) || (item === ''))) return [3, 11];
                        item = this.Application.Document.CreateGuid();
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, item)];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11:
                        container = item.toString();
                        return [3, 13];
                    case 12:
                        container = containerText;
                        _c.label = 13;
                    case 13: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 14:
                        sectorName = _c.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 15:
                        url = _c.sent();
                        this.Application.Document.StartUpdate(sectorName);
                        return [4, this.Application.Document.LoadChildSector(sectorName, url, title, canRoute, canLoadDefaultSectors, container)];
                    case 16:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionSwitchSector = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorName, container;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        sectorName = _a.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        container = _a.sent();
                        return [4, this.Application.SectorContainerHandler.Switch(sectorName, container)];
                    case 3:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionReloadSector = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorName, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        sectorName = _a.sent();
                        url = this.Application.Router.GetLastRouteUrlBySector(sectorName);
                        if (url == null)
                            return [2, ('')];
                        this.Application.Document.StartUpdate(sectorName);
                        return [4, this.Application.Document.LoadChildSector(sectorName, url)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearSector = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        sectorName = _a.sent();
                        this.Application.Document.StartUpdate(sectorName);
                        return [4, this.Application.SectorContainerHandler.Switch(sectorName, null)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionLoadSectorContent = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorName, content, contentText;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        sectorName = _a.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        content = _a.sent();
                        contentText = this.Application.Serializer.SerializeObject(content);
                        this.Application.Document.StartUpdate(sectorName);
                        return [4, this.Application.Document.LoadChildSectorContent(sectorName, contentText)];
                    case 3:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Storage.ClearData(dataKey, sector, notify)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUnloadData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Storage.UnloadData(dataKey, sector)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCreateData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, notifyText, notify, _a, object, i, windowParameter, key, _b, value, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _d.sent();
                        _d.label = 3;
                    case 3:
                        notify = _a;
                        object = {};
                        i = 2;
                        _d.label = 4;
                    case 4:
                        if (!(i < functionParsed.Parameters.length - 1)) return [3, 12];
                        windowParameter = [null, null];
                        if (!(contextItem != null)) return [3, 6];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i])];
                    case 5:
                        _b = _d.sent();
                        return [3, 7];
                    case 6:
                        _b = functionParsed.Parameters[i];
                        _d.label = 7;
                    case 7:
                        key = _b;
                        if (!(contextItem != null)) return [3, 9];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i + 1])];
                    case 8:
                        _c = _d.sent();
                        return [3, 10];
                    case 9:
                        _c = functionParsed.Parameters[i + 1];
                        _d.label = 10;
                    case 10:
                        value = _c;
                        object[key] = value;
                        _d.label = 11;
                    case 11:
                        i = i + 2;
                        return [3, 4];
                    case 12: return [4, this.Application.Storage.UpdateData(dataKey, sector, object, notify)];
                    case 13:
                        _d.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, recursiveText, _a, recursive, _b, resolveText, _c, resolve, _d, value, dataSource, _e, data, notifyText, notify, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        if (!(functionParsed.Parameters.length > 3)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 1:
                        _a = _g.sent();
                        return [3, 3];
                    case 2:
                        _a = null;
                        _g.label = 3;
                    case 3:
                        recursiveText = _a;
                        if (!((recursiveText == null) || (recursiveText == ''))) return [3, 4];
                        _b = true;
                        return [3, 6];
                    case 4: return [4, this.Application.Solver.ResolveConditional(recursiveText)];
                    case 5:
                        _b = _g.sent();
                        _g.label = 6;
                    case 6:
                        recursive = _b;
                        if (!(functionParsed.Parameters.length > 4)) return [3, 8];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[4])];
                    case 7:
                        _c = _g.sent();
                        return [3, 9];
                    case 8:
                        _c = null;
                        _g.label = 9;
                    case 9:
                        resolveText = _c;
                        if (!((resolveText == null) || (resolveText == ''))) return [3, 10];
                        _d = true;
                        return [3, 12];
                    case 10: return [4, this.Application.Solver.ResolveConditional(resolveText)];
                    case 11:
                        _d = _g.sent();
                        _g.label = 12;
                    case 12:
                        resolve = _d;
                        value = functionParsed.Parameters[1];
                        if (!resolve) return [3, 14];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, value, true, recursive)];
                    case 13:
                        _e = _g.sent();
                        return [3, 15];
                    case 14:
                        _e = value;
                        _g.label = 15;
                    case 15:
                        dataSource = _e;
                        data = this.Application.Solver.Clone(dataSource, true);
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 16];
                        _f = true;
                        return [3, 18];
                    case 16: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 17:
                        _f = _g.sent();
                        _g.label = 18;
                    case 18:
                        notify = _f;
                        return [4, this.Application.Storage.UpdateData(dataKey, sector, data, notify)];
                    case 19:
                        _g.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionReloadData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Storage.ReloadData(dataKey, sector, notify)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionFilterData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var forText, ifText, dataKeyDestination, notifyText, notify, _a, hasIfText, parsedFor, context, key, dataKeyIteratorRange, range, dataKeyIterator, dataKey, dataKeyIteratorParts, dataItem, datasFiltered, datas, j, data, item, conditional;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (functionParsed.Parameters.length < 3)
                            return [2, ('')];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        forText = _b.sent();
                        ifText = functionParsed.Parameters[1];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 2:
                        dataKeyDestination = _b.sent();
                        notifyText = functionParsed.Parameters[3];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 3];
                        _a = true;
                        return [3, 5];
                    case 3: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        notify = _a;
                        hasIfText = (ifText != null);
                        parsedFor = this.Application.Parser.ParseFor(forText);
                        if (parsedFor == null)
                            return [2, ('')];
                        context = new DrapoContext();
                        key = parsedFor[0];
                        dataKeyIteratorRange = parsedFor[2];
                        range = this.Application.ControlFlow.GetIteratorRange(dataKeyIteratorRange);
                        dataKeyIterator = range == null ? dataKeyIteratorRange : this.Application.ControlFlow.CleanIteratorRange(dataKeyIteratorRange);
                        dataKey = dataKeyIterator;
                        dataKeyIteratorParts = this.Application.Parser.ParseForIterable(dataKeyIterator);
                        return [4, this.Application.Storage.Retrieve(dataKey, sector, context, dataKeyIteratorParts)];
                    case 6:
                        dataItem = _b.sent();
                        if (dataItem == null)
                            return [2, ('')];
                        datasFiltered = [];
                        datas = dataItem.Data;
                        if (datas == null)
                            return [2, ('')];
                        if (!datas.length)
                            datas = this.Application.Solver.TransformObjectIntoArray(datas);
                        if (range !== null)
                            datas = this.Application.ControlFlow.ApplyRange(datas, range);
                        if ((datas.length !== null) && (datas.length === 0))
                            return [2, ('')];
                        j = 0;
                        _b.label = 7;
                    case 7:
                        if (!(j < datas.length)) return [3, 11];
                        data = datas[j];
                        item = context.Create(data, null, null, dataKey, key, null, j);
                        if (!hasIfText) return [3, 9];
                        return [4, this.Application.Solver.ResolveConditional(ifText, null, sector, context)];
                    case 8:
                        conditional = _b.sent();
                        if (!conditional) {
                            context.Pop();
                            return [3, 10];
                        }
                        _b.label = 9;
                    case 9:
                        datasFiltered.push(data);
                        _b.label = 10;
                    case 10:
                        j++;
                        return [3, 7];
                    case 11: return [4, this.Application.Storage.UpdateData(dataKeyDestination, sector, datasFiltered, notify)];
                    case 12:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionHasDataChanges = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var parameterSector, _a, parameterDataKeyOrDataGroup, _b, storageItems, i, storageItem;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(functionParsed.Parameters.length <= 0)) return [3, 1];
                        _a = null;
                        return [3, 3];
                    case 1: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 2:
                        _a = _c.sent();
                        _c.label = 3;
                    case 3:
                        parameterSector = _a;
                        if (parameterSector === '=')
                            parameterSector = sector;
                        if (!(functionParsed.Parameters.length <= 1)) return [3, 4];
                        _b = null;
                        return [3, 6];
                    case 4: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        parameterDataKeyOrDataGroup = _b;
                        storageItems = this.Application.Storage.RetrieveStorageItemsCached(parameterSector, parameterDataKeyOrDataGroup);
                        for (i = 0; i < storageItems.length; i++) {
                            storageItem = storageItems[i];
                            if (storageItem.HasChanges)
                                return [2, ('true')];
                        }
                        return [2, ('false')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionAcceptDataChanges = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var parameterSector, _a, parameterDataKeyOrDataGroup, _b, storageItems, i, storageItem;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(functionParsed.Parameters.length <= 0)) return [3, 1];
                        _a = null;
                        return [3, 3];
                    case 1: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 2:
                        _a = _c.sent();
                        _c.label = 3;
                    case 3:
                        parameterSector = _a;
                        if (parameterSector === '=')
                            parameterSector = sector;
                        if (!(functionParsed.Parameters.length <= 1)) return [3, 4];
                        _b = null;
                        return [3, 6];
                    case 4: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        parameterDataKeyOrDataGroup = _b;
                        storageItems = this.Application.Storage.RetrieveStorageItemsCached(parameterSector, parameterDataKeyOrDataGroup);
                        for (i = 0; i < storageItems.length; i++) {
                            storageItem = storageItems[i];
                            if (storageItem.HasChanges)
                                storageItem.HasChanges = false;
                        }
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionPostData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataKeyResponse, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        dataKeyResponse = functionParsed.Parameters[1];
                        if (dataKeyResponse == null)
                            dataKeyResponse = dataKey;
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Storage.PostData(dataKey, sector, dataKeyResponse, notify, executionContext)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionPostDataItem = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataKeyResponse, notifyText, notify, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataKey = functionParsed.Parameters[0];
                        dataKeyResponse = functionParsed.Parameters[1];
                        if (dataKeyResponse == null)
                            dataKeyResponse = dataKey;
                        notifyText = functionParsed.Parameters[2];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Storage.PostDataItem(dataKey, sector, dataKeyResponse, notify, executionContext)];
                    case 4:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionReloadPage = function (sector, contextItem, element, event, functionParsed) {
        window.location.reload();
        return ('');
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClosePage = function (sector, contextItem, element, event, functionParsed) {
        window.location.href = "about:blank";
        return ('');
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionRedirectPage = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var url, urlResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        url = _a.sent();
                        urlResolved = this.Application.Server.ResolveUrl(url);
                        window.location.href = urlResolved;
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateURL = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        url = _a.sent();
                        return [4, this.Application.Router.UpdateURL(url)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateToken = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        token = _a.sent();
                        return [4, this.Application.Server.SetToken(token)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearToken = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Server.SetToken(null)];
                    case 1:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionHasToken = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return (this.Application.Server.HasToken().toString());
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUpdateTokenAntiforgery = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        token = _a.sent();
                        return [4, this.Application.Server.SetTokenAntiforgery(token)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionDestroyContainer = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var itemText, containerCode, dataPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        itemText = functionParsed.Parameters[0];
                        containerCode = null;
                        if (!this.Application.Parser.IsMustache(itemText)) return [3, 2];
                        dataPath = this.Application.Parser.ParseMustache(itemText);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath)];
                    case 1:
                        containerCode = _a.sent();
                        return [3, 3];
                    case 2:
                        containerCode = itemText;
                        _a.label = 3;
                    case 3:
                        this.Application.SectorContainerHandler.RemoveByContainer(containerCode);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionIf = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var conditional, conditionalEvaluated, conditionalResult, statementTrue, statementFalse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        conditional = functionParsed.Parameters[0];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, new DrapoContext(contextItem), null, executionContext, conditional, element, false)];
                    case 1:
                        conditionalEvaluated = _a.sent();
                        return [4, this.Application.Solver.ResolveConditional(conditionalEvaluated)];
                    case 2:
                        conditionalResult = _a.sent();
                        if (!conditionalResult) return [3, 4];
                        statementTrue = functionParsed.Parameters[1];
                        return [4, this.ResolveFunctionContext(sector, contextItem, element, event, statementTrue, executionContext)];
                    case 3:
                        _a.sent();
                        return [3, 6];
                    case 4:
                        if (!(functionParsed.Parameters.length > 2)) return [3, 6];
                        statementFalse = functionParsed.Parameters[2];
                        return [4, this.ResolveFunctionContext(sector, contextItem, element, event, statementFalse, executionContext)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionAsync = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var content, executionContextContent;
            return __generator(this, function (_a) {
                content = functionParsed.Parameters[0];
                executionContextContent = this.CreateExecutionContext(false);
                this.ResolveFunctionContext(sector, contextItem, element, event, content, executionContextContent);
                return [2, ('')];
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionNotify = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataIndex, _a, _b, dataFields, canUseDifferenceText, _c, canUseDifference, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        dataKey = _e.sent();
                        _b = (_a = this.Application.Parser).GetStringAsNumber;
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        dataIndex = _b.apply(_a, [_e.sent()]);
                        return [4, this.ResolveFunctionParameterDataFields(sector, contextItem, element, functionParsed.Parameters[2], executionContext)];
                    case 3:
                        dataFields = _e.sent();
                        if (!(functionParsed.Parameters.length > 3)) return [3, 5];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 4:
                        _c = _e.sent();
                        return [3, 6];
                    case 5:
                        _c = null;
                        _e.label = 6;
                    case 6:
                        canUseDifferenceText = _c;
                        if (!((canUseDifferenceText == null) || (canUseDifferenceText == ''))) return [3, 7];
                        _d = true;
                        return [3, 9];
                    case 7: return [4, this.Application.Solver.ResolveConditional(canUseDifferenceText)];
                    case 8:
                        _d = _e.sent();
                        _e.label = 9;
                    case 9:
                        canUseDifference = _d;
                        return [4, this.Application.Observer.Notify(dataKey, dataIndex, dataFields, canUseDifference)];
                    case 10:
                        _e.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionFocus = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var did, elementFocused, elDid, isSelectText, isSelect, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        did = _b.sent();
                        if ((did === null) || (did === '') || (did === undefined)) {
                            elementFocused = document.activeElement;
                            elementFocused.blur();
                            return [2, ('')];
                        }
                        elDid = this.Application.Searcher.FindByAttributeAndValue('d-id', did);
                        if (elDid === null)
                            return [2, ('')];
                        isSelectText = functionParsed.Parameters[1];
                        if (!((isSelectText == null) || (isSelectText == ''))) return [3, 2];
                        _a = true;
                        return [3, 4];
                    case 2: return [4, this.Application.Solver.ResolveConditional(isSelectText)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        isSelect = _a;
                        elDid.focus();
                        if (isSelect)
                            this.Application.Document.Select(elDid);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionShowWindow = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var windowParameters, windowNameOrUri, isUri, did, _a, i, windowParameter, _b, _c, _d, _e, _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        windowParameters = [];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        windowNameOrUri = _h.sent();
                        isUri = this.Application.Parser.IsUri(windowNameOrUri);
                        if (!isUri) return [3, 3];
                        return [4, this.Application.Storage.ResolveDataUrlMustaches(null, sector, windowNameOrUri, executionContext)];
                    case 2:
                        windowNameOrUri = _h.sent();
                        _h.label = 3;
                    case 3:
                        if (!isUri) return [3, 5];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 4:
                        _a = _h.sent();
                        return [3, 6];
                    case 5:
                        _a = null;
                        _h.label = 6;
                    case 6:
                        did = _a;
                        i = isUri ? 2 : 1;
                        _h.label = 7;
                    case 7:
                        if (!(i < functionParsed.Parameters.length - 1)) return [3, 15];
                        windowParameter = [null, null];
                        _b = windowParameter;
                        _c = 0;
                        if (!(contextItem != null)) return [3, 9];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i])];
                    case 8:
                        _d = _h.sent();
                        return [3, 10];
                    case 9:
                        _d = functionParsed.Parameters[i];
                        _h.label = 10;
                    case 10:
                        _b[_c] = _d;
                        _e = windowParameter;
                        _f = 1;
                        if (!(contextItem != null)) return [3, 12];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i + 1])];
                    case 11:
                        _g = _h.sent();
                        return [3, 13];
                    case 12:
                        _g = functionParsed.Parameters[i + 1];
                        _h.label = 13;
                    case 13:
                        _e[_f] = _g;
                        windowParameters.push(windowParameter);
                        _h.label = 14;
                    case 14:
                        i = i + 2;
                        return [3, 7];
                    case 15:
                        if (!isUri) return [3, 17];
                        return [4, this.Application.WindowHandler.CreateAndShowWindow(windowNameOrUri, did, windowParameters)];
                    case 16:
                        _h.sent();
                        return [3, 19];
                    case 17: return [4, this.Application.WindowHandler.CreateAndShowWindowDefinition(windowNameOrUri, windowParameters)];
                    case 18:
                        _h.sent();
                        _h.label = 19;
                    case 19: return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCloseWindow = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var did, _a, allText, all, type;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(functionParsed.Parameters.length > 0)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0], false, true)];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = null;
                        _b.label = 3;
                    case 3:
                        did = _a;
                        if ((did === '') && (functionParsed.Parameters.length > 0) && (this.Application.Parser.HasFunction(functionParsed.Parameters[0])))
                            return [2, ('')];
                        allText = functionParsed.Parameters.length > 1 ? functionParsed.Parameters[1] : 'false';
                        return [4, this.Application.Solver.ResolveConditional(allText)];
                    case 4:
                        all = _b.sent();
                        type = functionParsed.Parameters.length > 2 ? functionParsed.Parameters[2] : null;
                        return [4, this.Application.WindowHandler.CloseWindow(did, all, type)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionHideWindow = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var did, allText, all, type, window;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = functionParsed.Parameters.length > 0 ? functionParsed.Parameters[0] : null;
                        allText = functionParsed.Parameters.length > 1 ? functionParsed.Parameters[1] : 'false';
                        return [4, this.Application.Solver.ResolveConditional(allText)];
                    case 1:
                        all = _a.sent();
                        type = functionParsed.Parameters.length > 2 ? functionParsed.Parameters[2] : null;
                        return [4, this.Application.WindowHandler.HideWindow(did, all)];
                    case 2:
                        window = _a.sent();
                        if (window !== null) {
                            if (type !== 'noclose')
                                executionContext.AddWindowAutoClose(window);
                        }
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetWindow = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var window;
            return __generator(this, function (_a) {
                window = this.Application.WindowHandler.GetWindowByElement(element);
                if (window !== null)
                    return [2, (window.Code)];
                return [2, ('')];
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCreateGuid = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value, dataKey, dataField, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        value = this.Application.Document.CreateGuid();
                        if (functionParsed.Parameters.length == 0)
                            return [2, (value)];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        dataKey = _c.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        dataField = _c.sent();
                        if (!(functionParsed.Parameters.length > 2)) return [3, 4];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 3:
                        _a = _c.sent();
                        return [3, 5];
                    case 4:
                        _a = null;
                        _c.label = 5;
                    case 5:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 6];
                        _b = true;
                        return [3, 8];
                    case 6: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 7:
                        _b = _c.sent();
                        _c.label = 8;
                    case 8:
                        notify = _b;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, [dataField], value, notify)];
                    case 9:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCreateTick = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var ticks, value, mustacheText, mustache, dataKey, dataFields, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        ticks = new Date().getTime();
                        value = ticks.toString();
                        if (functionParsed.Parameters.length == 0)
                            return [2, (value)];
                        mustacheText = functionParsed.Parameters[0];
                        mustache = this.Application.Parser.ParseMustache(mustacheText);
                        dataKey = this.Application.Solver.ResolveDataKey(mustache);
                        dataFields = this.Application.Solver.ResolveDataFields(mustache);
                        if (!(functionParsed.Parameters.length > 1)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 1:
                        _a = _c.sent();
                        return [3, 3];
                    case 2:
                        _a = null;
                        _c.label = 3;
                    case 3:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 4];
                        _b = true;
                        return [3, 6];
                    case 4: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        notify = _b;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, value, notify)];
                    case 7:
                        _c.sent();
                        return [2, (value)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetDate = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var date, returnType, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        date = new Date();
                        if (!(functionParsed.Parameters.length > 0)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = 'date';
                        _b.label = 3;
                    case 3:
                        returnType = _a;
                        if (returnType.toUpperCase() == 'ISO')
                            return [2, (date.toISOString())];
                        return [2, date];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionAddDate = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dateParameter, _a, dateParameterParsed, date, typeParameter, _b, type, incrementParameter, _c, increment, returnType, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(functionParsed.Parameters.length > 0)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        _a = _e.sent();
                        return [3, 3];
                    case 2:
                        _a = null;
                        _e.label = 3;
                    case 3:
                        dateParameter = _a;
                        dateParameterParsed = this.Application.Parser.ParseDateCulture(dateParameter);
                        date = (dateParameterParsed != null) ? dateParameterParsed : new Date();
                        if (!(functionParsed.Parameters.length > 1)) return [3, 5];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 4:
                        _b = _e.sent();
                        return [3, 6];
                    case 5:
                        _b = 'day';
                        _e.label = 6;
                    case 6:
                        typeParameter = _b;
                        type = typeParameter != null ? typeParameter : 'day';
                        if (!(functionParsed.Parameters.length > 2)) return [3, 8];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[2])];
                    case 7:
                        _c = _e.sent();
                        return [3, 9];
                    case 8:
                        _c = '1';
                        _e.label = 9;
                    case 9:
                        incrementParameter = _c;
                        increment = this.Application.Parser.ParseNumber(incrementParameter, 1);
                        if (type === 'day')
                            date.setDate(date.getDate() + increment);
                        else if (type === 'month')
                            date.setMonth(date.getMonth() + increment);
                        if (type === 'year')
                            date.setFullYear(date.getFullYear() + increment);
                        if (!(functionParsed.Parameters.length > 3)) return [3, 11];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 10:
                        _d = _e.sent();
                        return [3, 12];
                    case 11:
                        _d = 'date';
                        _e.label = 12;
                    case 12:
                        returnType = _d;
                        if (returnType.toUpperCase() == 'ISO')
                            return [2, (date.toISOString())];
                        return [2, date];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionPushStack = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        value = _a.sent();
                        executionContext.Stack.Push(value);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionPopStack = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value, mustacheText, mustache, dataKey, dataFields, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        value = executionContext.Stack.Pop();
                        if (functionParsed.Parameters.length == 0)
                            return [2, (value)];
                        mustacheText = functionParsed.Parameters[0];
                        mustache = this.Application.Parser.ParseMustache(mustacheText);
                        dataKey = this.Application.Solver.ResolveDataKey(mustache);
                        dataFields = this.Application.Solver.ResolveDataFields(mustache);
                        if (!(functionParsed.Parameters.length > 1)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 1:
                        _a = _c.sent();
                        return [3, 3];
                    case 2:
                        _a = null;
                        _c.label = 3;
                    case 3:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 4];
                        _b = true;
                        return [3, 6];
                    case 4: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        notify = _b;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, value, notify)];
                    case 7:
                        _c.sent();
                        return [2, (value)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionPeekStack = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value, mustacheText, mustache, dataKey, dataFields, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        value = executionContext.Stack.Peek();
                        if (functionParsed.Parameters.length == 0)
                            return [2, (value)];
                        mustacheText = functionParsed.Parameters[0];
                        mustache = this.Application.Parser.ParseMustache(mustacheText);
                        dataKey = this.Application.Solver.ResolveDataKey(mustache);
                        dataFields = this.Application.Solver.ResolveDataFields(mustache);
                        if (!(functionParsed.Parameters.length > 1)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 1:
                        _a = _c.sent();
                        return [3, 3];
                    case 2:
                        _a = null;
                        _c.label = 3;
                    case 3:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 4];
                        _b = true;
                        return [3, 6];
                    case 4: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 5:
                        _b = _c.sent();
                        _c.label = 6;
                    case 6:
                        notify = _b;
                        return [4, this.Application.Storage.SetDataKeyField(dataKey, sector, dataFields, value, notify)];
                    case 7:
                        _c.sent();
                        return [2, (value)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionExecute = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorFunction, _a, valueFunction;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(functionParsed.Parameters.length > 1)) return [3, 2];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = sector;
                        _b.label = 3;
                    case 3:
                        sectorFunction = _a;
                        return [4, this.ResolveFunctionParameter(sectorFunction, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 4:
                        valueFunction = _b.sent();
                        return [4, this.ResolveFunctionContext(sectorFunction, contextItem, element, event, valueFunction, executionContext)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionExecuteDataItem = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var expression, forText, ifText, hasIfText, allText, _a, all, _b, parsedFor, forHierarchyText, context, key, dataKeyIteratorRange, range, dataKeyIterator, dataKeyIteratorParts, dataKey, dataItem, datas, ifTextResolved;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        expression = functionParsed.Parameters[0];
                        return [4, functionParsed.Parameters[1]];
                    case 1:
                        forText = _c.sent();
                        ifText = functionParsed.Parameters.length > 2 ? functionParsed.Parameters[2] : null;
                        hasIfText = (ifText != null);
                        if (!(functionParsed.Parameters.length > 3)) return [3, 3];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[3])];
                    case 2:
                        _a = _c.sent();
                        return [3, 4];
                    case 3:
                        _a = null;
                        _c.label = 4;
                    case 4:
                        allText = _a;
                        if (!((allText == null) || (allText == ''))) return [3, 5];
                        _b = !hasIfText;
                        return [3, 7];
                    case 5: return [4, this.Application.Solver.ResolveConditional(allText)];
                    case 6:
                        _b = _c.sent();
                        _c.label = 7;
                    case 7:
                        all = _b;
                        parsedFor = this.Application.Parser.ParseFor(forText);
                        if (parsedFor == null)
                            return [2, ('')];
                        return [4, functionParsed.Parameters[4]];
                    case 8:
                        forHierarchyText = _c.sent();
                        context = new DrapoContext();
                        key = parsedFor[0];
                        dataKeyIteratorRange = parsedFor[2];
                        range = this.Application.ControlFlow.GetIteratorRange(dataKeyIteratorRange);
                        dataKeyIterator = range == null ? dataKeyIteratorRange : this.Application.ControlFlow.CleanIteratorRange(dataKeyIteratorRange);
                        dataKeyIteratorParts = this.Application.Parser.ParseForIterable(dataKeyIterator);
                        dataKey = dataKeyIteratorParts[0];
                        return [4, this.Application.Storage.Retrieve(dataKey, sector, context, dataKeyIteratorParts)];
                    case 9:
                        dataItem = _c.sent();
                        if (dataItem == null)
                            return [2, ('')];
                        datas = (dataKeyIteratorParts.length > 1) ? this.Application.Solver.ResolveDataObjectPathObject(dataItem.Data, dataKeyIteratorParts) : dataItem.Data;
                        if (datas == null)
                            return [2, ('')];
                        if (!datas.length)
                            datas = this.Application.Solver.TransformObjectIntoArray(datas);
                        if (range !== null)
                            datas = this.Application.ControlFlow.ApplyRange(datas, range);
                        if ((datas.length !== null) && (datas.length === 0))
                            return [2, ('')];
                        ifTextResolved = this.ResolveExecutionContextMustache(sector, executionContext, ifText);
                        return [4, this.Application.ControlFlow.ExecuteDataItem(sector, context, expression, dataKeyIterator, forHierarchyText, ifTextResolved, all, datas, dataKey, key, executionContext)];
                    case 10:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionExecuteComponentFunction = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var did, instance, functionName, instanceFunction, parameters, i, _a, _b, result, resultPromise;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        did = _c.sent();
                        if (did == null)
                            return [2, ('')];
                        instance = this.Application.ComponentHandler.GetComponentInstance(sector, did);
                        if (instance == null)
                            return [2, ('')];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        functionName = _c.sent();
                        instanceFunction = instance[functionName];
                        if (instanceFunction == null)
                            return [2, ('')];
                        parameters = [];
                        i = 2;
                        _c.label = 3;
                    case 3:
                        if (!(i < functionParsed.Parameters.length)) return [3, 6];
                        _b = (_a = parameters).push;
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i])];
                    case 4:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 5;
                    case 5:
                        i++;
                        return [3, 3];
                    case 6:
                        result = instanceFunction.apply(instance, parameters);
                        if (!(Promise.resolve(result) == result)) return [3, 8];
                        resultPromise = result;
                        return [4, resultPromise];
                    case 7:
                        _c.sent();
                        return [2, ('')];
                    case 8: return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionExecuteInstanceFunction = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var instanceSectorParameter, instanceSector, instance, functionName, instanceFunction, parameters, i, _a, _b, result, value, resultPromise, mustacheReturn, dataPath;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        instanceSectorParameter = _c.sent();
                        instanceSector = ((instanceSectorParameter == null) || (instanceSectorParameter == '')) ? sector : instanceSectorParameter;
                        instance = this.Application.ComponentHandler.GetComponentInstance(instanceSector);
                        if (instance == null)
                            return [2, ('')];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        functionName = _c.sent();
                        instanceFunction = instance[functionName];
                        if (instanceFunction == null)
                            return [2, ('')];
                        parameters = [];
                        i = 3;
                        _c.label = 3;
                    case 3:
                        if (!(i < functionParsed.Parameters.length)) return [3, 6];
                        _b = (_a = parameters).push;
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i])];
                    case 4:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 5;
                    case 5:
                        i++;
                        return [3, 3];
                    case 6:
                        result = instanceFunction.apply(instance, parameters);
                        value = result;
                        if (!(Promise.resolve(result) == result)) return [3, 8];
                        resultPromise = result;
                        return [4, resultPromise];
                    case 7:
                        value = _c.sent();
                        _c.label = 8;
                    case 8:
                        mustacheReturn = functionParsed.Parameters[2];
                        if (!((mustacheReturn !== null) && (mustacheReturn !== ''))) return [3, 12];
                        dataPath = this.Application.Parser.ParseMustache(mustacheReturn);
                        if (!(dataPath.length === 1)) return [3, 10];
                        return [4, this.Application.Storage.UpdateData(dataPath[0], sector, value, true)];
                    case 9:
                        _c.sent();
                        return [3, 12];
                    case 10: return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, value, true)];
                    case 11:
                        _c.sent();
                        _c.label = 12;
                    case 12: return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCast = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var context, value, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = contextItem != null ? contextItem.Context : new DrapoContext();
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, executionContext, functionParsed.Parameters[0], null, false)];
                    case 1:
                        value = _a.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        type = _a.sent();
                        if (type === 'number')
                            return [2, (this.Application.Parser.ParseNumberBlock(value))];
                        return [2, (value)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionEncodeUrl = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var context, value, valueEncoded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = contextItem != null ? contextItem.Context : new DrapoContext();
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, executionContext, functionParsed.Parameters[0], null, false)];
                    case 1:
                        value = _a.sent();
                        valueEncoded = this.Application.Server.EnsureUrlComponentEncoded(value);
                        return [2, (valueEncoded)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionAddRequestHeader = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var context, name, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = new DrapoContext();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        name = _a.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        value = _a.sent();
                        this.Application.Server.AddNextRequestHeader(name, value);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionSetClipboard = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        value = _a.sent();
                        return [4, this.Application.Document.SetClipboard(value)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCreateTimer = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var content, time, loopText, loop, _a, timeAsNumber, executionContextContent, timerFunction;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        content = functionParsed.Parameters[0];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 1:
                        time = _b.sent();
                        loopText = functionParsed.Parameters[2];
                        if (!((loopText == null) || (loopText == ''))) return [3, 2];
                        _a = false;
                        return [3, 4];
                    case 2: return [4, this.Application.Solver.ResolveConditional(loopText)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        loop = _a;
                        timeAsNumber = this.Application.Parser.ParseNumber(time, 0);
                        executionContextContent = this.CreateExecutionContext(false);
                        timerFunction = function () {
                            _this.ResolveFunctionContext(sector, contextItem, element, event, content, executionContextContent);
                            if (loop)
                                setTimeout(timerFunction, timeAsNumber);
                        };
                        setTimeout(timerFunction, timeAsNumber);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionCreateReference = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var value, mustacheReference;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        value = functionParsed.Parameters[0];
                        return [4, this.Application.Solver.CreateMustacheReference(sector, contextItem, value)];
                    case 1:
                        mustacheReference = _a.sent();
                        return [2, (mustacheReference)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionWait = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var time, timeAsNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        time = _a.sent();
                        timeAsNumber = this.Application.Parser.ParseNumber(time, 0);
                        return [4, this.Application.Document.Sleep(timeAsNumber)];
                    case 2:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionDownloadData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyFile, storageItem, namePath, name, dataPath, data, contentTypePath, contentType;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyFile = functionParsed.Parameters[0];
                        return [4, this.Application.Storage.RetrieveDataItemContext(dataKeyFile, sector, executionContext)];
                    case 1:
                        storageItem = _a.sent();
                        if (storageItem === null)
                            return [2, ('')];
                        namePath = this.Application.Solver.CreateDataPath(dataKeyFile, ['filename']);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, namePath, true)];
                    case 2:
                        name = _a.sent();
                        dataPath = this.Application.Solver.CreateDataPath(dataKeyFile, ['body']);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPath, true)];
                    case 3:
                        data = _a.sent();
                        contentTypePath = this.Application.Solver.CreateDataPath(dataKeyFile, ['contenttype']);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, contentTypePath, true)];
                    case 4:
                        contentType = _a.sent();
                        this.DownloadData(name, data, contentType);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.DownloadData = function (name, data, contentType) {
        var blob = this.CreateBlob(data, contentType);
        var navigator = window.navigator;
        if (navigator.msSaveOrOpenBlob) {
            navigator.msSaveBlob(blob, name);
        }
        else {
            var elDownloader = document.createElement('a');
            elDownloader.href = window.URL.createObjectURL(blob);
            elDownloader.download = name;
            elDownloader.style.display = 'none';
            document.body.appendChild(elDownloader);
            elDownloader.click();
            document.body.removeChild(elDownloader);
        }
    };
    DrapoFunctionHandler.prototype.CreateBlob = function (data, contentType) {
        if (data instanceof Blob)
            return (data);
        var dataCharacters = atob(data);
        var dataBytes = new Array(dataCharacters.length);
        for (var i = 0; i < dataCharacters.length; i++) {
            dataBytes[i] = dataCharacters.charCodeAt(i);
        }
        var bytes = new Uint8Array(dataBytes);
        var blob = new Blob([bytes], { type: contentType });
        return (blob);
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionDetectView = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var views, context, i, view;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetViews()];
                    case 1:
                        views = _a.sent();
                        if (views == null)
                            return [2, ('')];
                        context = new DrapoContext();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < views.length)) return [3, 5];
                        view = views[i];
                        if (view.Condition == null)
                            return [2, (view.Tag)];
                        return [4, this.Application.Solver.ResolveConditional(view.Condition, null, sector, context)];
                    case 3:
                        if (_a.sent())
                            return [2, (view.Tag)];
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5: return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionSetConfig = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var key, value, valueAsNumber, keyLower;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        key = _a.sent();
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        value = _a.sent();
                        valueAsNumber = this.Application.Parser.ParseNumber(value, 0);
                        keyLower = key.toLowerCase();
                        if (keyLower === 'timezone')
                            this.Application.Config.SetTimezone(valueAsNumber);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetConfig = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var key, keyLower, timeZone;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        key = _a.sent();
                        keyLower = key.toLowerCase();
                        if (keyLower === 'timezone') {
                            timeZone = this.Application.Config.GetTimezone();
                            if (timeZone != null)
                                return [2, (timeZone.toString())];
                        }
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionLockPlumber = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.Application.Plumber.Lock();
                return [2, ('')];
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUnlockPlumber = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Plumber.Unlock()];
                    case 1:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionLockData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        dataKey = _a.sent();
                        this.Application.Observer.Lock(dataKey);
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionUnlockData = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, notifyText, _a, notify, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[0])];
                    case 1:
                        dataKey = _c.sent();
                        if (!(functionParsed.Parameters.length > 1)) return [3, 3];
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[1])];
                    case 2:
                        _a = _c.sent();
                        return [3, 4];
                    case 3:
                        _a = null;
                        _c.label = 4;
                    case 4:
                        notifyText = _a;
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 5];
                        _b = true;
                        return [3, 7];
                    case 5: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 6:
                        _b = _c.sent();
                        _c.label = 7;
                    case 7:
                        notify = _b;
                        return [4, this.Application.Observer.Unlock(dataKey, notify)];
                    case 8:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearPlumber = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Plumber.Clear()];
                    case 1:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionDebugger = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var parameters, i, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        parameters = [];
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < functionParsed.Parameters.length)) return [3, 4];
                        _b = (_a = parameters).push;
                        return [4, this.ResolveFunctionParameter(sector, contextItem, element, executionContext, functionParsed.Parameters[i], true, true, true)];
                    case 2:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [4, this.Application.Debugger.ExecuteFunctionDebugger(parameters)];
                    case 5:
                        _c.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetSector = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, (this.Application.Document.GetSector(element))];
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionGetClipboard = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, notifyText, notify, _a, value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dataPath = this.Application.Parser.ParseMustache(functionParsed.Parameters[0]);
                        notifyText = functionParsed.Parameters[1];
                        if (!((notifyText == null) || (notifyText == ''))) return [3, 1];
                        _a = true;
                        return [3, 3];
                    case 1: return [4, this.Application.Solver.ResolveConditional(notifyText)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        notify = _a;
                        return [4, this.Application.Document.GetClipboard()];
                    case 4:
                        value = _b.sent();
                        return [4, this.Application.Solver.UpdateItemDataPathObject(sector, contextItem, executionContext, dataPath, value, notify)];
                    case 5:
                        _b.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionExecuteValidation = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var validation, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        validation = functionParsed.Parameters[0];
                        return [4, this.Application.Validator.IsValidationExpressionValid(element, sector, validation, contextItem)];
                    case 1:
                        isValid = _a.sent();
                        return [2, (isValid ? 'true' : 'false')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.ExecuteFunctionClearValidation = function (sector, contextItem, element, event, functionParsed, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var validation;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        validation = functionParsed.Parameters[0];
                        return [4, this.Application.Validator.UncheckValidationExpression(element, sector, validation, contextItem)];
                    case 1:
                        _a.sent();
                        return [2, ('')];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.HasFunctionMustacheContext = function (functionsValue, sector, renderContext) {
        return __awaiter(this, void 0, void 0, function () {
            var hasContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hasContext = renderContext.HasExpressionContext(sector, functionsValue);
                        if (hasContext !== null)
                            return [2, (hasContext)];
                        return [4, this.HasFunctionMustacheContextInternal(functionsValue, sector)];
                    case 1:
                        hasContext = _a.sent();
                        renderContext.AddExpressionContext(sector, functionsValue, hasContext);
                        return [2, (hasContext)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.HasFunctionMustacheContextInternal = function (functionsValue, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var mustaches, j, mustache, mustacheParts, dataKey, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.HasFunctionsContext(functionsValue))
                            return [2, (true)];
                        if (!this.Application.Parser.IsMustache(functionsValue))
                            return [2, (this.Application.Barber.HasMustacheContext(functionsValue, sector))];
                        mustaches = this.Application.Parser.ParseMustaches(functionsValue);
                        j = 0;
                        _a.label = 1;
                    case 1:
                        if (!(j < mustaches.length)) return [3, 6];
                        mustache = mustaches[j];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        if (!this.Application.Storage.IsDataKey(dataKey, null))
                            return [2, (true)];
                        value = this.Application.Storage.GetDataKeyField(dataKey, sector, mustacheParts);
                        if (!(value == null)) return [3, 3];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoFunctionHandler - HasFunctionMustacheContext - Null Mustache - {0}', mustache)];
                    case 2:
                        _a.sent();
                        return [2, (false)];
                    case 3: return [4, this.HasFunctionMustacheContextInternal(value, sector)];
                    case 4:
                        if (_a.sent())
                            return [2, (true)];
                        _a.label = 5;
                    case 5:
                        j++;
                        return [3, 1];
                    case 6: return [2, (false)];
                }
            });
        });
    };
    DrapoFunctionHandler.prototype.HasFunctionsContext = function (functionsValue) {
        var functionsParsed = this.Application.Parser.ParseFunctions(functionsValue);
        for (var i = 0; i < functionsParsed.length; i++) {
            var functionParse = functionsParsed[i];
            var functionParsed = this.Application.Parser.ParseFunction(functionParse);
            if (functionParsed === null)
                continue;
            if (this.IsFunctionContext(functionParsed))
                return (true);
        }
        return (false);
    };
    DrapoFunctionHandler.prototype.GetFunctionsContext = function () {
        var functions = [];
        functions.push('removedataitem');
        return (functions);
    };
    DrapoFunctionHandler.prototype.IsFunctionContext = function (functionParsed) {
        var functions = this.GetFunctionsContext();
        if (this.Application.Solver.Contains(functions, functionParsed.Name))
            return (true);
        return (false);
    };
    return DrapoFunctionHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoGlobalization = (function () {
    function DrapoGlobalization(application) {
        this._culture = null;
        this._resourceDayOfWeekNameShort = [];
        this._resourceDayOfWeekName = [];
        this._resourceMonthNameShort = [];
        this._resourceMonthName = [];
        this._resourceDateFormat = [];
        this._resourceNumberSizeType = [];
        this._application = application;
        this.Initialize();
    }
    Object.defineProperty(DrapoGlobalization.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoGlobalization.prototype.Initialize = function () {
        this.InitializeResource(this._resourceDayOfWeekNameShort, 'en', 'Sun_Mon_Tue_Wed_Thu_Fri_Sat');
        this.InitializeResource(this._resourceDayOfWeekName, 'en', 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday');
        this.InitializeResource(this._resourceMonthNameShort, 'en', 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec');
        this.InitializeResource(this._resourceMonthName, 'en', 'January_February_March_April_May_June_July_August_September_October_November_December');
        this.InitializeResource(this._resourceDayOfWeekNameShort, 'pt', 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb');
        this.InitializeResource(this._resourceDayOfWeekName, 'pt', 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado');
        this.InitializeResource(this._resourceMonthNameShort, 'pt', 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez');
        this.InitializeResource(this._resourceMonthName, 'pt', 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro');
        this.InitializeResource(this._resourceDayOfWeekNameShort, 'es', 'dom_lun_mar_mié_jue_vie_sáb');
        this.InitializeResource(this._resourceDayOfWeekName, 'es', 'domingo_lunes_martes_miércoles_jueves_viernes_sábado');
        this.InitializeResource(this._resourceMonthNameShort, 'es', 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic');
        this.InitializeResource(this._resourceMonthName, 'es', 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre');
        this.InitializeResourceDictionary(this._resourceDateFormat, 'en', [['d', 'MM/dd/yyyy'], ['D', 'dddd, dd MMMM yyyy'], ['t', 'HH:mm'], ['T', 'HH:mm:ss'], ['g', 'MM/dd/yyyy HH:mm'], ['G', 'MM/dd/yyyy HH:mm:ss'], ['r', 'ddd, dd MMM yyyy HH:mm:ss']]);
        this.InitializeResourceDictionary(this._resourceDateFormat, 'pt', [['d', 'dd/MM/yyyy'], ['D', 'dddd, dd MMMM yyyy'], ['t', 'HH:mm'], ['T', 'HH:mm:ss'], ['g', 'dd/MM/yyyy HH:mm'], ['G', 'dd/MM/yyyy HH:mm:ss'], ['r', 'ddd, dd MMM yyyy HH:mm:ss']]);
        this.InitializeResourceDictionary(this._resourceDateFormat, 'es', [['d', 'dd/MM/yyyy'], ['D', 'dddd, dd MMMM yyyy'], ['t', 'HH:mm'], ['T', 'HH:mm:ss'], ['g', 'dd/MM/yyyy HH:mm'], ['G', 'dd/MM/yyyy HH:mm:ss'], ['r', 'ddd, dd MMM yyyy HH:mm:ss']]);
        this.InitializeResource(this._resourceNumberSizeType, 'pt', '_mil_mi_bi_tri');
        this.InitializeResource(this._resourceNumberSizeType, 'en', '_K_M_B_T');
        this.InitializeResource(this._resourceNumberSizeType, 'es', '_K_M_B_T');
    };
    DrapoGlobalization.prototype.InitializeResource = function (resource, culture, values) {
        resource.push([culture, values.split('_')]);
    };
    DrapoGlobalization.prototype.InitializeResourceDictionary = function (resource, culture, values) {
        resource.push([culture, values]);
    };
    DrapoGlobalization.prototype.GetLanguage = function () {
        if (navigator.language != null)
            return (navigator.language);
        return (navigator.userLanguage);
    };
    DrapoGlobalization.prototype.GetCultureNeutral = function (culture) {
        var index = culture.indexOf('-');
        if (index < 0)
            return (culture);
        return (culture.substring(0, index));
    };
    DrapoGlobalization.prototype.GetCultureCookie = function () {
        var cookieData = this.Application.CookieHandler.RetrieveData();
        if (cookieData == null)
            return ('');
        return (cookieData.culture);
    };
    DrapoGlobalization.prototype.GetCultureLanguage = function () {
        var language = this.GetLanguage();
        if (language == null)
            return (null);
        var cultureNeutral = this.GetCultureNeutral(language);
        return (cultureNeutral);
    };
    DrapoGlobalization.prototype.ReloadCulture = function () {
        return __awaiter(this, void 0, void 0, function () {
            var culture;
            return __generator(this, function (_a) {
                culture = this._culture;
                this._culture = null;
                if (culture === this.GetCulture())
                    return [2, (false)];
                return [2, (true)];
            });
        });
    };
    DrapoGlobalization.prototype.GetCulture = function () {
        if (this._culture !== null)
            return (this._culture);
        var cultureCookie = this.GetCultureCookie();
        if ((cultureCookie != null) && (cultureCookie != ''))
            return (this._culture = cultureCookie);
        var cultureLanguage = this.GetCultureLanguage();
        if ((cultureLanguage != null) && (cultureLanguage != ''))
            return (this._culture = cultureLanguage);
        this._culture = 'en';
        return (this._culture);
    };
    DrapoGlobalization.prototype.GetDelimiterDecimal = function (culture) {
        if (culture == null)
            culture = this.GetCulture();
        if (culture === 'en')
            return ('.');
        return (',');
    };
    DrapoGlobalization.prototype.GetDelimiterThousands = function (culture) {
        if (culture == null)
            culture = this.GetCulture();
        if (culture === 'en')
            return (',');
        return ('.');
    };
    DrapoGlobalization.prototype.GetDayOfWeekNameShort = function (day, culture) {
        if (culture == null)
            culture = this.GetCulture();
        return (this.GetResourceValue(this._resourceDayOfWeekNameShort, day, culture));
    };
    DrapoGlobalization.prototype.GetDayOfWeekName = function (day, culture) {
        if (culture == null)
            culture = this.GetCulture();
        return (this.GetResourceValue(this._resourceDayOfWeekName, day, culture));
    };
    DrapoGlobalization.prototype.GetMonthNameShort = function (day, culture) {
        if (culture == null)
            culture = this.GetCulture();
        return (this.GetResourceValue(this._resourceMonthNameShort, day, culture));
    };
    DrapoGlobalization.prototype.GetMonthName = function (day, culture) {
        if (culture == null)
            culture = this.GetCulture();
        return (this.GetResourceValue(this._resourceMonthName, day, culture));
    };
    DrapoGlobalization.prototype.GetResourceValue = function (resource, index, culture) {
        var resourceCulture = this.GetResourceCulture(resource, culture);
        if (resourceCulture === null)
            return ('');
        if (resourceCulture.length < index)
            return ('');
        return (resourceCulture[index]);
    };
    DrapoGlobalization.prototype.GetResourceCulture = function (resource, culture) {
        if (culture == null)
            culture = this.GetCulture();
        for (var i = 0; i < resource.length; i++) {
            var resourceEntry = resource[i];
            if (resourceEntry[0] === culture)
                return (resourceEntry[1]);
        }
        return (null);
    };
    DrapoGlobalization.prototype.GetDateFormat = function (dateFormatType, culture) {
        var dateFormatDictionary = this.GetResourceCultureDictionary(this._resourceDateFormat, culture);
        if (dateFormatDictionary == null)
            return ('');
        return (this.GetResourceValueDictionary(dateFormatDictionary, dateFormatType));
    };
    DrapoGlobalization.prototype.GetDateFormatsRegex = function (culture) {
        if (culture === void 0) { culture = null; }
        if (culture == null)
            culture = this.GetCulture();
        var formats = [this.GetDateFormat('d', culture)];
        var formatsRegex = '';
        for (var i = 0; i < formats.length; i++) {
            var format = formats[i];
            var formatRegex = this.GetDateFormatRegex(format);
            if (formatsRegex.length > 0)
                formatsRegex += '|';
            formatsRegex += '(' + formatRegex + ')';
        }
        return ('^' + formatsRegex + '$');
    };
    DrapoGlobalization.prototype.GetDateFormatRegex = function (format) {
        format = format.replace(/\//g, '\\/');
        format = this.ReplaceDataFormatRegex(format, 'yyyy', 'year', '(\\d{4})');
        format = this.ReplaceDataFormatRegex(format, 'MM', 'month', '(\\d{1,2})');
        format = this.ReplaceDataFormatRegex(format, 'dd', 'day', '(\\d{1,2})');
        return (format);
    };
    DrapoGlobalization.prototype.GetDateFormatsRegularExpressions = function (culture) {
        if (culture === void 0) { culture = null; }
        if (culture == null)
            culture = this.GetCulture();
        var regularExpressions = [];
        if ((culture === 'pt') || (culture === 'es')) {
            var regularExpression = new DrapoRegularExpression();
            regularExpression.Expression = '^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$';
            regularExpression.CreateItem('(\\d{1,2})', 'day');
            regularExpression.CreateItem('\\/');
            regularExpression.CreateItem('(\\d{1,2})', 'month');
            regularExpression.CreateItem('\\/');
            regularExpression.CreateItem('(\\d{4})', 'year');
            regularExpressions.push(regularExpression);
        }
        else if (culture === 'en') {
            var regularExpression = new DrapoRegularExpression();
            regularExpression.Expression = '^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$';
            regularExpression.CreateItem('(\\d{1,2})', 'month');
            regularExpression.CreateItem('\\/');
            regularExpression.CreateItem('(\\d{1,2})', 'day');
            regularExpression.CreateItem('\\/');
            regularExpression.CreateItem('(\\d{4})', 'year');
            regularExpressions.push(regularExpression);
        }
        return (regularExpressions);
    };
    DrapoGlobalization.prototype.ReplaceDataFormatRegex = function (format, symbol, name, expression) {
        var regex = '(?<' + name + '>' + expression + ')';
        format = format.replace(symbol, regex);
        return (format);
    };
    DrapoGlobalization.prototype.GetResourceValueDictionary = function (dictonary, dateFormatType) {
        for (var i = 0; i < dictonary.length; i++) {
            var resourceEntry = dictonary[i];
            if (resourceEntry[0] === dateFormatType)
                return (resourceEntry[1]);
        }
        return ('');
    };
    DrapoGlobalization.prototype.GetResourceCultureDictionary = function (resource, culture) {
        if (culture == null)
            culture = this.GetCulture();
        for (var i = 0; i < resource.length; i++) {
            var resourceEntry = resource[i];
            if (resourceEntry[0] == culture)
                return (resourceEntry[1]);
        }
        return (null);
    };
    DrapoGlobalization.prototype.GetNumberSizeTypeName = function (type, culture) {
        if (culture === void 0) { culture = null; }
        if (culture == null)
            culture = this.GetCulture();
        return (this.GetResourceValue(this._resourceNumberSizeType, type, culture));
    };
    return DrapoGlobalization;
}());

"use strict";
var DrapoLinkedCube = (function () {
    function DrapoLinkedCube() {
        this._head = null;
    }
    DrapoLinkedCube.prototype.AddOrUpdate = function (context, value) {
        if (this._head === null) {
            this._head = this.CreateNode(context, value);
            return (this._head);
        }
        if (context === null)
            throw new Error('Drapo: The context in DrapoLinkedcube cant be null');
        if (this._head.Context.length != context.length)
            throw new Error('Drapo: The context to insert in linked cube must be the same lenght of the context lenght of head');
        var node = this._head;
        var nodePrevious = null;
        var nodePreviousIndex = null;
        var compare = 0;
        for (var i = 0; i < context.length; i++) {
            var contextValue = context[i];
            while ((compare = this.Compare(contextValue, node.Context[i])) !== 0) {
                if (compare < 0) {
                    var nodeNew = this.CreateNode(context, value);
                    this.AddNodeNext(nodeNew, node, i);
                    if (node === this._head)
                        this._head = nodeNew;
                    else if (nodePrevious !== null)
                        this.AddNodeNext(nodePrevious, nodeNew, nodePreviousIndex);
                    return (nodeNew);
                }
                else {
                    nodePrevious = node;
                    nodePreviousIndex = i;
                    var nodeNext = this.GetNodeNext(node, i);
                    if (nodeNext === null) {
                        var nodeNew = this.CreateNode(context, value);
                        this.AddNodeNext(node, nodeNew, i);
                        return (nodeNew);
                    }
                    else {
                        node = nodeNext;
                    }
                }
            }
        }
        node.Value = value;
        return (node);
    };
    DrapoLinkedCube.prototype.Get = function (context) {
        var entry = null;
        var node = this._head;
        var index = 0;
        while (node !== null) {
            if (this.IsEqualContext(node.Context, context))
                return (node.Value);
            entry = this.GetNextInContext(node, context, index);
            if (entry === null)
                break;
            node = entry[0];
            index = entry[1];
        }
        return (null);
    };
    DrapoLinkedCube.prototype.GetNode = function (context) {
        if (context == null)
            return (null);
        var entry = null;
        var node = this._head;
        var index = 0;
        while (node !== null) {
            if (this.IsEqualContext(context, node.Context, false))
                return (node);
            entry = this.GetNextInContext(node, context, index);
            if (entry === null)
                break;
            node = entry[0];
            index = entry[1];
        }
        return (null);
    };
    DrapoLinkedCube.prototype.Clear = function () {
        this._head = null;
    };
    DrapoLinkedCube.prototype.Remove = function (context) {
        if (this._head === null)
            return (null);
        var node = this._head;
        var nodePrevious = null;
        var nodePreviousIndex = null;
        var compare = 0;
        for (var i = 0; ((i < context.length) && (node !== null)); i++) {
            var contextValue = context[i];
            while ((compare = this.Compare(contextValue, node.Context[i])) !== 0) {
                if (compare < 0) {
                    return (null);
                }
                else {
                    nodePrevious = node;
                    nodePreviousIndex = i;
                    var nodeNext = this.GetNodeNext(node, i);
                    node = nodeNext;
                    if (node === null)
                        return (null);
                }
            }
        }
        if (node !== null) {
            var isContextToRemove = context.length < this._head.Context.length;
            var nodeNext = this.GetNextReverse(node, isContextToRemove ? context.length - 1 : null);
            var nodeNextIndex = this.GetNextReverseIndex(node, isContextToRemove ? context.length - 1 : null);
            if (nodePrevious === null) {
                if (nodeNext !== null) {
                    this.MoveLinks(nodeNext, node, nodeNextIndex);
                }
                this._head = nodeNext;
            }
            else {
                this.MoveLinks(nodeNext, node, nodeNextIndex);
                this.AddNodeNext(nodePrevious, nodeNext, nodePreviousIndex);
            }
        }
        return (node);
    };
    DrapoLinkedCube.prototype.GetHead = function () {
        return (this._head);
    };
    DrapoLinkedCube.prototype.CreateNode = function (context, value) {
        var node = new DrapoLinkedCubeNode();
        node.Context = context;
        node.Value = value;
        return (node);
    };
    DrapoLinkedCube.prototype.GetNextInContext = function (node, context, index) {
        for (var i = index; i < context.length; i++) {
            var compare = this.Compare(context[i], node.Context[i]);
            if (compare < 0)
                return (null);
            else if (compare === 0)
                continue;
            if ((node.Next === null) || (node.Next.length <= i))
                return (null);
            return ([node.Next[i], i]);
        }
        return (null);
    };
    DrapoLinkedCube.prototype.Compare = function (value1, value2) {
        if (value1 < value2)
            return (-1);
        if (value1 > value2)
            return (1);
        return (0);
    };
    DrapoLinkedCube.prototype.GetNextReverse = function (node, index) {
        if (index === void 0) { index = null; }
        if (node.Next === null)
            return (null);
        var start = index !== null ? index : node.Next.length - 1;
        if (start >= node.Next.length)
            start = node.Next.length - 1;
        for (var i = start; i >= 0; i--) {
            var nodeNext = node.Next[i];
            if (nodeNext !== null)
                return (nodeNext);
        }
        return (null);
    };
    DrapoLinkedCube.prototype.GetNextReverseIndex = function (node, index) {
        if (index === void 0) { index = null; }
        if (node.Next === null)
            return (null);
        var start = index !== null ? index : node.Next.length - 1;
        if (start >= node.Next.length)
            start = node.Next.length - 1;
        for (var i = start; i >= 0; i--) {
            var nodeNext = node.Next[i];
            if (nodeNext !== null)
                return (i);
        }
        return (null);
    };
    DrapoLinkedCube.prototype.IsEqualContext = function (context1, context2, checkSize) {
        if (checkSize === void 0) { checkSize = true; }
        if ((checkSize) && (context1.length != context2.length))
            return (false);
        for (var i = 0; i < context1.length; i++)
            if (context1[i] !== context2[i])
                return (false);
        return (true);
    };
    DrapoLinkedCube.prototype.EnsureNodeNext = function (node, index) {
        if (node.Next === null)
            node.Next = [];
        while (node.Next.length <= index)
            node.Next.push(null);
    };
    DrapoLinkedCube.prototype.AddNodeNext = function (node, nodeNext, index) {
        this.EnsureNodeNext(node, index);
        node.Next[index] = nodeNext;
        if (nodeNext === null)
            return;
        if (nodeNext.Next === null)
            return;
        this.MoveLinks(node, nodeNext, index);
    };
    DrapoLinkedCube.prototype.MoveLinks = function (node, nodeNext, index) {
        if (index === void 0) { index = null; }
        if (node === null)
            return;
        if (nodeNext === null)
            return;
        if (nodeNext.Next === null)
            return;
        this.EnsureNodeNext(node, index);
        for (var i = 0; ((index === null) || (i < index)) && (i < nodeNext.Next.length); i++) {
            if (node.Context[i] !== nodeNext.Context[i])
                break;
            if (node.Next[i] === null)
                node.Next[i] = nodeNext.Next[i];
            nodeNext.Next[i] = null;
        }
    };
    DrapoLinkedCube.prototype.GetNodeNext = function (node, index) {
        if (node.Next === null)
            return (null);
        if (node.Next.length <= index)
            return (null);
        return (node.Next[index]);
    };
    DrapoLinkedCube.prototype.ToList = function (node) {
        if (node === void 0) { node = null; }
        var list = [];
        if (node === null)
            node = this._head;
        if (node != null)
            this.AppendNodeToList(list, node);
        return (list);
    };
    DrapoLinkedCube.prototype.AppendNodeToList = function (list, node) {
        list.push(node);
        if (node.Next == null)
            return;
        for (var i = 0; i < node.Next.length; i++) {
            var nodeNext = node.Next[i];
            if (nodeNext !== null)
                this.AppendNodeToList(list, nodeNext);
        }
    };
    DrapoLinkedCube.prototype.ToListValues = function (node) {
        if (node === void 0) { node = null; }
        var listValues = [];
        var list = this.ToList(node);
        for (var i = 0; i < list.length; i++)
            listValues.push(list[i].Value);
        return (listValues);
    };
    return DrapoLinkedCube;
}());

"use strict";
var DrapoLinkedCubeNode = (function () {
    function DrapoLinkedCubeNode() {
        this.Value = null;
        this.Context = null;
        this.Next = null;
    }
    return DrapoLinkedCubeNode;
}());

"use strict";
var DrapoLinkedList = (function () {
    function DrapoLinkedList() {
        this._head = null;
    }
    DrapoLinkedList.prototype.AddOrUpdate = function (index, value) {
        if (this._head === null) {
            this._head = new DrapoLinkedListNode();
            this._head.Index = index;
        }
        var node = this._head;
        var isEnd = false;
        while (node.Index !== index) {
            if ((isEnd = (node.Next === null)) || (node.Next.Index > index)) {
                var nodeNew = new DrapoLinkedListNode();
                nodeNew.Index = index;
                if ((isEnd) && (node.Index < index)) {
                    node.Next = nodeNew;
                }
                else if (node === this._head) {
                    nodeNew.Next = node;
                    this._head = nodeNew;
                }
                else {
                    nodeNew.Next = node.Next;
                    node.Next = nodeNew;
                }
                node = nodeNew;
            }
            else {
                node = node.Next;
            }
        }
        node.Value = value;
    };
    DrapoLinkedList.prototype.Get = function (index) {
        var node = this._head;
        while (node !== null) {
            if (node.Index < index)
                node = node.Next;
            else if (node.Index === index)
                return (node.Value);
        }
        return (null);
    };
    DrapoLinkedList.prototype.GetHead = function () {
        return (this._head);
    };
    return DrapoLinkedList;
}());

"use strict";
var DrapoLinkedListNode = (function () {
    function DrapoLinkedListNode() {
        this.Value = null;
        this.Next = null;
        this.Index = null;
    }
    return DrapoLinkedListNode;
}());

"use strict";
var DrapoLinkedTable = (function () {
    function DrapoLinkedTable() {
        this._head = null;
    }
    DrapoLinkedTable.prototype.AddOrUpdate = function (row, column, value) {
        if (this._head === null) {
            this._head = new DrapoLinkedTableNode();
            this._head.Row = row;
            this._head.Column = column;
        }
        var node = this._head;
        var nodeRowPrevious = null;
        var isEnd = false;
        while (node.Row !== row) {
            nodeRowPrevious = node;
            if ((isEnd = (node.NextRow === null)) || (node.NextRow.Row > row)) {
                var nodeRow = new DrapoLinkedTableNode();
                nodeRow.Row = row;
                nodeRow.Column = column;
                if ((isEnd) && (node.Row < row)) {
                    node.NextRow = nodeRow;
                }
                else if (node === this._head) {
                    nodeRow.NextRow = node;
                    this._head = nodeRow;
                }
                else {
                    nodeRow.NextRow = node.NextRow;
                    node.NextRow = nodeRow;
                }
                node = nodeRow;
            }
            else {
                node = node.NextRow;
            }
        }
        var nodeRowHead = node;
        while (node.Column !== column) {
            if ((isEnd = (node.NextCell === null)) || (node.NextCell.Column > column)) {
                var nodeCell = new DrapoLinkedTableNode();
                nodeCell.Row = row;
                nodeCell.Column = column;
                if ((isEnd) && (node.Column < column)) {
                    node.NextCell = nodeCell;
                }
                else if (node === nodeRowHead) {
                    nodeCell.NextCell = node;
                    if (nodeRowHead.Row !== nodeRowPrevious.Row)
                        nodeRowPrevious.NextRow = nodeCell;
                }
                else {
                    nodeCell.NextCell = node.NextCell;
                    node.NextCell = nodeCell;
                }
                node = nodeCell;
            }
            else {
                node = node.NextCell;
            }
        }
        node.Value = value;
    };
    DrapoLinkedTable.prototype.Get = function (row, column) {
        var node = this._head;
        while (node !== null) {
            if (node.Row < row) {
                node = node.NextRow;
            }
            else if (node.Row > row) {
                return (null);
            }
            else if (node.Row === row) {
                if (node.Column < column)
                    node = node.NextCell;
                else if (node.Column > column)
                    return (null);
                else
                    return (node.Value);
            }
        }
        return (null);
    };
    DrapoLinkedTable.prototype.GetHead = function () {
        return (this._head);
    };
    DrapoLinkedTable.prototype.Delete = function (row, column) {
    };
    return DrapoLinkedTable;
}());

"use strict";
var DrapoLinkedTableNode = (function () {
    function DrapoLinkedTableNode() {
        this.Value = null;
        this.NextCell = null;
        this.NextRow = null;
        this.Row = null;
        this.Column = null;
    }
    return DrapoLinkedTableNode;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoLogger = (function () {
    function DrapoLogger(application) {
        this._showHtml = false;
        this._allowVerbose = false;
        this._allowError = true;
        this._application = application;
    }
    Object.defineProperty(DrapoLogger.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoLogger.prototype, "ShowHtml", {
        set: function (value) {
            this._showHtml = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoLogger.prototype, "ShowHTML", {
        get: function () {
            return (this._showHtml);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoLogger.prototype, "AllowVerbose", {
        get: function () {
            return (this._allowVerbose);
        },
        set: function (value) {
            this._allowVerbose = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoLogger.prototype, "AllowError", {
        get: function () {
            return (this._allowError);
        },
        set: function (value) {
            this._allowError = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoLogger.prototype.WriteVerbose = function (message) {
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        if (this.AllowVerbose)
            console.log(this.CreateMessage(message, parameters));
    };
    DrapoLogger.prototype.WriteError = function (message, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        error = this.CreateMessage(message, parameters);
                        return [4, this.Application.Debugger.AddError(error)];
                    case 1:
                        _a.sent();
                        if (this.AllowError)
                            console.log(error);
                        return [2];
                }
            });
        });
    };
    DrapoLogger.prototype.CreateMessage = function (message, parameters) {
        var messageReplaced = message;
        for (var i = 0; i < parameters.length; i++)
            messageReplaced = messageReplaced.replace("{" + i + "}", parameters[i]);
        return (messageReplaced);
    };
    return DrapoLogger;
}());

"use strict";
var DrapoMessage = (function () {
    function DrapoMessage() {
        this._action = null;
        this._dataKey = null;
        this._sector = null;
        this._tag = null;
        this._data = null;
    }
    Object.defineProperty(DrapoMessage.prototype, "Action", {
        get: function () {
            return (this._action);
        },
        set: function (value) {
            this._action = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoMessage.prototype, "DataKey", {
        get: function () {
            return (this._dataKey);
        },
        set: function (value) {
            this._dataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoMessage.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoMessage.prototype, "Tag", {
        get: function () {
            return (this._tag);
        },
        set: function (value) {
            this._tag = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoMessage.prototype, "Data", {
        get: function () {
            return (this._data);
        },
        set: function (value) {
            this._data = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoMessage;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoModelHandler = (function () {
    function DrapoModelHandler(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoModelHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoModelHandler.prototype.HasContentModelContext = function (content) {
        return (content.indexOf('d-model') > -1);
    };
    DrapoModelHandler.prototype.ResolveOnModelChange = function (contextItem, el) {
        return __awaiter(this, void 0, void 0, function () {
            var onModel, sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onModel = el.getAttribute('d-on-model-change');
                        if ((onModel === null) || (onModel === undefined))
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        return [4, this.Application.FunctionHandler.ResolveFunction(sector, contextItem, null, null, onModel)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveOnModelComplete = function (contextItem, el) {
        return __awaiter(this, void 0, void 0, function () {
            var onModel, sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        onModel = el.getAttribute('d-on-model-complete');
                        if ((onModel === null) || (onModel === undefined))
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        return [4, this.Application.FunctionHandler.ResolveFunction(sector, contextItem, null, null, onModel)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModel = function (context, renderContext, el, sector, canBind, isContext) {
        if (isContext === void 0) { isContext = true; }
        return __awaiter(this, void 0, void 0, function () {
            var model, isMustacheContext, isMustacheOnly, mustache, mustacheParts, dataFields, onModelInitialize, _a, canNotify, modelNotify, modelEvents, mustacheResolved, modelOrValue, _b, updated, tag, canRemoveModel, dataKey;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        model = el.getAttribute('d-model');
                        if (model == null)
                            return [2, (false)];
                        isMustacheContext = this.Application.Barber.HasMustacheContext(model, sector, renderContext);
                        if (isContext !== isMustacheContext)
                            return [2];
                        isMustacheOnly = this.Application.Parser.IsMustacheOnly(model, true);
                        mustache = isMustacheOnly ? model : null;
                        mustacheParts = isMustacheOnly ? this.Application.Parser.ParseMustache(model) : null;
                        dataFields = isMustacheOnly ? this.Application.Solver.ResolveDataFields(mustacheParts) : null;
                        onModelInitialize = el.getAttribute('d-on-model-initialize');
                        _a = (onModelInitialize !== null) && (onModelInitialize !== undefined);
                        if (!_a) return [3, 2];
                        return [4, this.Application.Solver.ExistDataPath(context, sector, mustacheParts)];
                    case 1:
                        _a = (!(_c.sent()));
                        _c.label = 2;
                    case 2:
                        if (!_a) return [3, 4];
                        return [4, this.Application.FunctionHandler.ResolveFunction(sector, context.Item, null, null, onModelInitialize)];
                    case 3:
                        _c.sent();
                        if ((!isContext) || (!context.CanUpdateTemplate))
                            el.removeAttribute('d-on-model-initialize');
                        _c.label = 4;
                    case 4:
                        canNotify = true;
                        modelNotify = el.getAttribute('d-modelNotify');
                        if (modelNotify != null) {
                            canNotify = modelNotify === 'true';
                            if ((isContext) && (context.CanUpdateTemplate))
                                el.removeAttribute('d-modelNotify');
                        }
                        modelEvents = this.Application.Parser.ParseEvents(el.getAttribute('d-model-event'));
                        if (modelEvents.length === 0)
                            modelEvents.push('change');
                        if (!((isMustacheOnly) && (context.CanUpdateTemplate))) return [3, 6];
                        return [4, this.Application.Solver.ResolveDataPathMustache(context, null, el, sector, mustacheParts)];
                    case 5:
                        mustacheResolved = _c.sent();
                        if (mustacheResolved !== null)
                            el.setAttribute('d-model', mustacheResolved);
                        _c.label = 6;
                    case 6:
                        if (!isMustacheOnly) return [3, 7];
                        _b = model;
                        return [3, 9];
                    case 7: return [4, this.ResolveValueExpression(context, el, sector, model, canBind)];
                    case 8:
                        _b = _c.sent();
                        _c.label = 9;
                    case 9:
                        modelOrValue = _b;
                        updated = false;
                        tag = el.tagName.toLowerCase();
                        if (!(tag === 'input')) return [3, 11];
                        return [4, this.ResolveModelInput(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, this.Application.Parser.ParseEvents(el.getAttribute('d-model-event-cancel')), canNotify)];
                    case 10:
                        updated = _c.sent();
                        return [3, 26];
                    case 11:
                        if (!(tag === 'select')) return [3, 13];
                        return [4, this.ResolveModelSelect(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify)];
                    case 12:
                        updated = _c.sent();
                        return [3, 26];
                    case 13:
                        if (!(tag === 'textarea')) return [3, 15];
                        return [4, this.ResolveModelTextArea(context, el, sector, modelOrValue, mustache, mustacheParts, dataFields, canBind, modelEvents, this.Application.Parser.ParseEvents(el.getAttribute('d-model-event-cancel')), canNotify)];
                    case 14:
                        updated = _c.sent();
                        return [3, 26];
                    case 15:
                        if (!(tag === 'span')) return [3, 17];
                        return [4, this.ResolveModelSpan(context, el, sector, modelOrValue, mustache, mustacheParts, dataFields, canBind, ((isContext) && (!context.CanUpdateTemplate)))];
                    case 16:
                        updated = _c.sent();
                        return [3, 26];
                    case 17:
                        if (!(tag === 'li')) return [3, 19];
                        return [4, this.ResolveModelLI(context, el, sector, model, mustache, mustacheParts, dataFields, canBind)];
                    case 18:
                        updated = _c.sent();
                        return [3, 26];
                    case 19:
                        if (!(tag === 'div')) return [3, 20];
                        updated = true;
                        return [3, 26];
                    case 20:
                        if (!(tag === 'label')) return [3, 22];
                        return [4, this.ResolveModelSpan(context, el, sector, modelOrValue, mustache, mustacheParts, dataFields, canBind, ((isContext) && (!context.CanUpdateTemplate)))];
                    case 21:
                        updated = _c.sent();
                        return [3, 26];
                    case 22:
                        if (!(tag === 'button')) return [3, 24];
                        return [4, this.ResolveModelSpan(context, el, sector, modelOrValue, mustache, mustacheParts, dataFields, canBind, ((isContext) && (!context.CanUpdateTemplate)))];
                    case 23:
                        updated = _c.sent();
                        return [3, 26];
                    case 24: return [4, this.Application.ExceptionHandler.HandleError('DrapoModelHandler - ResolveModel - model not supported in tag: {0}', tag)];
                    case 25:
                        _c.sent();
                        _c.label = 26;
                    case 26:
                        if ((updated) && (isContext)) {
                            canRemoveModel = ((!context.CanUpdateTemplate) || (context.IsInsideRecursion));
                            dataKey = isMustacheOnly ? this.Application.Solver.ResolveDataKey(mustacheParts) : null;
                            if ((canRemoveModel) && ((!isMustacheOnly) || (dataKey === context.Item.Key)))
                                el.removeAttribute('d-model');
                        }
                        return [2, (updated)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveValueExpression = function (context, el, sector, model, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var mustaches, i, mustache, mustacheParts, dataKey, dataFields, _a, _b, executionContext, value, valueString;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!canBind) return [3, 4];
                        mustaches = this.Application.Parser.ParseMustaches(model, true);
                        i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(i < mustaches.length)) return [3, 4];
                        mustache = mustaches[i];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                        _b = (_a = this.Application.Binder).BindReader;
                        return [4, this.Application.Solver.ResolveDataPathObjectItem(context.Item, dataKey, sector)];
                    case 2:
                        _b.apply(_a, [_c.sent(), el, dataFields]);
                        _c.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        executionContext = new DrapoExecutionContext(this.Application);
                        return [4, this.Application.FunctionHandler.ResolveFunctions(sector, context.Item, el, executionContext, model, false)];
                    case 5:
                        value = _c.sent();
                        valueString = this.Application.Solver.EnsureString(value);
                        if (!(valueString != model)) return [3, 7];
                        return [4, this.ResolveValueExpression(context, el, sector, valueString, canBind)];
                    case 6: return [2, (_c.sent())];
                    case 7: return [2, (valueString)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInput = function (context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        type = el.getAttribute('type');
                        if (type == 'checkbox')
                            return [2, (this.ResolveModelInputCheckbox(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify))];
                        if (type == 'text')
                            return [2, (this.ResolveModelInputText(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify))];
                        if (type == 'number')
                            return [2, (this.ResolveModelInputNumber(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify))];
                        if (type == 'password')
                            return [2, (this.ResolveModelInputPassword(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify))];
                        if (type == 'hidden')
                            return [2, (this.ResolveModelInputHidden(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify))];
                        if (type == 'range')
                            return [2, (this.ResolveModelInputRange(context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify))];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoModelHandler - ResolveModelInput - model not supported in input type: {0}', type)];
                    case 1:
                        _a.sent();
                        return [2, (false)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInputCheckbox = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = this.Application.Solver).ResolveConditional;
                        return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, null, canNotify)];
                    case 1: return [4, _b.apply(_a, [_c.sent()])];
                    case 2:
                        value = _c.sent();
                        element.checked = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelTextArea = function (context, el, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(mustacheParts != null)) return [3, 2];
                        return [4, this.Application.Solver.ResolveDataPath(context, null, el, sector, mustacheParts, canBind, canBind, modelEvents, modelEventsCancel, canNotify)];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = model;
                        _b.label = 3;
                    case 3:
                        value = _a;
                        el.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInputText = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, _a, elementInput;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(mustacheParts != null)) return [3, 2];
                        return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, modelEventsCancel, canNotify)];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = model;
                        _b.label = 3;
                    case 3:
                        value = _a;
                        elementInput = element;
                        if (elementInput.value !== value)
                            elementInput.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInputNumber = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, elementInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, modelEventsCancel, canNotify)];
                    case 1:
                        value = _a.sent();
                        elementInput = element;
                        if (elementInput.value !== value)
                            elementInput.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInputPassword = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, modelEventsCancel, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, elementInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, modelEventsCancel, canNotify)];
                    case 1:
                        value = _a.sent();
                        elementInput = element;
                        elementInput.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInputHidden = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, elementInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, null, canNotify)];
                    case 1:
                        value = _a.sent();
                        elementInput = element;
                        if (elementInput.value !== value)
                            elementInput.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelInputRange = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, elementInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, null, canNotify)];
                    case 1:
                        value = _a.sent();
                        elementInput = element;
                        if (elementInput.value !== value)
                            elementInput.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelSelect = function (context, element, sector, model, mustache, mustacheParts, dataFields, canBind, modelEvents, canNotify) {
        return __awaiter(this, void 0, void 0, function () {
            var value, elementSelect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Solver.ResolveDataPath(context, null, element, sector, mustacheParts, canBind, canBind, modelEvents, null, canNotify)];
                    case 1:
                        value = _a.sent();
                        elementSelect = element;
                        if (elementSelect.value !== value)
                            elementSelect.value = value;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelSpan = function (context, el, sector, model, mustache, mustacheParts, dataFields, canBind, canClean) {
        return __awaiter(this, void 0, void 0, function () {
            var updated, format, value, _a, valueFormatted, formatResolved, culture, cultureResolved, formatTimezone, applyTimezone, elementSpan;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        updated = true;
                        format = el.getAttribute("d-format");
                        if (!(mustacheParts != null)) return [3, 2];
                        return [4, this.Application.Solver.ResolveDataPath(context, null, el, sector, mustacheParts, canBind, false)];
                    case 1:
                        _a = _b.sent();
                        return [3, 3];
                    case 2:
                        _a = model;
                        _b.label = 3;
                    case 3:
                        value = _a;
                        if (this.Application.Parser.IsMustache(value)) {
                            el.setAttribute('d-model', value);
                            value = '';
                            updated = false;
                        }
                        else if ((canClean) && (format != null)) {
                            el.removeAttribute('d-model');
                        }
                        valueFormatted = value;
                        if (!(format != null)) return [3, 10];
                        if (canClean)
                            el.removeAttribute('d-format');
                        formatResolved = format;
                        _b.label = 4;
                    case 4:
                        if (!this.Application.Parser.HasMustache(formatResolved)) return [3, 6];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, null, null, formatResolved, el, sector, false)];
                    case 5:
                        formatResolved = _b.sent();
                        return [3, 4];
                    case 6:
                        culture = el.getAttribute("d-culture");
                        cultureResolved = culture;
                        if (!(cultureResolved != null)) return [3, 9];
                        if (canClean)
                            el.removeAttribute('d-culture');
                        _b.label = 7;
                    case 7:
                        if (!this.Application.Parser.HasMustache(cultureResolved)) return [3, 9];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, null, null, cultureResolved, el, sector, false)];
                    case 8:
                        cultureResolved = _b.sent();
                        return [3, 7];
                    case 9:
                        formatTimezone = el.getAttribute("d-format-timezone");
                        if ((canClean) && (formatTimezone != null))
                            el.removeAttribute('d-format-timezone');
                        applyTimezone = (formatTimezone != 'false');
                        valueFormatted = this.Application.Formatter.Format(value, formatResolved, cultureResolved, applyTimezone);
                        _b.label = 10;
                    case 10:
                        elementSpan = el;
                        if (elementSpan.textContent !== valueFormatted)
                            elementSpan.textContent = valueFormatted;
                        return [2, (updated)];
                }
            });
        });
    };
    DrapoModelHandler.prototype.ResolveModelLI = function (context, el, sector, model, mustache, mustacheParts, dataFields, canBind) {
        return __awaiter(this, void 0, void 0, function () {
            var updated, value, elementLI;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updated = true;
                        return [4, this.Application.Solver.ResolveDataPath(context, null, el, sector, mustacheParts, canBind, false)];
                    case 1:
                        value = _a.sent();
                        if (this.Application.Parser.IsMustache(value)) {
                            el.setAttribute('d-model', value);
                            value = '';
                            updated = false;
                        }
                        elementLI = el;
                        if (elementLI.textContent !== value)
                            elementLI.textContent = value;
                        return [2, (updated)];
                }
            });
        });
    };
    return DrapoModelHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoObserver = (function () {
    function DrapoObserver(application) {
        this._dataBarberDataKeys = [];
        this._dataBarberFields = [];
        this._dataBarberElements = [];
        this._dataForDataKey = [];
        this._dataForElement = [];
        this._dataIncrementalKey = [];
        this._dataIncrementalElements = [];
        this._IsEnabledNotifyIncremental = true;
        this._dataDelayKey = [];
        this._dataDelayField = [];
        this._dataDelayElements = [];
        this._dataStorageKey = [];
        this._dataStorageKeyFields = [];
        this._dataStorageKeyReferenceKey = [];
        this._dataStorageType = [];
        this._dataAuthorizationKey = [];
        this._dataAuthorizationType = [];
        this._dataLinkDataKey = [];
        this._dataLinkReferenceKey = [];
        this._dataLinkDataFields = [];
        this._dataComponentKey = [];
        this._dataComponentField = [];
        this._dataComponentElements = [];
        this._dataComponentFunction = [];
        this._dataComponentElementsFocus = [];
        this._lockedData = [];
        this._application = application;
    }
    Object.defineProperty(DrapoObserver.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoObserver.prototype, "IsEnabledNotifyIncremental", {
        get: function () {
            return (this._IsEnabledNotifyIncremental);
        },
        set: function (value) {
            this._IsEnabledNotifyIncremental = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoObserver.prototype.GetBarberDataKeyIndex = function (dataKey) {
        for (var i = 0; i < this._dataBarberDataKeys.length; i++) {
            if (this._dataBarberDataKeys[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.GetForDataKeyIndex = function (dataKey) {
        for (var i = 0; i < this._dataForDataKey.length; i++) {
            if (this._dataForDataKey[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.GetDataIncrementalKeyIndex = function (dataKey) {
        for (var i = 0; i < this._dataIncrementalKey.length; i++) {
            if (this._dataIncrementalKey[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.CreateBarberDataKeyIndex = function (dataKey) {
        var index = this._dataBarberDataKeys.push(dataKey);
        this._dataBarberFields.push([]);
        this._dataBarberElements.push([]);
        return (index - 1);
    };
    DrapoObserver.prototype.CreateForDataKeyIndex = function (dataKey) {
        var index = this._dataForDataKey.push(dataKey);
        this._dataForElement.push([]);
        return (index - 1);
    };
    DrapoObserver.prototype.CreateDataIncrementalKeyIndex = function (dataKey) {
        var index = this._dataIncrementalKey.push(dataKey);
        this._dataIncrementalElements.push([]);
        return (index - 1);
    };
    DrapoObserver.prototype.SubscribeBarber = function (element, dataKey, dataFields) {
        var dataKeyIndex = this.GetBarberDataKeyIndex(dataKey);
        if (dataKeyIndex == null)
            dataKeyIndex = this.CreateBarberDataKeyIndex(dataKey);
        var dataBarberFields = this._dataBarberFields[dataKeyIndex];
        var elements = this._dataBarberElements[dataKeyIndex];
        for (var i = 0; i < dataBarberFields.length; i++) {
            if (!this.IsEqualDataFields(dataBarberFields[i], dataFields))
                continue;
            if (elements[i] !== element)
                continue;
            return (false);
        }
        dataBarberFields.push(dataFields);
        elements.push(element);
        return (true);
    };
    DrapoObserver.prototype.UnsubscribeBarber = function (dataKey) {
        var dataKeyIndex = this.GetBarberDataKeyIndex(dataKey);
        if (dataKeyIndex === null)
            return;
        this._dataBarberDataKeys.splice(dataKeyIndex, 1);
        this._dataBarberElements.splice(dataKeyIndex, 1);
        this._dataBarberFields.splice(dataKeyIndex, 1);
    };
    DrapoObserver.prototype.SubscribeFor = function (elementForTemplate, dataKey) {
        var dataKeyIndex = this.GetForDataKeyIndex(dataKey);
        if (dataKeyIndex == null)
            dataKeyIndex = this.CreateForDataKeyIndex(dataKey);
        this._dataForElement[dataKeyIndex].push(elementForTemplate);
    };
    DrapoObserver.prototype.SubscribeStorage = function (dataKey, dataFields, dataReferenceKey, type) {
        if (type === void 0) { type = DrapoStorageLinkType.Reload; }
        var dataField = ((dataFields != null) && (dataFields.length > 0)) ? dataFields[0] : null;
        var dataKeyIndex = this.GetStorageKeyIndex(dataKey);
        if (dataKeyIndex == null)
            dataKeyIndex = this.CreateStorageDataKeyIndex(dataKey);
        var dataStorageFields = this._dataStorageKeyFields[dataKeyIndex];
        var dataReferenceKeys = this._dataStorageKeyReferenceKey[dataKeyIndex];
        var dataTypes = this._dataStorageType[dataKeyIndex];
        for (var i = 0; i < dataStorageFields.length; i++) {
            if ((dataStorageFields[i] === dataField) && (dataReferenceKeys[i] === dataReferenceKey))
                return;
        }
        dataStorageFields.push(dataField);
        dataReferenceKeys.push(dataReferenceKey);
        dataTypes.push(type);
    };
    DrapoObserver.prototype.UnsubscribeStorage = function (dataKey) {
        this.UnsubscribeStorageReferenceKey(dataKey);
        var dataKeyIndex = this.GetStorageKeyIndex(dataKey);
        if (dataKeyIndex === null)
            return;
        this._dataStorageKey.splice(dataKeyIndex, 1);
        this._dataStorageKeyFields.splice(dataKeyIndex, 1);
        this._dataStorageKeyReferenceKey.splice(dataKeyIndex, 1);
        this._dataStorageType.splice(dataKeyIndex, 1);
    };
    DrapoObserver.prototype.UnsubscribeStorageReferenceKey = function (dataKey) {
        for (var i = this._dataStorageKey.length - 1; i >= 0; i--) {
            var references = this._dataStorageKeyReferenceKey[i];
            for (var j = references.length - 1; j >= 0; j--) {
                if (references[j] !== dataKey)
                    continue;
                this._dataStorageKeyFields[i].splice(j, 1);
                this._dataStorageKeyReferenceKey[i].splice(j, 1);
                this._dataStorageType[i].splice(j, 1);
            }
            if (references.length !== 0)
                continue;
            this._dataStorageKey.splice(i, 1);
            this._dataStorageKeyFields.splice(i, 1);
            this._dataStorageKeyReferenceKey.splice(i, 1);
            this._dataStorageType.splice(i, 1);
        }
    };
    DrapoObserver.prototype.UnsubscribeFor = function (dataKey, elementForTemplate) {
        if (elementForTemplate === void 0) { elementForTemplate = null; }
        var dataKeyIndex = this.GetForDataKeyIndex(dataKey);
        if (dataKeyIndex == null)
            return;
        if (elementForTemplate === null) {
            this._dataForDataKey.splice(dataKeyIndex, 1);
            this._dataForElement.splice(dataKeyIndex, 1);
            return;
        }
        var dataElements = this._dataForElement[dataKeyIndex];
        for (var i = dataElements.length - 1; i >= 0; i--) {
            var dataElementParent = dataElements[i];
            if (dataElementParent != elementForTemplate)
                continue;
            this._dataForElement[dataKeyIndex].splice(i, 1);
        }
    };
    DrapoObserver.prototype.Notify = function (dataKey, dataIndex, dataFields, canUseDifference, canNotifyStorage, notifyStorageDataKey) {
        if (canUseDifference === void 0) { canUseDifference = true; }
        if (canNotifyStorage === void 0) { canNotifyStorage = true; }
        if (notifyStorageDataKey === void 0) { notifyStorageDataKey = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.IsLocked(dataKey))
                            return [2];
                        return [4, this.Application.Debugger.AddNotify(dataKey)];
                    case 1:
                        _a.sent();
                        if (!canNotifyStorage) return [3, 3];
                        return [4, this.NotifyStorage(dataKey, dataFields, notifyStorageDataKey)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4, this.NotifyFor(dataKey, dataIndex, dataFields, canUseDifference)];
                    case 4:
                        _a.sent();
                        return [4, this.NotifyBarber(dataKey, dataFields)];
                    case 5:
                        _a.sent();
                        return [4, this.NotifyLink(dataKey, dataFields)];
                    case 6:
                        _a.sent();
                        return [4, this.NotifyComponent(dataKey, dataFields)];
                    case 7:
                        _a.sent();
                        return [4, this.Application.Storage.FireEventOnNotify(dataKey)];
                    case 8:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.NotifyFor = function (dataKey, dataIndex, dataFields, canUseDifference, type) {
        if (canUseDifference === void 0) { canUseDifference = true; }
        if (type === void 0) { type = DrapoStorageLinkType.Render; }
        return __awaiter(this, void 0, void 0, function () {
            var index, dataElements, i, dataElement, elParent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        index = this.GetForDataKeyIndex(dataKey);
                        if (index === null)
                            return [2];
                        dataElements = this._dataForElement[index];
                        i = dataElements.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 6];
                        dataElement = dataElements[i];
                        if (!(dataElement.parentElement === null)) return [3, 2];
                        dataElements.splice(i, 1);
                        return [3, 5];
                    case 2:
                        if (!!this.Application.SectorContainerHandler.IsElementContainerized(dataElement)) return [3, 5];
                        elParent = dataElement.parentElement;
                        return [4, this.Application.ControlFlow.ResolveControlFlowForElement(dataElement, false, canUseDifference, type)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.ComponentHandler.ResolveComponents(elParent)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i--;
                        return [3, 1];
                    case 6: return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.NotifyBarber = function (dataKey, dataFields) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex, dataField, dataElements, dataBarberFields, i, element, dataBarberFieldsCurrent, sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyIndex = this.GetBarberDataKeyIndex(dataKey);
                        if (dataKeyIndex === null)
                            return [2];
                        dataField = ((dataFields != null) && (dataFields.length > 0)) ? dataFields[0] : null;
                        dataElements = this._dataBarberElements[dataKeyIndex];
                        dataBarberFields = this._dataBarberFields[dataKeyIndex];
                        i = dataElements.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 5];
                        element = dataElements[i];
                        if (!this.Application.Document.IsElementAttached(element)) return [3, 3];
                        dataBarberFieldsCurrent = dataBarberFields[i];
                        if (!this.IsCompatibleDataFields(dataFields, dataBarberFieldsCurrent))
                            return [3, 4];
                        sector = this.Application.Document.GetSector(element);
                        return [4, this.Application.Barber.ResolveFilter(element, sector, dataField == null, dataKey, dataField)];
                    case 2:
                        _a.sent();
                        return [3, 4];
                    case 3:
                        if (!this.Application.SectorContainerHandler.IsElementContainerized(element)) {
                            dataElements.splice(i, 1);
                            dataBarberFields.splice(i, 1);
                        }
                        _a.label = 4;
                    case 4:
                        i--;
                        return [3, 1];
                    case 5: return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.NotifyStorage = function (dataKey, dataFields, notifyStorageDataKey) {
        if (notifyStorageDataKey === void 0) { notifyStorageDataKey = null; }
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex, dataField, dataStorageFields, dataReferenceKeys, dataTypes, i, dataReferenceKey, type, sectors, j;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyIndex = this.GetStorageKeyIndex(dataKey);
                        if (dataKeyIndex == null)
                            return [2];
                        dataField = ((dataFields != null) && (dataFields.length > 0)) ? dataFields[0] : null;
                        dataStorageFields = this._dataStorageKeyFields[dataKeyIndex];
                        dataReferenceKeys = this._dataStorageKeyReferenceKey[dataKeyIndex];
                        dataTypes = this._dataStorageType[dataKeyIndex];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < dataStorageFields.length)) return [3, 14];
                        if ((dataField != null) && (dataStorageFields[i] != null) && (dataStorageFields[i] !== dataField))
                            return [3, 13];
                        dataReferenceKey = dataReferenceKeys[i];
                        if ((notifyStorageDataKey != null) && (dataReferenceKey === notifyStorageDataKey))
                            return [3, 13];
                        type = dataTypes[i];
                        if (!(type == DrapoStorageLinkType.Reload)) return [3, 6];
                        sectors = this.Application.Storage.GetSectors(dataReferenceKey);
                        j = 0;
                        _a.label = 2;
                    case 2:
                        if (!(j < sectors.length)) return [3, 5];
                        return [4, this.Application.Storage.ReloadData(dataReferenceKey, sectors[j], true, false)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        j++;
                        return [3, 2];
                    case 5: return [3, 13];
                    case 6:
                        if (!(type == DrapoStorageLinkType.RenderClass)) return [3, 8];
                        return [4, this.NotifyStorageRenderClass(dataReferenceKey)];
                    case 7:
                        _a.sent();
                        return [3, 13];
                    case 8:
                        if (!(type == DrapoStorageLinkType.Pointer)) return [3, 11];
                        return [4, this.Application.Storage.UpdatePointerStorageItems(dataKey, dataReferenceKey)];
                    case 9:
                        _a.sent();
                        return [4, this.Application.Observer.Notify(dataReferenceKey, null, null, true, true, dataKey)];
                    case 10:
                        _a.sent();
                        return [3, 13];
                    case 11: return [4, this.Application.Observer.Notify(dataReferenceKey, null, null)];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13:
                        i++;
                        return [3, 1];
                    case 14: return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.NotifyStorageRenderClass = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.NotifyFor(dataKey, null, null, true, DrapoStorageLinkType.RenderClass)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.SubscribeIncremental = function (el, dataKey) {
        var dataKeyIndex = this.GetDataIncrementalKeyIndex(dataKey);
        if (dataKeyIndex == null)
            dataKeyIndex = this.CreateDataIncrementalKeyIndex(dataKey);
        this._dataIncrementalElements[dataKeyIndex].push(el);
    };
    DrapoObserver.prototype.NotifyIncremental = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex, elements, i, element;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.IsEnabledNotifyIncremental)
                            return [2];
                        dataKeyIndex = this.GetDataIncrementalKeyIndex(dataKey);
                        if (dataKeyIndex == null)
                            return [2];
                        elements = this._dataIncrementalElements[dataKeyIndex];
                        i = elements.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 5];
                        if (i >= elements.length)
                            return [3, 4];
                        element = elements[i];
                        if (!(element.parentElement === null)) return [3, 2];
                        elements.splice(i, 1);
                        return [3, 4];
                    case 2: return [4, this.Application.ControlFlow.ResolveControlFlowForElement(element, true)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i--;
                        return [3, 1];
                    case 5: return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.SubscribeDelay = function (el, dataKey, dataFields) {
        var dataKeyIndex = this.GetDelayKeyIndex(dataKey);
        if (dataKeyIndex == null) {
            dataKeyIndex = this._dataDelayKey.push(dataKey) - 1;
            this._dataDelayField.push([]);
            this._dataDelayElements.push([]);
        }
        var dataField = ((dataFields != null) && (dataFields.length > 0)) ? dataFields[0] : null;
        var dataFieldIndex = this.GetDelayFieldKeyIndex(dataKeyIndex, dataField);
        if (dataFieldIndex == null) {
            dataFieldIndex = this._dataDelayField[dataKeyIndex].push(dataField) - 1;
            this._dataDelayElements[dataKeyIndex].push([]);
        }
        this._dataDelayElements[dataKeyIndex][dataFieldIndex].push(el);
    };
    DrapoObserver.prototype.NotifyDelay = function (dataKey, dataFields) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex, dataField, dataFieldIndex, elements, i, element, sector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyIndex = this.GetDelayKeyIndex(dataKey);
                        if (dataKeyIndex == null)
                            return [2];
                        dataField = ((dataFields != null) && (dataFields.length > 0)) ? dataFields[0] : null;
                        dataFieldIndex = this.GetDelayFieldKeyIndex(dataKeyIndex, dataField);
                        if (dataFieldIndex == null)
                            return [2];
                        elements = this._dataDelayElements[dataKeyIndex][dataFieldIndex];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < elements.length)) return [3, 4];
                        element = elements[i];
                        if (element === null)
                            return [3, 3];
                        this.SubscribeBarber(element, dataKey, dataFields);
                        sector = this.Application.Document.GetSector(element);
                        return [4, this.Application.Barber.ResolveElementDelayed(element, sector, dataKey, dataField)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        this._dataDelayField[dataKeyIndex].splice(dataFieldIndex, 1);
                        this._dataDelayElements[dataKeyIndex].splice(dataFieldIndex, 1);
                        return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.SubscribeAuthorization = function (dataKey, type) {
        if (this.HasDataKeyAuthorization(dataKey))
            return;
        this._dataAuthorizationKey.push(dataKey);
        this._dataAuthorizationType.push(type);
    };
    DrapoObserver.prototype.HasDataKeyAuthorization = function (dataKey) {
        return (this.GetDataKeyAuthorizationIndex(dataKey) >= 0);
    };
    DrapoObserver.prototype.GetDataKeyAuthorizationIndex = function (dataKey) {
        for (var i = 0; i < this._dataAuthorizationKey.length; i++)
            if (this._dataAuthorizationKey[i] == dataKey)
                return (i);
        return (-1);
    };
    DrapoObserver.prototype.NotifyAuthorization = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, dataKey, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._dataAuthorizationKey.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 6];
                        dataKey = this._dataAuthorizationKey[i];
                        type = this._dataAuthorizationType[i];
                        this._dataAuthorizationKey.splice(i, 1);
                        this._dataAuthorizationType.splice(i, 1);
                        this.Application.Document.ResetPendingAuthorizations(this.GetPendingAuthorization());
                        if (!(type === 'notify')) return [3, 3];
                        return [4, this.Application.Storage.ReloadData(dataKey, null)];
                    case 2:
                        _a.sent();
                        return [3, 5];
                    case 3:
                        if (!(type === 'initialize')) return [3, 5];
                        return [4, this.Application.Storage.RetrieveDataItem(dataKey, null)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i--;
                        return [3, 1];
                    case 6:
                        this.Application.Document.ResetPendingAuthorizations();
                        return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.HasPendingAuthorization = function () {
        return (this.GetPendingAuthorization() > 0);
    };
    DrapoObserver.prototype.GetPendingAuthorization = function () {
        return (this._dataAuthorizationKey.length);
    };
    DrapoObserver.prototype.HasDelayKeys = function () {
        return (this._dataDelayKey.length > 0);
    };
    DrapoObserver.prototype.GetDelayKeys = function () {
        return (this._dataDelayKey);
    };
    DrapoObserver.prototype.GetDelayFields = function (dataKey) {
        var dataKeyIndex = this.GetDelayKeyIndex(dataKey);
        if (dataKeyIndex == null)
            return (null);
        return (this._dataDelayField[dataKeyIndex]);
    };
    DrapoObserver.prototype.GetDelayKeyIndex = function (dataKey) {
        var data = this._dataDelayKey;
        for (var i = 0; i < data.length; i++) {
            if (data[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.GetDelayFieldKeyIndex = function (dataKeyIndex, dataField) {
        var data = this._dataDelayField[dataKeyIndex];
        for (var i = 0; i < data.length; i++) {
            if (data[i] == dataField)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.GetStorageKeyIndex = function (dataKey) {
        var data = this._dataStorageKey;
        for (var i = 0; i < data.length; i++) {
            if (data[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.CreateStorageDataKeyIndex = function (dataKey) {
        var index = this._dataStorageKey.push(dataKey);
        this._dataStorageKeyFields.push([]);
        this._dataStorageKeyReferenceKey.push([]);
        this._dataStorageType.push([]);
        return (index - 1);
    };
    DrapoObserver.prototype.SubscribeLink = function (dataKey, referenceKey, dataFields) {
        if (dataFields === void 0) { dataFields = null; }
        if (referenceKey === null)
            return (false);
        var index = this.GetLinkIndex(dataKey, referenceKey);
        if (index !== null) {
            var linkDataFields = this._dataLinkDataFields[index];
            if (linkDataFields == null)
                return (false);
            if (this.IsEqualDataFields(linkDataFields, dataFields))
                return (false);
            this._dataLinkDataFields[index] = null;
            return (true);
        }
        if (this.GetLinkIndex(referenceKey, dataKey) !== null)
            return (false);
        this._dataLinkDataKey.push(dataKey);
        this._dataLinkReferenceKey.push(referenceKey);
        this._dataLinkDataFields.push(dataFields);
        return (true);
    };
    DrapoObserver.prototype.SubscribeLinkMustache = function (mustache, referenceKey) {
        var inserted = false;
        var mustaches = this.Application.Parser.ParseMustaches(mustache);
        for (var i = 0; i < mustaches.length; i++) {
            var mustacheCurrent = mustaches[i];
            var mustacheParts = this.Application.Parser.ParseMustache(mustacheCurrent);
            var mustacheDataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
            var mustacheDataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
            if (this.SubscribeLink(mustacheDataKey, referenceKey, mustacheDataFields))
                inserted = true;
        }
        return (inserted);
    };
    DrapoObserver.prototype.UnsubscribeLink = function (dataKey, referenceKey) {
        if (referenceKey === void 0) { referenceKey = null; }
        if (referenceKey === null) {
            var unsubscribed = false;
            for (var i = 0; i < this._dataLinkDataKey.length; i++) {
                var remove = false;
                if (this._dataLinkDataKey[i] === dataKey)
                    remove = true;
                if ((!remove) && (this._dataLinkReferenceKey[i] === dataKey))
                    remove = true;
                if (!remove)
                    continue;
                unsubscribed = true;
                this._dataLinkDataKey.splice(i, 1);
                this._dataLinkReferenceKey.splice(i, 1);
                this._dataLinkDataFields.splice(i, 1);
            }
            return (unsubscribed);
        }
        else {
            var index = this.GetLinkIndex(dataKey, referenceKey);
            if (index === null)
                return (false);
            this._dataLinkDataKey.splice(index, 1);
            this._dataLinkReferenceKey.splice(index, 1);
            this._dataLinkDataFields.splice(index, 1);
            return (true);
        }
    };
    DrapoObserver.prototype.GetLinkIndex = function (dataKey, referenceKey) {
        for (var i = 0; i < this._dataLinkDataKey.length; i++) {
            var dataKeyLink = this._dataLinkDataKey[i];
            if (dataKeyLink !== dataKey)
                continue;
            var referenceKeyLink = this._dataLinkReferenceKey[i];
            if (referenceKeyLink === referenceKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.NotifyLink = function (dataKey, dataFields) {
        return __awaiter(this, void 0, void 0, function () {
            var i, dataKeyLink, referenceKeyLink;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this._dataLinkDataKey.length)) return [3, 4];
                        dataKeyLink = this._dataLinkDataKey[i];
                        if ((dataKeyLink !== dataKey) || (!this.IsCompatibleDataFields(dataFields, this._dataLinkDataFields[i])))
                            return [3, 3];
                        referenceKeyLink = this._dataLinkReferenceKey[i];
                        return [4, this.Notify(referenceKeyLink, null, null)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.Unsubscribe = function (dataKey) {
        this.UnsubscribeStorage(dataKey);
        this.UnsubscribeFor(dataKey);
        this.UnsubscribeBarber(dataKey);
        this.UnsubscribeLink(dataKey);
        this.UnsubscribeComponent(dataKey);
    };
    DrapoObserver.prototype.UnsubscribeDetached = function (sector) {
        this.UnsubscribeComponentDetached(sector);
    };
    DrapoObserver.prototype.GetComponentDataKeyIndex = function (dataKey) {
        var data = this._dataComponentKey;
        for (var i = 0; i < data.length; i++) {
            if (data[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoObserver.prototype.CreateComponentDataKeyIndex = function (dataKey) {
        var index = this._dataComponentKey.push(dataKey);
        this._dataComponentField.push([]);
        this._dataComponentElements.push([]);
        this._dataComponentFunction.push([]);
        this._dataComponentElementsFocus.push([]);
        return (index - 1);
    };
    DrapoObserver.prototype.SubscribeComponent = function (value, el, notifyFunction, elFocus) {
        if (elFocus === void 0) { elFocus = null; }
        var dataKey = null;
        var dataFields = null;
        var elComponentFocus = null;
        if (this.Application.Parser.IsMustache(value)) {
            var mustacheParts = this.Application.Parser.ParseMustache(value);
            dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
            dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
            elComponentFocus = elFocus;
        }
        else {
            dataKey = value;
        }
        var dataKeyIndex = this.GetComponentDataKeyIndex(dataKey);
        if (dataKeyIndex == null)
            dataKeyIndex = this.CreateComponentDataKeyIndex(dataKey);
        this._dataComponentField[dataKeyIndex].push(dataFields);
        this._dataComponentElements[dataKeyIndex].push(el);
        this._dataComponentFunction[dataKeyIndex].push(notifyFunction);
        this._dataComponentElementsFocus[dataKeyIndex].push(elComponentFocus);
    };
    DrapoObserver.prototype.UnsubscribeComponent = function (dataKey) {
        var dataKeyIndex = this.GetComponentDataKeyIndex(dataKey);
        if (dataKeyIndex == null)
            return;
        this._dataComponentKey.splice(dataKeyIndex, 1);
        this._dataComponentField.splice(dataKeyIndex, 1);
        this._dataComponentElements.splice(dataKeyIndex, 1);
        this._dataComponentFunction.splice(dataKeyIndex, 1);
        this._dataComponentElementsFocus.splice(dataKeyIndex, 1);
    };
    DrapoObserver.prototype.UnsubscribeComponentDetached = function (sector) {
        for (var i = this._dataComponentKey.length - 1; i >= 0; i--) {
            var dataComponentElements = this._dataComponentElements[i];
            for (var j = dataComponentElements.length - 1; j >= 0; j--) {
                var dataComponentElement = dataComponentElements[j];
                if (this.Application.Document.IsElementAttached(dataComponentElement))
                    continue;
                dataComponentElements.splice(j, 1);
                this._dataComponentField[i].splice(j, 1);
                this._dataComponentFunction[i].splice(j, 1);
                this._dataComponentElementsFocus[i].splice(j, 1);
            }
            if (dataComponentElements.length > 0)
                continue;
            this._dataComponentKey.splice(i, 1);
            this._dataComponentField.splice(i, 1);
            this._dataComponentElements.splice(i, 1);
            this._dataComponentFunction.splice(i, 1);
            this._dataComponentElementsFocus.splice(i, 1);
        }
    };
    DrapoObserver.prototype.NotifyComponent = function (dataKey, dataFields) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex, dataComponentElements, dataComponentFunctions, i, dataComponentElement, dataComponentFunction, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyIndex = this.GetComponentDataKeyIndex(dataKey);
                        if (dataKeyIndex == null)
                            return [2];
                        dataComponentElements = this._dataComponentElements[dataKeyIndex];
                        dataComponentFunctions = this._dataComponentFunction[dataKeyIndex];
                        i = dataComponentElements.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 7];
                        dataComponentElement = dataComponentElements[i];
                        if (!((this.Application.Document.IsElementAttached(dataComponentElement)) && (!this.Application.Document.IsElementDetached(dataComponentElement)))) return [3, 5];
                        dataComponentFunction = dataComponentFunctions[i];
                        return [4, dataComponentFunction.apply(null, [dataComponentElement, this.Application, dataFields])];
                    case 2:
                        result = _a.sent();
                        if (!((result == null) || (result == true))) return [3, 4];
                        return [4, this.Application.Document.ResolveComponentUpdate(dataComponentElement, null)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3, 6];
                    case 5:
                        if (!this.Application.SectorContainerHandler.IsElementContainerized(dataComponentElement)) {
                            this._dataComponentField[dataKeyIndex].splice(i, 1);
                            this._dataComponentElements[dataKeyIndex].splice(i, 1);
                            this._dataComponentFunction[dataKeyIndex].splice(i, 1);
                            this._dataComponentElementsFocus[dataKeyIndex].splice(i, 1);
                        }
                        _a.label = 6;
                    case 6:
                        i--;
                        return [3, 1];
                    case 7: return [2];
                }
            });
        });
    };
    DrapoObserver.prototype.GetElementByModel = function (sector, model) {
        if (!this.Application.Parser.IsMustacheOnly(model))
            return (null);
        var mustacheParts = this.Application.Parser.ParseMustache(model);
        var dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
        var dataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
        var el = this.GetElementByModelComponent(sector, model, dataKey, dataFields);
        if (el !== null)
            return (el);
        return (this.GetElementByModelBarber(sector, model, dataKey, dataFields));
    };
    DrapoObserver.prototype.GetElementByModelComponent = function (sector, model, dataKey, dataFields) {
        var dataKeyIndex = this.GetComponentDataKeyIndex(dataKey);
        if (dataKeyIndex === null)
            return (null);
        var componentDataFields = this._dataComponentField[dataKeyIndex];
        var els = this._dataComponentElementsFocus[dataKeyIndex];
        for (var i = els.length - 1; i >= 0; i--) {
            var el = els[i];
            if (el === null)
                continue;
            if (el.parentElement == null)
                continue;
            var componentDataField = componentDataFields[i];
            if (componentDataField == null)
                continue;
            var isEqual = this.Application.Solver.IsEqualStringArray(dataFields, componentDataField);
            if (isEqual)
                return (el);
        }
        return (null);
    };
    DrapoObserver.prototype.GetElementByModelBarber = function (sector, model, dataKey, dataFields) {
        var dataKeyIndex = this.GetBarberDataKeyIndex(dataKey);
        if (dataKeyIndex === null)
            return;
        var dataBarberElements = this._dataBarberElements[dataKeyIndex];
        var dataBarberFields = this._dataBarberFields[dataKeyIndex];
        for (var i = 0; i < dataBarberElements.length; i++) {
            var element = dataBarberElements[i];
            var sectorElement = this.Application.Document.GetSector(element);
            if (sectorElement !== sector)
                continue;
            var barberFields = dataBarberFields[i];
            var isEqual = this.IsEqualDataFields(barberFields, dataFields);
            if (!isEqual)
                continue;
            return (element);
        }
        return (null);
    };
    DrapoObserver.prototype.IsCompatibleDataFields = function (dataFields1, dataFields2) {
        if (dataFields1 == null)
            return (true);
        if (dataFields2 == null)
            return (true);
        for (var i = 0; (i < dataFields1.length) && (i < dataFields2.length); i++)
            if (dataFields1[i] != dataFields2[i])
                return (false);
        return (true);
    };
    DrapoObserver.prototype.IsEqualDataFields = function (dataFields1, dataFields2) {
        var isNull1 = dataFields1 == null;
        var isNull2 = dataFields2 == null;
        if (isNull1 != isNull2)
            return (false);
        if (isNull1)
            return (true);
        var length = dataFields1.length;
        if (length != dataFields2.length)
            return (false);
        for (var i = 0; i < length; i++)
            if (dataFields1[i] != dataFields2[i])
                return (false);
        return (true);
    };
    DrapoObserver.prototype.Lock = function (dataKey) {
        for (var i = 0; i < this._lockedData.length; i++) {
            var locked = this._lockedData[i];
            if (locked[0] == dataKey)
                return (false);
        }
        this._lockedData.push([dataKey, false]);
        return (true);
    };
    DrapoObserver.prototype.Unlock = function (dataKey, notify) {
        return __awaiter(this, void 0, void 0, function () {
            var i, locked;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this._lockedData.length)) return [3, 5];
                        locked = this._lockedData[i];
                        if (locked[0] !== dataKey)
                            return [3, 4];
                        this._lockedData.splice(i, 1);
                        if (!((locked[1]) && (notify))) return [3, 3];
                        return [4, this.Notify(dataKey, null, null)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2, (true)];
                    case 4:
                        i++;
                        return [3, 1];
                    case 5: return [2, (false)];
                }
            });
        });
    };
    DrapoObserver.prototype.IsLocked = function (dataKey) {
        for (var i = 0; i < this._lockedData.length; i++) {
            var locked = this._lockedData[i];
            if (locked[0] !== dataKey)
                continue;
            locked[1] = true;
            return (true);
        }
        return (false);
    };
    return DrapoObserver;
}());

"use strict";
var DrapoParser = (function () {
    function DrapoParser(application) {
        this.MUSTACHE_START = '{{';
        this.MUSTACHE_START_OVERFLOW = '{{{';
        this.MUSTACHE_END = '}}';
        this.MUSTACHE_INDEXER_START = '[';
        this.MUSTACHE_INDEXER_END = ']';
        this.ITERATOR_START = '(';
        this.ITERATOR_END = ')';
        this.CLASS_START = '{';
        this.CLASS_END = '}';
        this._tokensStart = [' ', '{', '=', '!', '<', '>', '&', '|', '-', '+', '*', '/'];
        this._tokensBlock = [['&', '&'], ['|', '|'], ['!', '='], ['>', '='], ['<', '=']];
        this._tokensComparator = ['=', '!=', '>', '>=', '<', '<=', 'LIKE'];
        this._tokensLogical = ['&&', '||'];
        this._tokensArithmetic = ['+', '-', '*', '/'];
        this._canUseRegexGroups = false;
        this._application = application;
    }
    Object.defineProperty(DrapoParser.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoParser.prototype.Tokenize = function (data, splitter) {
        if (splitter === void 0) { splitter = " "; }
        if (data == null)
            return (null);
        return (data.split(splitter));
    };
    DrapoParser.prototype.ParseFor = function (data) {
        var parse = this.Tokenize(data);
        if (parse == null)
            return (null);
        if (parse.length != 3) {
            this.Application.ExceptionHandler.HandleError('The for syntax is wrong. Waiting 3 arguments in : {0} ', data);
            return (null);
        }
        if (parse[1] != 'in') {
            this.Application.ExceptionHandler.HandleError('The for syntax is wrong. Expecting "in" in the second argument: {0} ', data);
            return (null);
        }
        return (parse);
    };
    DrapoParser.prototype.ParseForIterable = function (data) {
        var parse = this.Tokenize(data, '.');
        return (parse);
    };
    DrapoParser.prototype.ParseMustaches = function (data, checkEmbedded) {
        if (checkEmbedded === void 0) { checkEmbedded = false; }
        var mustaches = this.ParseMustachesInternal(data);
        if (!checkEmbedded)
            return (mustaches);
        for (var i = 0; i < mustaches.length; i++) {
            var mustache = mustaches[i];
            var mustachesEmbedded = this.ParseMustachesInternal(mustache.substr(2, mustache.length - 4));
            for (var j = 0; j < mustachesEmbedded.length; j++)
                mustaches.push(mustachesEmbedded[j]);
        }
        return (mustaches);
    };
    DrapoParser.prototype.ParseMustachesInternal = function (data) {
        var mustaches = [];
        var opened = 0;
        var length = data.length - 1;
        var start = 0;
        for (var i = 0; i < length; i++) {
            var block = data.substr(i, 2);
            if (block === this.MUSTACHE_START) {
                if (opened === 0)
                    start = i;
                opened++;
                i++;
            }
            else if (block === this.MUSTACHE_END) {
                opened--;
                i++;
                if (opened !== 0)
                    continue;
                var mustache = data.substring(start, i + 1);
                while (mustache.indexOf(this.MUSTACHE_START_OVERFLOW) === 0)
                    mustache = mustache.substring(1);
                mustaches.push(mustache);
            }
        }
        return (mustaches);
    };
    DrapoParser.prototype.IsMustache = function (data) {
        if (data === null)
            return (false);
        if (!((typeof data === 'string') || (data instanceof String)))
            return (false);
        if (data.length < 4)
            return (false);
        return ((data.substr(0, 2) == this.MUSTACHE_START) && (data.substr(data.length - 2, 2) == this.MUSTACHE_END));
    };
    DrapoParser.prototype.IsMustacheContentValid = function (data) {
        if (!this.IsMustache(data))
            return (false);
        return ((this.GetMatchs(data, this.MUSTACHE_START)) === (this.GetMatchs(data, this.MUSTACHE_END)));
    };
    DrapoParser.prototype.IsMustacheIndexer = function (data) {
        if (data === null)
            return (false);
        if (data.length < 3)
            return (false);
        if (data[0] !== this.MUSTACHE_INDEXER_START)
            return (false);
        if (data[data.length - 1] !== this.MUSTACHE_INDEXER_END)
            return (false);
        return (this.IsMustache(data.substring(this.MUSTACHE_INDEXER_START.length, data.length - this.MUSTACHE_INDEXER_END.length)));
    };
    DrapoParser.prototype.GetMustacheInsideIndexer = function (data) {
        return (data.substring(this.MUSTACHE_INDEXER_START.length, data.length - this.MUSTACHE_INDEXER_END.length));
    };
    DrapoParser.prototype.CreateMustacheIndexer = function (data) {
        return (this.MUSTACHE_INDEXER_START + data + this.MUSTACHE_INDEXER_END);
    };
    DrapoParser.prototype.GetMatchs = function (data, search) {
        var hits = 0;
        var indexStart = 0;
        while ((indexStart = data.indexOf(search, indexStart)) >= 0) {
            hits++;
            indexStart = indexStart + search.length;
        }
        return (hits);
    };
    DrapoParser.prototype.HasMustache = function (data) {
        if (data === null)
            return (false);
        if (!((typeof data === 'string') || (data instanceof String)))
            return (false);
        return (data.indexOf(this.MUSTACHE_START) > -1);
    };
    DrapoParser.prototype.ParseMustache = function (data) {
        var mustache = data.substr(2, data.length - 4);
        var mustacheFields = [];
        var opened = 0;
        var length = data.length;
        var start = 0;
        for (var i = 0; i < length; i++) {
            var block = mustache.substr(i, 2);
            if (block === this.MUSTACHE_START) {
                opened++;
                i++;
            }
            else if (block === this.MUSTACHE_END) {
                opened--;
                i++;
            }
            else if ((opened === 0) && (mustache[i] === '.')) {
                mustacheFields.push(mustache.substring(start, i));
                start = i + 1;
            }
        }
        if (start !== length)
            mustacheFields.push(mustache.substring(start, length));
        return (mustacheFields);
    };
    DrapoParser.prototype.ParseProperty = function (data) {
        return (this.Tokenize(data, '-'));
    };
    DrapoParser.prototype.ParsePath = function (data) {
        return (this.Tokenize(data, '.'));
    };
    DrapoParser.prototype.HasFunction = function (data) {
        var functions = this.ParseFunctions(data);
        for (var i = 0; i < functions.length; i++)
            if (this.IsFunction(functions[i]))
                return (true);
        return (false);
    };
    DrapoParser.prototype.IsFunction = function (data) {
        var functionParsed = this.ParseFunction(data, false);
        return (functionParsed != null);
    };
    DrapoParser.prototype.ParseFunctionsPartial = function (data) {
        var functions = [];
        var buffer = '';
        var blockCount = 0;
        for (var i = 0; i < data.length; i++) {
            var chr = data[i];
            if (chr === '(') {
                blockCount++;
                buffer += chr;
            }
            else if (chr === ')') {
                blockCount--;
                buffer += chr;
                if (blockCount === 0) {
                    if (buffer[0] !== '(')
                        functions.push(buffer);
                    buffer = '';
                }
            }
            else if ((blockCount === 0) && (this.IsFunctionPartialDelimiter(chr))) {
                buffer = '';
            }
            else {
                buffer += chr;
            }
        }
        return (functions);
    };
    DrapoParser.prototype.IsFunctionPartialDelimiter = function (data) {
        if (data === ' ')
            return (true);
        if (data === ':')
            return (true);
        if (data === ';')
            return (true);
        if (data === '=')
            return (true);
        return (false);
    };
    DrapoParser.prototype.ParseFunctions = function (data) {
        var functions = this.ParseBlock(data, ';');
        for (var i = functions.length - 1; i >= 0; i--) {
            var functionText = functions[i];
            var functionStartIndex = this.GetFunctionStart(functionText);
            if (functionStartIndex === 0)
                continue;
            functions[i] = functionText.substring(functionStartIndex);
        }
        return (functions);
    };
    DrapoParser.prototype.GetFunctionStart = function (functionText) {
        for (var i = 0; i < functionText.length; i++)
            if (this.IsFunctionStartValid(functionText[i]))
                return (i);
        return (functionText.length);
    };
    DrapoParser.prototype.IsFunctionStartValid = function (character) {
        if (character === ' ')
            return (false);
        if (character === '!')
            return (false);
        return (true);
    };
    DrapoParser.prototype.ParseFunction = function (data, checkParameters) {
        if (checkParameters === void 0) { checkParameters = true; }
        var indexStart = data.indexOf('(');
        if (indexStart <= 0)
            return (null);
        if (data[data.length - 1] !== ')')
            return (null);
        var functionParsed = new DrapoFunction();
        functionParsed.Name = data.substr(0, indexStart).toLowerCase();
        functionParsed.Parameters = this.ParseParameters(data.substr(indexStart + 1, (data.length - (indexStart + 2))));
        if (!checkParameters)
            return (functionParsed);
        for (var i = functionParsed.Parameters.length - 1; i >= 0; i--)
            if (!this.IsValidFunctionParameter(functionParsed.Parameters[i]))
                return (null);
        return (functionParsed);
    };
    DrapoParser.prototype.ParseParameters = function (data) {
        return (this.ParseBlock(data, ','));
    };
    DrapoParser.prototype.ParseBlock = function (data, delimiter) {
        var items = [];
        var buffer = '';
        var blockCount = 0;
        for (var i = 0; i < data.length; i++) {
            var chr = data[i];
            if (chr === '(') {
                blockCount++;
                buffer += chr;
            }
            else if (chr === ')') {
                blockCount--;
                buffer += chr;
            }
            else if (chr === delimiter) {
                if (blockCount === 0) {
                    items.push(buffer);
                    buffer = '';
                }
                else {
                    buffer += chr;
                }
            }
            else {
                buffer += chr;
            }
        }
        if (data.length > 0)
            items.push(buffer);
        return (items);
    };
    DrapoParser.prototype.ParseBlockMathematicalExpression = function (data) {
        var items = [];
        var buffer = '';
        var blockCount = 0;
        for (var i = 0; i < data.length; i++) {
            var chr = data[i];
            if (chr === '(') {
                if (blockCount === 0) {
                    if (buffer.length > 0)
                        items.push(buffer);
                    buffer = '';
                }
                blockCount++;
                buffer += chr;
            }
            else if (chr === ')') {
                blockCount--;
                buffer += chr;
                if (blockCount === 0) {
                    items.push(buffer);
                    buffer = '';
                }
            }
            else if (!this.IsBlockNumber(buffer, chr)) {
                if (blockCount === 0) {
                    if (buffer.length > 0)
                        items.push(buffer);
                    buffer = chr;
                }
                else {
                    buffer += chr;
                }
            }
            else {
                buffer += chr;
            }
        }
        if (buffer.length > 0)
            items.push(buffer);
        return (this.ParseBlockMathematicalExpressionSignals(items));
    };
    DrapoParser.prototype.IsBlockNumber = function (buffer, chr) {
        return ((this.IsNumber(buffer + chr)) || ((chr === '.') && (this.IsNumber(buffer))));
    };
    DrapoParser.prototype.ParseBlockMathematicalExpressionSignals = function (items) {
        var itemsSignal = [];
        var isLastOperation = true;
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (isLastOperation) {
                itemsSignal.push(item);
                isLastOperation = false;
            }
            else if (this.IsMathematicalOperator(item)) {
                itemsSignal.push(item);
                isLastOperation = true;
            }
            else if (item.length > 1) {
                if (this.IsMathematicalOperator(item[0], true)) {
                    itemsSignal.push(item[0]);
                    itemsSignal.push(item.substring(1));
                }
                else {
                    itemsSignal.push(item);
                }
                isLastOperation = false;
            }
        }
        return (itemsSignal);
    };
    DrapoParser.prototype.IsMathematicalOperator = function (chr, onlyItemOperator) {
        if (onlyItemOperator === void 0) { onlyItemOperator = false; }
        if (chr === '+')
            return (true);
        if (chr === '-')
            return (true);
        if (onlyItemOperator)
            return (false);
        if (chr === '*')
            return (true);
        if (chr === '/')
            return (true);
        return (false);
    };
    DrapoParser.prototype.IsValidFunctionParameter = function (parameter) {
        var blockOpen = 0;
        var blockClose = 0;
        for (var i = parameter.length - 1; i >= 0; i--) {
            var chr = parameter[i];
            if (chr === '(')
                blockOpen++;
            else if (chr === ')')
                blockClose++;
        }
        return (blockOpen === blockClose);
    };
    DrapoParser.prototype.IsIterator = function (data) {
        if (this.Application.Serializer.IsJson(data))
            return (true);
        return (this.IsIteratorArray(data));
    };
    DrapoParser.prototype.IsIteratorArray = function (data) {
        if (data === null)
            return (false);
        if (data.length < 2)
            return (false);
        return ((data.substr != null) && (data.substr(0, 1) == this.ITERATOR_START) && (data.substr(data.length - 1, 1) == this.ITERATOR_END));
    };
    DrapoParser.prototype.ParseIterator = function (data) {
        if (this.Application.Serializer.IsJson(data))
            return (this.Application.Serializer.Deserialize(data));
        return (this.ParseIteratorArray(data));
    };
    DrapoParser.prototype.ParseIteratorArray = function (data) {
        var dataContent = data.substr(1, data.length - 2);
        var indexInterval = dataContent.indexOf('..');
        if (indexInterval !== -1) {
            var limits = this.Tokenize(dataContent, '..');
            if (limits.length != 2) {
                this.Application.ExceptionHandler.HandleError('Iterator in wrong format: {0}', data);
                return ([]);
            }
            var limitStart = this.ParseNumberBlock(limits[0]);
            var limitEnd = this.ParseNumberBlock(limits[1]);
            var dataIntervals = [];
            for (var i = limitStart; i < limitEnd; i++)
                dataIntervals.push(i.toString());
            return (dataIntervals);
        }
        else {
            return (this.Tokenize(dataContent, ','));
        }
    };
    DrapoParser.prototype.ParseNumberBlock = function (data, valueDefault) {
        if (valueDefault === void 0) { valueDefault = 0; }
        var dataClean = '';
        for (var i = 0; i < data.length; i++) {
            var character = data.charAt(i);
            if (character == ' ')
                continue;
            dataClean = dataClean + character;
        }
        var dataWithoutDate = this.ReplaceDateWithTimespan(dataClean);
        return (this.ParseNumber(this.Application.Solver.ResolveMathematicalExpression(dataWithoutDate), valueDefault));
    };
    DrapoParser.prototype.ReplaceDateWithTimespan = function (data) {
        var dataWithoutISO = this.ReplaceDateWithTimespanISO(data);
        var dataWithoutShort = this.ReplaceDateWithTimespanShort(dataWithoutISO);
        return (dataWithoutShort);
    };
    DrapoParser.prototype.ReplaceDateWithTimespanISO = function (data) {
        var matchs = data.match(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?((\-|\+)\d{2}:\d{2})?/gi);
        if (matchs === null)
            return (data);
        var dataTimespan = data;
        for (var i = 0; i < matchs.length; i++) {
            var match = matchs[i];
            var date = new Date(match);
            var timespan = date.getTime();
            dataTimespan = dataTimespan.replace(match, timespan.toString());
        }
        return (dataTimespan);
    };
    DrapoParser.prototype.ReplaceDateWithTimespanShort = function (data) {
        var matchs = data.match(/\d{4}-\d{2}-\d{2}\d{2}:\d{2}:\d{2}:\d{3}/gi);
        if (matchs === null)
            return (data);
        var dataTimespan = data;
        for (var i = 0; i < matchs.length; i++) {
            var match = matchs[i];
            var matchISO = match.substring(0, 10) + 'T' + match.substring(10, 18) + 'Z';
            var date = new Date(matchISO);
            var timespan = date.getTime();
            dataTimespan = dataTimespan.replace(match, timespan.toString());
        }
        return (dataTimespan);
    };
    DrapoParser.prototype.IsClassArray = function (data) {
        if (data === null)
            return (false);
        if (data.length < 2)
            return (false);
        return ((data.substr(0, 1) == this.CLASS_START) && (data.substr(data.length - 1, 1) == this.CLASS_END));
    };
    DrapoParser.prototype.IsMustacheOnly = function (data, allowInternal) {
        if (allowInternal === void 0) { allowInternal = false; }
        if (allowInternal)
            return (this.IsMutacheOnlyInternal(data));
        if (!this.IsMustache(data))
            return (false);
        return (data.indexOf(this.MUSTACHE_START, 2) === -1);
    };
    DrapoParser.prototype.IsMutacheOnlyInternal = function (data) {
        if (!this.IsMustache(data))
            return (false);
        var open = 0;
        for (var i = 0; i < data.length - 1; i++) {
            if (data[i] === ' ')
                return (false);
            var current = data.substr(i, 2);
            if (current === this.MUSTACHE_START) {
                open++;
                i++;
            }
            else if (current === this.MUSTACHE_END) {
                open--;
                i++;
            }
        }
        return (open === 0);
    };
    DrapoParser.prototype.ParseClassArray = function (data) {
        return (this.ParseBlock(data.substr(1, data.length - 2), ','));
    };
    DrapoParser.prototype.ParseTags = function (data) {
        return (this.ParseBlock(data, ','));
    };
    DrapoParser.prototype.ParseClass = function (data) {
        var parsed = this.Tokenize(data, ':');
        if (parsed.length == 1)
            return ([parsed[0], 'true', null]);
        return ([parsed[0], parsed[1], parsed.length > 2 ? parsed[2] : null]);
    };
    DrapoParser.prototype.ParseConditionalBlock = function (data) {
        if (data.indexOf == null)
            return (data.toString());
        var indexStart = data.indexOf('(');
        if (indexStart < 0)
            return (null);
        var indexStartNext = null;
        var indexEnd = null;
        indexStart++;
        while (((indexStartNext = data.indexOf('(', indexStart)) < (indexEnd = data.indexOf(')', indexStart))) && (indexStartNext != -1)) {
            indexStart = indexStartNext + 1;
        }
        return (data.substring(indexStart, indexEnd));
    };
    DrapoParser.prototype.ParseConditionalLogicalOrComparator = function (data) {
        var parsed = this.ParseConditionalLogicalOrComparatorSeparator(data, '||');
        if (parsed != null)
            return (parsed);
        parsed = this.ParseConditionalLogicalOrComparatorSeparator(data, '&&');
        if (parsed != null)
            return (parsed);
        parsed = this.ParseConditionalLogicalOrComparatorSeparator(data, '!=');
        if (parsed != null)
            return (parsed);
        parsed = this.ParseConditionalLogicalOrComparatorSeparator(data, '=');
        if (parsed != null)
            return (parsed);
        parsed = this.ParseConditionalLogicalOrComparatorSeparator(data, '>');
        if (parsed != null)
            return (parsed);
        parsed = this.ParseConditionalLogicalOrComparatorSeparator(data, '<');
        if (parsed != null)
            return (parsed);
        return ([data]);
    };
    DrapoParser.prototype.ParseConditionalLogicalOrComparatorSeparator = function (data, separator) {
        var index = data.indexOf(separator);
        if (index > 0)
            return ([data.substring(0, index), separator, data.substring(index + separator.length)]);
        else if (index == 0)
            return (['', separator, data.substring(index + separator.length)]);
        return (null);
    };
    DrapoParser.prototype.GetStringAsNumber = function (text) {
        if (text == null)
            return (null);
        return (Number(text));
    };
    DrapoParser.prototype.ParseEvents = function (data) {
        if ((data === null) || (data === undefined))
            return ([]);
        var parse = this.Tokenize(data, ',');
        return (parse);
    };
    DrapoParser.prototype.ParseEventProperty = function (el, event, value) {
        var parse = this.ParseProperty(event);
        if (parse.length < 3)
            return (null);
        if (parse[0] != 'd')
            return (null);
        if (parse[1].toLowerCase() != 'on')
            return (null);
        var location = this.ParseEventLocation(parse[2]);
        var index = location === null ? 2 : 3;
        var trigger = parse[index++];
        var eventFilter = parse.length > index ? parse[index] : null;
        var validation = el.getAttribute('d-validation-on-' + trigger);
        return ([event, location, trigger, value, eventFilter, validation]);
    };
    DrapoParser.prototype.ParseEventLocation = function (value) {
        if (value === 'body')
            return (value);
        return (null);
    };
    DrapoParser.prototype.ParseEvent = function (event) {
        var parse = this.ParseProperty(event);
        var eventFilter = parse.length > 1 ? parse[1] : null;
        return ([parse[0], eventFilter]);
    };
    DrapoParser.prototype.IsUri = function (data) {
        if (data === null)
            return (false);
        if ((data.length > 0) && (data.substr(0, 1) === '~'))
            return (true);
        if ((data.length > 0) && (data.substr(0, 1) === '/'))
            return (true);
        return (false);
    };
    DrapoParser.prototype.IsHTML = function (data) {
        if (data === null)
            return (false);
        if ((data.length > 0) && (data.substr(0, 1) === '<'))
            return (true);
        return (false);
    };
    DrapoParser.prototype.ParsePipes = function (data) {
        if (data == null)
            return (null);
        var parse = this.Tokenize(data, ',');
        return (parse);
    };
    DrapoParser.prototype.ParseDocumentContent = function (data) {
        var index = data.indexOf('<div');
        if (index >= 0)
            return (data.substr(index));
        return (data);
    };
    DrapoParser.prototype.ParseElementAttributes = function (data) {
        var element = this.ParseElement(data);
        return (this.ParseAttributes(element));
    };
    DrapoParser.prototype.ParseElement = function (data) {
        var index = data.indexOf('>');
        if (index >= 0)
            return (data.substr(0, index));
        return ('');
    };
    DrapoParser.prototype.ParseAttributes = function (data) {
        var attributes = [];
        var block = this.ParseBlockAttribute(data);
        for (var i = 0; i < block.length; i++) {
            var attribute = this.ParseAttribute(block[i]);
            if (attribute !== null)
                attributes.push(attribute);
        }
        return (attributes);
    };
    DrapoParser.prototype.ParseAttribute = function (data) {
        var block = this.ParseBlock(data, '=');
        if (block.length !== 2)
            return (null);
        var value = block[1];
        return ([block[0].toLowerCase(), value.substr(1, value.length - 2)]);
    };
    DrapoParser.prototype.ParseDate = function (data) {
        var date = new Date(data);
        if ((date == null) || (date.toString() == 'Invalid Date'))
            return (null);
        return (date);
    };
    DrapoParser.prototype.ParseDateCulture = function (data, culture) {
        if (culture === void 0) { culture = null; }
        if (data === null)
            return (null);
        if (typeof data.getMonth === 'function')
            return data;
        var dateISO = this.GetDateISO(data);
        if (dateISO !== null)
            return (dateISO);
        if (culture === null)
            culture = this.Application.Globalization.GetCulture();
        if (this._canUseRegexGroups)
            return (this.ParseDateCultureRegex(data, culture));
        return (this.ParseDateCultureRegularExpression(data, culture));
    };
    DrapoParser.prototype.GetDateISO = function (data) {
        if (!/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(data))
            return (null);
        var date = new Date(data);
        if ((date === null) || (!(date instanceof Date)) || (date.toString() == 'Invalid Date') || (date.toISOString() !== data))
            return (null);
        return (date);
    };
    DrapoParser.prototype.ParseDateCultureRegex = function (data, culture) {
        var dateFormatRegex = this.Application.Globalization.GetDateFormatsRegex(culture);
        var match = data.match(dateFormatRegex);
        if (match == null)
            return (null);
        var groups = match.groups;
        var year = this.ParseDateGroupNumber(groups.year);
        if (year == null)
            return (null);
        var month = this.ParseDateGroupNumber(groups.month, 12);
        if (month == null)
            return (null);
        var day = this.ParseDateGroupNumber(groups.day, 31);
        if (day == null)
            return (null);
        var hours = 12;
        var date = new Date(Date.UTC(year, month - 1, day, hours, 0, 0, 0));
        if (!this.IsDate(date))
            return (null);
        if (date.getUTCDate() !== day)
            return (null);
        return (date);
    };
    DrapoParser.prototype.ParseDateCultureRegularExpression = function (data, culture) {
        var regularExpressions = this.Application.Globalization.GetDateFormatsRegularExpressions(culture);
        for (var i = 0; i < regularExpressions.length; i++) {
            var regularExpression = regularExpressions[i];
            if (!regularExpression.IsValid(data))
                continue;
            var year = this.ParseDateGroupNumber(regularExpression.GetValue('year'));
            if (year == null)
                return (null);
            var month = this.ParseDateGroupNumber(regularExpression.GetValue('month'), 12);
            if (month == null)
                return (null);
            var day = this.ParseDateGroupNumber(regularExpression.GetValue('day'), 31);
            if (day == null)
                return (null);
            var hours = 12;
            var date = new Date(Date.UTC(year, month - 1, day, hours, 0, 0, 0));
            if (!this.IsDate(date))
                return (null);
            if (date.getUTCDate() !== day)
                return (null);
            return (date);
        }
        return (null);
    };
    DrapoParser.prototype.IsDate = function (date) {
        return (!((date == null) || (date.toString() == 'Invalid Date')));
    };
    DrapoParser.prototype.ParseDateGroupNumber = function (value, max) {
        if (max === void 0) { max = null; }
        if (value == null)
            return (null);
        var valueNumber = this.ParseNumber(value, null);
        if ((max != null) && (valueNumber > max))
            return (null);
        return (valueNumber);
    };
    DrapoParser.prototype.ParseNumber = function (data, valueDefault) {
        if (valueDefault === void 0) { valueDefault = 0; }
        if (data == null)
            return (valueDefault);
        var value = Number(data);
        if (Number.NaN === value)
            return (valueDefault);
        return (value);
    };
    DrapoParser.prototype.ParseNumberPercentageCulture = function (data, culture) {
        if (culture === void 0) { culture = null; }
        if (data == null)
            return (null);
        if (data.endsWith('%'))
            data = data.substr(0, data.length - 1);
        return (this.ParseNumberCulture(data, culture));
    };
    DrapoParser.prototype.ParseNumberCulture = function (data, culture) {
        if (culture === void 0) { culture = null; }
        if (data == null)
            return (null);
        var delimiterThousands = this.Application.Globalization.GetDelimiterThousands(culture);
        var delimiterDecimal = this.Application.Globalization.GetDelimiterDecimal(culture);
        var valueClean = this.Application.Solver.Replace(data, delimiterThousands, '');
        if (delimiterDecimal !== '.')
            valueClean = valueClean.replace(delimiterDecimal, '.');
        var value = Number(valueClean);
        if (Number.NaN === value)
            return (null);
        return (value);
    };
    DrapoParser.prototype.ParseBoolean = function (data, valueDefault) {
        if (valueDefault === void 0) { valueDefault = false; }
        if (data == null)
            return (valueDefault);
        return (data.toLowerCase() === 'true');
    };
    DrapoParser.prototype.ParseQueryString = function (url) {
        var values = [];
        var indexQueryString = url.indexOf('?');
        if ((indexQueryString == null) || (indexQueryString < 0))
            return (values);
        var queryString = url.substring(indexQueryString + 1);
        var keyValuePairs = this.ParseBlock(queryString, '&');
        for (var i = 0; i < keyValuePairs.length; i++) {
            var keyValuePair = this.ParseBlock(keyValuePairs[i], '=');
            if (keyValuePair.length !== 2)
                continue;
            var key = keyValuePair[0];
            var value = keyValuePair[1];
            values.push([key, value]);
        }
        return (values);
    };
    DrapoParser.prototype.ParseValidationGroups = function (data) {
        if (data == null)
            return ([]);
        return (this.ParseBlock(data, ','));
    };
    DrapoParser.prototype.IsValidatorArray = function (data) {
        if (data === null)
            return (false);
        if (data.length < 2)
            return (false);
        return ((data.substr(0, 1) == this.CLASS_START) && (data.substr(data.length - 1, 1) == this.CLASS_END));
    };
    DrapoParser.prototype.ParseValidatorsArray = function (data) {
        return (this.ParseBlock(data.substr(1, data.length - 2), ','));
    };
    DrapoParser.prototype.ParseValidator = function (data) {
        var parsed = this.Tokenize(data, ':');
        if (parsed.length == 1)
            return ([parsed[0], 'true']);
        return ([parsed[0], parsed[1]]);
    };
    DrapoParser.prototype.ParseHTMLAttributes = function (data) {
        var attributes = [];
        var indexStart = 0;
        while ((indexStart = data.indexOf('<', indexStart)) >= 0) {
            var indexEnd = data.indexOf('>', indexStart);
            if (indexEnd === -1)
                break;
            var dataElement = data.substring(indexStart, indexEnd);
            var elementAttributes = this.ParseAttributes(dataElement);
            attributes.push.apply(attributes, elementAttributes);
            indexStart = indexEnd;
        }
        return (attributes);
    };
    DrapoParser.prototype.ParseBlockAttribute = function (data) {
        var items = [];
        var buffer = '';
        var attributeDelimiter = null;
        var space = ' ';
        for (var i = 0; i < data.length; i++) {
            var chr = data[i];
            if ((attributeDelimiter !== null) && (chr === attributeDelimiter)) {
                attributeDelimiter = null;
                buffer += chr;
            }
            else if ((chr === "'") || (chr === '"')) {
                attributeDelimiter = chr;
                buffer += chr;
            }
            else if (chr === space) {
                if (attributeDelimiter === null) {
                    items.push(buffer);
                    buffer = '';
                }
                else {
                    buffer += chr;
                }
            }
            else {
                buffer += chr;
            }
        }
        if (data.length > 0)
            items.push(buffer);
        return (items);
    };
    DrapoParser.prototype.ParseExpression = function (expression) {
        var block = new DrapoExpressionItem(DrapoExpressionItemType.Block);
        this.ParseExpressionInsert(block, expression);
        block.Value = expression;
        return (block);
    };
    DrapoParser.prototype.ParseExpressionInsert = function (block, expression) {
        var tokens = this.ParseExpressionTokens(expression);
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            var item = this.ParseExpressionItem(token);
            block.Items.push(item);
        }
    };
    DrapoParser.prototype.ParseExpressionTokens = function (expression) {
        var tokens = [];
        var blockCount = 0;
        var textBlock = null;
        var buffer = '';
        for (var i = 0; i < expression.length; i++) {
            var chr = expression[i];
            if (chr === textBlock) {
                buffer = buffer + chr;
                tokens.push(buffer);
                buffer = '';
                textBlock = null;
                continue;
            }
            if ((chr === '"') || (chr === "'")) {
                this.AddTokenNonEmpty(tokens, buffer);
                buffer = chr;
                textBlock = chr;
                continue;
            }
            if (textBlock !== null) {
                buffer = buffer + chr;
                continue;
            }
            if (chr === '(') {
                if ((blockCount === 0) && (this.ParseExpressionItemType(buffer) !== DrapoExpressionItemType.Text)) {
                    this.AddTokenNonEmpty(tokens, buffer);
                    buffer = '';
                }
                blockCount++;
            }
            else if (chr === ')') {
                blockCount--;
                if ((blockCount === 0) && (buffer !== '')) {
                    buffer = buffer + chr;
                    tokens.push(buffer);
                    buffer = '';
                    continue;
                }
            }
            if ((blockCount === 0) && (this.IsParseExpressionStartingToken(chr)) && (!this.IsParseExpressionMiddleToken(buffer, chr))) {
                this.AddTokenNonEmpty(tokens, buffer);
                buffer = '';
            }
            if ((blockCount === 0) && (buffer !== '') && (this.IsParseExpressionItemTypeComplete(buffer)) && (!this.IsParseExpressionItemTypeComplete(buffer + chr))) {
                this.AddTokenNonEmpty(tokens, buffer);
                buffer = '';
            }
            buffer = buffer + chr;
        }
        this.AddTokenNonEmpty(tokens, buffer);
        return (tokens);
    };
    DrapoParser.prototype.AddTokenNonEmpty = function (tokens, token) {
        if (token == null)
            return (false);
        if (this.IsTokenEmpty(token))
            return (false);
        tokens.push(token);
        return (true);
    };
    DrapoParser.prototype.Trim = function (token) {
        if (token == null)
            return (token);
        var indexStart = 0;
        for (var i = 0; i < token.length; i++) {
            if (token[i] === ' ')
                continue;
            indexStart = i;
            break;
        }
        var indexEnd = token.length - 1;
        for (var i = indexEnd; i >= 0; i--) {
            if (token[i] === ' ')
                continue;
            indexEnd = i;
            break;
        }
        var tokenTrim = token.substring(indexStart, indexEnd + 1);
        return (tokenTrim);
    };
    DrapoParser.prototype.IsTokenEmpty = function (token) {
        if (token == null)
            return (true);
        for (var i = 0; i < token.length; i++)
            if (token[i] != ' ')
                return (false);
        return (true);
    };
    DrapoParser.prototype.IsParseExpressionStartingToken = function (chr) {
        return (this.Application.Solver.Contains(this._tokensStart, chr));
    };
    DrapoParser.prototype.IsParseExpressionMiddleToken = function (buffer, chr) {
        if (buffer.length == 0)
            return (false);
        for (var i = 0; i < this._tokensBlock.length; i++) {
            var tokenBlock = this._tokensBlock[i];
            var tokenBlockBuffer = tokenBlock[0];
            if (buffer.substr(0, tokenBlockBuffer.length) !== tokenBlockBuffer)
                continue;
            for (var j = 1; j < tokenBlock.length; j++)
                if (tokenBlock[j] === chr)
                    return (true);
            return (false);
        }
        if (buffer[0] === '{')
            return (true);
        return (false);
    };
    DrapoParser.prototype.IsLetterOrNumber = function (chr) {
        return (chr.match(/^[a-zA-Z0-9_.-]+$/i) != null);
    };
    DrapoParser.prototype.IsNumber = function (chr) {
        if (chr == null)
            return (false);
        if (typeof chr !== 'string')
            chr = chr.toString();
        return (chr.match(/^(\-)?((\d)+)?(\.)?(\d)+$/i) != null);
    };
    DrapoParser.prototype.IsBoolean = function (data) {
        if (data == null)
            return (false);
        if (typeof data === 'boolean')
            return (true);
        if (typeof data !== 'string')
            data = data.toString();
        return ((data === 'true') || (data === 'false'));
    };
    DrapoParser.prototype.ParseExpressionItem = function (token) {
        var tokenTrim = this.Trim(token);
        var type = this.ParseExpressionItemType(tokenTrim);
        var item = new DrapoExpressionItem(type);
        if (item.Type == DrapoExpressionItemType.Block) {
            var content = tokenTrim.substring(1, tokenTrim.length - 1);
            this.ParseExpressionInsert(item, content);
        }
        item.Value = tokenTrim;
        return (item);
    };
    DrapoParser.prototype.ParseExpressionItemType = function (token) {
        var isBlockEnd = token.substr(token.length - 1, 1) == ')';
        if (isBlockEnd) {
            var isBlockStart = token.substr(0, 1) == '(';
            if (isBlockStart)
                return (DrapoExpressionItemType.Block);
            else
                return (DrapoExpressionItemType.Function);
        }
        if (token === '!')
            return (DrapoExpressionItemType.Deny);
        if ((token.length > 1) && (token[0] === "'") && (token[token.length - 1] === "'"))
            return (DrapoExpressionItemType.Text);
        if ((token.length > 1) && (token[0] === '"') && (token[token.length - 1] === '"'))
            return (DrapoExpressionItemType.Text);
        if (this.IsMustache(token))
            return (DrapoExpressionItemType.Mustache);
        if (this.Application.Solver.Contains(this._tokensComparator, token))
            return (DrapoExpressionItemType.Comparator);
        if (this.Application.Solver.Contains(this._tokensLogical, token))
            return (DrapoExpressionItemType.Logical);
        if (this.Application.Solver.Contains(this._tokensArithmetic, token))
            return (DrapoExpressionItemType.Arithmetic);
        return (DrapoExpressionItemType.Text);
    };
    DrapoParser.prototype.IsParseExpressionItemTypeComplete = function (token) {
        if (this.Application.Solver.Contains(this._tokensLogical, token))
            return (true);
        if (this.Application.Solver.Contains(this._tokensComparator, token))
            return (true);
        if (this.Application.Solver.Contains(this._tokensArithmetic, token))
            return (true);
        if (this.IsNumber(token))
            return (true);
        if (this.IsMustacheContentValid(token))
            return (true);
        if (this.IsLetterOrNumber(token))
            return (true);
        return (false);
    };
    DrapoParser.prototype.ParseLines = function (data) {
        var lines = [];
        var split = data.split('\r\n');
        for (var i = 0; i < split.length; i++) {
            var line = split[i];
            if (line.length === 0)
                continue;
            lines.push(line);
        }
        return (lines);
    };
    DrapoParser.prototype.ParseHeader = function (data) {
        var index = data.indexOf(':');
        if (index < 0)
            return (null);
        var key = data.substr(0, index);
        var value = data.substr(index + 2);
        return ([key, value]);
    };
    DrapoParser.prototype.ParseFormat = function (format) {
        var tokens = [];
        var buffer = '';
        for (var i = 0; i < format.length; i++) {
            var chr = format[i];
            if (this.IsFormatCharacterCompatible(buffer, chr)) {
                buffer = buffer + chr;
            }
            else {
                if (buffer.length > 0)
                    tokens.push(buffer);
                buffer = chr;
            }
        }
        if (buffer.length > 0)
            tokens.push(buffer);
        return (tokens);
    };
    DrapoParser.prototype.IsFormatCharacterCompatible = function (buffer, chr) {
        if (buffer.length == 0)
            return (true);
        if (buffer[buffer.length - 1] === chr)
            return (true);
        if (this.IsNumber(buffer) && (this.IsNumber(chr)))
            return (true);
        return (false);
    };
    DrapoParser.prototype.ParsePixels = function (value) {
        if ((value == null) || (value == '') || (value.length < 3))
            return (null);
        var valueNumber = this.ParseNumber(value.substr(0, value.length - 2));
        return (valueNumber);
    };
    DrapoParser.prototype.ParseQuery = function (value, options) {
        if ((value == null) || (value === ''))
            return (null);
        var query = new DrapoQuery();
        var projections = this.ParseQueryProjections(value);
        if (projections === null) {
            query.Error = "Can't parse the projections.";
            return (query);
        }
        query.Projections = projections;
        var sources = this.ParseQuerySources(value);
        if (sources === null) {
            query.Error = "Can't parse the sources.";
            return (query);
        }
        query.Sources = sources;
        query.Filter = this.ParseQueryFilter(value);
        var sorts = this.ParseQueryOrderBy(value);
        if (sorts === null) {
            query.Error = "Can't parse the order by.";
            return (query);
        }
        query.Sorts = sorts;
        query.Options = this.ParseQueryOptions(options);
        return (query);
    };
    DrapoParser.prototype.ParseQueryProjections = function (value) {
        var tokenProjections = this.ParseSubstring(value, "SELECT", "FROM");
        if (tokenProjections === null)
            return (null);
        var projections = [];
        var tokenProjectionsSplit = this.ParseBlock(tokenProjections, ',');
        for (var i = 0; i < tokenProjectionsSplit.length; i++) {
            var tokenProjection = tokenProjectionsSplit[i];
            var projection = this.ParseQueryProjection(tokenProjection);
            if (projection === null)
                return (null);
            projections.push(projection);
        }
        return (projections);
    };
    DrapoParser.prototype.ParseQueryProjection = function (value) {
        var projection = new DrapoQueryProjection();
        var valueTrim = this.Trim(value);
        var valueTrimSplit = this.ParseBlock(valueTrim, ' ');
        var alias = this.ParseQueryProjectionAlias(valueTrimSplit);
        projection.Alias = alias;
        var valueTrimFirst = valueTrimSplit[0];
        var functionName = this.ParseQueryProjectionFunctionName(valueTrimFirst);
        if (functionName !== null) {
            projection.FunctionName = functionName;
            var functionParameters = this.ParseQueryProjectionFunctionParameters(valueTrimFirst);
            projection.FunctionParameters = this.ParseQueryProjectionFunctionParametersBlock(functionParameters);
        }
        else {
            var valueDefinition = valueTrimFirst;
            var isMustache = this.IsMustache(valueDefinition);
            var valueTrimFirstSplit = isMustache ? [valueDefinition] : this.ParseBlock(valueDefinition, '.');
            var source = (valueTrimFirstSplit.length > 1) ? valueTrimFirstSplit[0] : null;
            var column = (valueTrimFirstSplit.length > 1) ? valueTrimFirstSplit[1] : valueTrimFirstSplit[0];
            projection.Source = source;
            projection.Column = column;
        }
        return (projection);
    };
    DrapoParser.prototype.ParseQueryProjectionFunctionName = function (value) {
        var index = value.indexOf('(');
        if (index < 0)
            return (null);
        var functionName = value.substr(0, index).toUpperCase();
        return (functionName);
    };
    DrapoParser.prototype.ParseQueryProjectionFunctionParameters = function (value) {
        var index = value.indexOf('(');
        if (index < 0)
            return (null);
        var parameters = value.substring(index + 1, value.length - 1);
        return (parameters);
    };
    DrapoParser.prototype.ParseQueryProjectionFunctionParametersBlock = function (value) {
        return (this.ParseBlock(value, ','));
    };
    DrapoParser.prototype.ParseQueryProjectionFunctionParameterValue = function (value) {
        return (this.ParseBlock(value, '.'));
    };
    DrapoParser.prototype.ParseQueryProjectionAlias = function (values) {
        if (values.length != 3)
            return (null);
        if (values[1].toUpperCase() !== 'AS')
            return (null);
        return (values[2]);
    };
    DrapoParser.prototype.ParseQuerySources = function (value) {
        var tokenSources = this.ParseSubstring(value, 'FROM', 'WHERE', true);
        var tokenSourcesSplit = this.ParseQuerySourcesSplit(tokenSources);
        var sources = [];
        for (var i = 0; i < tokenSourcesSplit.length; i++) {
            var source = this.ParseQuerySource(tokenSourcesSplit[i]);
            if (source === null)
                return (null);
            sources.push(source);
        }
        return (sources);
    };
    DrapoParser.prototype.ParseQuerySource = function (value) {
        var source = new DrapoQuerySource();
        var joinType = this.ParseQuerySourceHeadValue(value, 'JOIN');
        source.JoinType = this.Trim(joinType);
        var sourceToken = joinType === null ? value : this.ParseSubstring(value, 'JOIN', 'ON');
        var sourceProjection = this.ParseQueryProjection(sourceToken);
        source.Source = sourceProjection.Column;
        source.Alias = sourceProjection.Alias;
        if (joinType !== null) {
            var indexOn = value.indexOf('ON');
            if (indexOn < 0)
                return (null);
            var onToken = value.substring(indexOn + 2);
            var onConditional = this.ParseQueryConditional(onToken);
            if (onConditional === null)
                return (null);
            if (onConditional.Comparator !== '=')
                return (null);
            source.JoinConditions.push(onConditional);
        }
        return (source);
    };
    DrapoParser.prototype.ParseQueryConditional = function (value) {
        var conditional = new DrapoQueryCondition();
        var item = this.ParseExpression(value);
        var leftProjection = this.ParseQueryProjection(item.Items[0].Value);
        conditional.SourceLeft = leftProjection.Source;
        conditional.ColumnLeft = leftProjection.Column;
        if (conditional.SourceLeft == null)
            conditional.ValueLeft = conditional.ColumnLeft;
        conditional.Comparator = item.Items[1].Value.toUpperCase();
        var index = 2;
        if ((item.Items.length === 4) && (conditional.Comparator === 'IS') && (item.Items[index].Value === 'NOT')) {
            conditional.Comparator = 'IS NOT';
            index++;
        }
        if ((item.Items.length > 3) && (conditional.Comparator === 'LIKE')) {
            if (item.Items[2].Value === '%') {
                index++;
                conditional.IsSearchStartRight = true;
            }
            if (item.Items[item.Items.length - 1].Value === '%')
                conditional.IsSearchEndRight = true;
        }
        var valueRight = item.Items[index].Value;
        if (valueRight.toUpperCase() === 'NULL') {
            conditional.IsNullRight = true;
        }
        else {
            var rightProjection = this.ParseQueryProjection(valueRight);
            conditional.SourceRight = rightProjection.Source;
            conditional.ColumnRight = rightProjection.Column;
            if (conditional.SourceRight == null)
                conditional.ValueRight = conditional.ColumnRight;
        }
        return (conditional);
    };
    DrapoParser.prototype.ParseSubstring = function (value, start, end, canMissEnd) {
        if (canMissEnd === void 0) { canMissEnd = false; }
        var indexStart = value.indexOf(start);
        if (indexStart < 0)
            return (null);
        var indexEnd = end === null ? -1 : value.indexOf(end);
        if (indexEnd < 0) {
            if (canMissEnd)
                indexEnd = value.length;
            else
                return (null);
        }
        var substring = value.substring(indexStart + start.length, indexEnd);
        return (substring);
    };
    DrapoParser.prototype.ParseQuerySourcesSplit = function (value) {
        value = this.Trim(value);
        var sources = [];
        while (value.length != 0) {
            var source = this.ParseQuerySourceHead(value);
            sources.push(source);
            if (value === source)
                break;
            value = value.substring(source.length, value.length);
            value = this.Trim(value);
        }
        return (sources);
    };
    DrapoParser.prototype.ParseQuerySourceHead = function (value) {
        var header = this.ParseQuerySourceHeadValue(value, 'INNER JOIN');
        if (header !== null)
            return (header);
        header = this.ParseQuerySourceHeadValue(value, 'LEFT JOIN');
        if (header !== null)
            return (header);
        header = this.ParseQuerySourceHeadValue(value, 'OUTER JOIN');
        if (header !== null)
            return (header);
        header = this.ParseQuerySourceHeadValue(value, 'RIGHT JOIN');
        if (header !== null)
            return (header);
        return (value);
    };
    DrapoParser.prototype.ParseQuerySourceHeadValue = function (value, search) {
        var index = value.indexOf(search, 1);
        if (index < 0)
            return (null);
        var header = value.substring(0, index);
        return (header);
    };
    DrapoParser.prototype.ParseQueryFilter = function (value) {
        var whereToken = this.ParseSubstring(value, 'WHERE', 'ORDER BY', true);
        if (whereToken === null)
            return (null);
        var filter = this.ParseQueryConditional(whereToken);
        return (filter);
    };
    DrapoParser.prototype.ParseQueryOrderBy = function (value) {
        var sorts = [];
        var token = this.ParseSubstring(value, 'ORDER BY ', null, true);
        if (token === null)
            return (sorts);
        var blocks = this.ParseBlock(token, ',');
        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            var parts = this.ParseBlock(block, ' ');
            if (parts.length > 2)
                return (null);
            var sort = new DrapoQuerySort();
            sort.Column = parts[0];
            if (parts.length > 1)
                sort.Type = parts[1];
            sorts.push(sort);
        }
        return (sorts);
    };
    DrapoParser.prototype.ParseQueryOptions = function (value) {
        var options = new DrapoQueryOptions();
        if (value == null)
            return (options);
        var optionsValues = this.ParseBlock(value, ';');
        for (var i = 0; i < optionsValues.length; i++) {
            var optionsValue = this.ParseBlock(optionsValues[i], '=');
            if (optionsValue[0] === 'list')
                options.List = optionsValue[1];
        }
        return (options);
    };
    DrapoParser.prototype.ParseSwitch = function (value) {
        var items = [];
        var switchItems = this.ParseBlock(value, ',');
        for (var i = 0; i < switchItems.length; i++) {
            var switchItem = this.ParseBlock(switchItems[i], ':');
            var item = [switchItem[0], switchItem.length > 1 ? switchItem[1] : null];
            items.push(item);
        }
        return (items);
    };
    return DrapoParser;
}());

"use strict";
var DrapoPipeMessage = (function () {
    function DrapoPipeMessage() {
        this._type = null;
        this._data = null;
    }
    Object.defineProperty(DrapoPipeMessage.prototype, "Type", {
        get: function () {
            return (this._type);
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoPipeMessage.prototype, "Data", {
        get: function () {
            return (this._data);
        },
        set: function (value) {
            this._data = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoPipeMessage;
}());

"use strict";
var DrapoPipeMessageType;
(function (DrapoPipeMessageType) {
    DrapoPipeMessageType[DrapoPipeMessageType["Register"] = 0] = "Register";
    DrapoPipeMessageType[DrapoPipeMessageType["Storage"] = 1] = "Storage";
    DrapoPipeMessageType[DrapoPipeMessageType["Execute"] = 2] = "Execute";
})(DrapoPipeMessageType || (DrapoPipeMessageType = {}));

"use strict";
var DrapoPipePollingMessage = (function () {
    function DrapoPipePollingMessage() {
        this.Key = null;
        this.Hash = null;
    }
    return DrapoPipePollingMessage;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoPlumber = (function () {
    function DrapoPlumber(application) {
        this._connection = null;
        this._lock = false;
        this._messages = [];
        this._actionPolling = null;
        this._pollingMessages = [];
        this._application = application;
    }
    Object.defineProperty(DrapoPlumber.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoPlumber.prototype.CanUsePipes = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetUsePipes()];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoPlumber.prototype.ConnectPipe = function () {
        return __awaiter(this, void 0, void 0, function () {
            var usePipes, application, pipHubName, urlRelative, urlAbsolute, connection, actionNotify, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.CanUsePipes()];
                    case 1:
                        usePipes = _b.sent();
                        if (!usePipes)
                            return [2, (false)];
                        application = this.Application;
                        return [4, this.Application.Config.GetPipeHubName()];
                    case 2:
                        pipHubName = _b.sent();
                        urlRelative = '~/' + pipHubName;
                        urlAbsolute = this.Application.Server.ResolveUrl(urlRelative);
                        connection = new signalR.HubConnectionBuilder()
                            .withUrl(urlAbsolute, {
                            skipNegotiation: true,
                            transport: signalR.HttpTransportType.WebSockets
                        })
                            .withAutomaticReconnect({
                            nextRetryDelayInMilliseconds: function (retryContext) {
                                if (retryContext.previousRetryCount < 10)
                                    return (1000);
                                if (retryContext.previousRetryCount < 100)
                                    return (10000);
                                return (60000);
                            }
                        })
                            .build();
                        this._connection = connection;
                        return [4, connection.start()];
                    case 3:
                        _b.sent();
                        return [4, this.Application.Config.GetPipeActionNotify()];
                    case 4:
                        actionNotify = _b.sent();
                        connection.on(actionNotify, function (message) {
                            application.Plumber.NotifyPipe(message);
                        });
                        _a = this;
                        return [4, this.Application.Config.GetPipeActionPolling()];
                    case 5:
                        _a._actionPolling = _b.sent();
                        connection.on(this._actionPolling, function (message) {
                            application.Plumber.ReceivePollingPipe(message);
                        });
                        connection.onreconnected(function (connectionId) { return __awaiter(_this, void 0, void 0, function () {
                            var onReconnect;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, this.RequestPipeRegister(connection)];
                                    case 1:
                                        _a.sent();
                                        return [4, this.Application.Config.GetOnReconnect()];
                                    case 2:
                                        onReconnect = _a.sent();
                                        if (!((onReconnect != null) && (onReconnect != ''))) return [3, 4];
                                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, onReconnect)];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [2];
                                }
                            });
                        }); });
                        return [4, this.RequestPipeRegister(connection)];
                    case 6:
                        _b.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoPlumber.prototype.RequestPipeRegister = function (connection) {
        return __awaiter(this, void 0, void 0, function () {
            var actionRegister;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetPipeActionRegister()];
                    case 1:
                        actionRegister = _a.sent();
                        return [4, connection.send(actionRegister)];
                    case 2:
                        _a.sent();
                        return [4, this.WaitForRegister()];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoPlumber.prototype.WaitForRegister = function (retry, interval) {
        if (retry === void 0) { retry = 1000; }
        if (interval === void 0) { interval = 50; }
        return __awaiter(this, void 0, void 0, function () {
            var pipeHeaderConnectionId, i, register;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetPipeHeaderConnectionId()];
                    case 1:
                        pipeHeaderConnectionId = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < retry)) return [3, 5];
                        register = this.Application.Server.GetRequestHeader(pipeHeaderConnectionId);
                        if (register != null)
                            return [2, (register)];
                        return [4, this.Application.Document.Sleep(interval)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5: return [2, (null)];
                }
            });
        });
    };
    DrapoPlumber.prototype.NotifyPipe = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 7, , 9]);
                        if (this._lock) {
                            this._messages.push(message);
                            return [2];
                        }
                        if (!(message.Type == DrapoPipeMessageType.Storage)) return [3, 2];
                        return [4, this.NotifyPipeStorage(message)];
                    case 1:
                        _a.sent();
                        return [3, 6];
                    case 2:
                        if (!(message.Type == DrapoPipeMessageType.Register)) return [3, 4];
                        return [4, this.NofityPipeRegister(message)];
                    case 3:
                        _a.sent();
                        return [3, 6];
                    case 4:
                        if (!(message.Type == DrapoPipeMessageType.Execute)) return [3, 6];
                        return [4, this.NofityPipeExecute(message)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3, 9];
                    case 7:
                        e_1 = _a.sent();
                        return [4, this.Application.ExceptionHandler.Handle(e_1, 'DrapoPlumber - NotifyPipe')];
                    case 8:
                        _a.sent();
                        return [3, 9];
                    case 9: return [2];
                }
            });
        });
    };
    DrapoPlumber.prototype.NotifyPipeStorage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var dataPipes, i, dataPipe;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataPipes = this.Application.Parser.ParsePipes(message.Data);
                        if (dataPipes == null)
                            return [2];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < dataPipes.length)) return [3, 5];
                        dataPipe = dataPipes[i];
                        return [4, this.Application.Debugger.AddPipe(dataPipe)];
                    case 2:
                        _a.sent();
                        return [4, this.Application.Storage.ReloadPipe(dataPipe)];
                    case 3:
                        _a.sent();
                        this.Application.SectorContainerHandler.ReloadStorageItemByPipe(dataPipe);
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 1];
                    case 5: return [2];
                }
            });
        });
    };
    DrapoPlumber.prototype.NofityPipeRegister = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var pipeHeaderConnectionId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetPipeHeaderConnectionId()];
                    case 1:
                        pipeHeaderConnectionId = _a.sent();
                        this.Application.Server.AddRequestHeader(pipeHeaderConnectionId, message.Data);
                        return [2];
                }
            });
        });
    };
    DrapoPlumber.prototype.NofityPipeExecute = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, message.Data)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoPlumber.prototype.SendPolling = function (pollingKey) {
        return __awaiter(this, void 0, void 0, function () {
            var message, pollingHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        message = this.GetMessagePolling(pollingKey);
                        if (message === null) {
                            message = new DrapoPipePollingMessage();
                            message.Key = pollingKey;
                            this._pollingMessages.push(message);
                        }
                        else {
                            message.Hash = null;
                        }
                        return [4, this._connection.invoke(this._actionPolling, message)];
                    case 1:
                        _a.sent();
                        return [4, this.WaitForMessagePollingHash(pollingKey)];
                    case 2:
                        pollingHash = _a.sent();
                        return [2, (pollingHash)];
                }
            });
        });
    };
    DrapoPlumber.prototype.GetMessagePolling = function (key) {
        for (var i = this._pollingMessages.length - 1; i >= 0; i--) {
            var currentMessage = this._pollingMessages[i];
            if (currentMessage.Key !== key)
                continue;
            return (currentMessage);
        }
        return (null);
    };
    DrapoPlumber.prototype.WaitForMessagePollingHash = function (pollingKey, retry, interval) {
        if (retry === void 0) { retry = 1000; }
        if (interval === void 0) { interval = 50; }
        return __awaiter(this, void 0, void 0, function () {
            var i, i_1, currentMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < retry)) return [3, 4];
                        for (i_1 = this._pollingMessages.length - 1; i_1 >= 0; i_1--) {
                            currentMessage = this._pollingMessages[i_1];
                            if ((currentMessage.Key !== pollingKey) || (currentMessage.Hash === null))
                                continue;
                            this._pollingMessages.splice(i_1, 1);
                            return [2, (currentMessage.Hash)];
                        }
                        return [4, this.Application.Document.Sleep(interval)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2, (null)];
                }
            });
        });
    };
    DrapoPlumber.prototype.ReceivePollingPipe = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var currentMessage;
            return __generator(this, function (_a) {
                currentMessage = this.GetMessagePolling(message.Key);
                if (currentMessage !== null)
                    currentMessage.Hash = message.Hash;
                return [2];
            });
        });
    };
    DrapoPlumber.prototype.Lock = function () {
        if (this._lock)
            return (false);
        this._lock = true;
        return (true);
    };
    DrapoPlumber.prototype.Unlock = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, message;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._lock)
                            return [2, (false)];
                        this._lock = false;
                        i = this._messages.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        message = this._messages[i];
                        return [4, this.NotifyPipe(message)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4:
                        this._messages.length = 0;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoPlumber.prototype.Clear = function () {
        this._messages.length = 0;
    };
    return DrapoPlumber;
}());

"use strict";
var DrapoQuery = (function () {
    function DrapoQuery() {
        this._error = null;
        this._projections = [];
        this._sources = [];
        this._filter = null;
        this._sorts = null;
        this._outputArray = null;
        this._options = null;
    }
    Object.defineProperty(DrapoQuery.prototype, "Error", {
        get: function () {
            return (this._error);
        },
        set: function (value) {
            this._error = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuery.prototype, "Projections", {
        get: function () {
            return (this._projections);
        },
        set: function (value) {
            this._projections = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuery.prototype, "Sources", {
        get: function () {
            return (this._sources);
        },
        set: function (value) {
            this._sources = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuery.prototype, "Filter", {
        get: function () {
            return (this._filter);
        },
        set: function (value) {
            this._filter = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuery.prototype, "Sorts", {
        get: function () {
            return (this._sorts);
        },
        set: function (value) {
            this._sorts = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuery.prototype, "OutputArray", {
        get: function () {
            return (this._outputArray);
        },
        set: function (value) {
            this._outputArray = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuery.prototype, "Options", {
        get: function () {
            return (this._options);
        },
        set: function (value) {
            this._options = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoQuery;
}());

"use strict";
var DrapoQueryCondition = (function () {
    function DrapoQueryCondition() {
        this._sourceLeft = null;
        this._columnLeft = null;
        this._valueLeft = null;
        this._comparator = null;
        this._sourceRight = null;
        this._columnRight = null;
        this._valueRight = null;
        this._isNullRight = false;
        this._isSearchStartRight = false;
        this._isSearchEndRight = false;
    }
    Object.defineProperty(DrapoQueryCondition.prototype, "SourceLeft", {
        get: function () {
            return (this._sourceLeft);
        },
        set: function (value) {
            this._sourceLeft = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "ColumnLeft", {
        get: function () {
            return (this._columnLeft);
        },
        set: function (value) {
            this._columnLeft = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "ValueLeft", {
        get: function () {
            return (this._valueLeft);
        },
        set: function (value) {
            this._valueLeft = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "Comparator", {
        get: function () {
            return (this._comparator);
        },
        set: function (value) {
            this._comparator = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "SourceRight", {
        get: function () {
            return (this._sourceRight);
        },
        set: function (value) {
            this._sourceRight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "ColumnRight", {
        get: function () {
            return (this._columnRight);
        },
        set: function (value) {
            this._columnRight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "ValueRight", {
        get: function () {
            return (this._valueRight);
        },
        set: function (value) {
            this._valueRight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "IsNullRight", {
        get: function () {
            return (this._isNullRight);
        },
        set: function (value) {
            this._isNullRight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "IsSearchStartRight", {
        get: function () {
            return (this._isSearchStartRight);
        },
        set: function (value) {
            this._isSearchStartRight = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryCondition.prototype, "IsSearchEndRight", {
        get: function () {
            return (this._isSearchEndRight);
        },
        set: function (value) {
            this._isSearchEndRight = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoQueryCondition.prototype.Clone = function () {
        var clone = new DrapoQueryCondition();
        clone.SourceLeft = this.SourceLeft;
        clone.ColumnLeft = this.ColumnLeft;
        clone.ValueLeft = this.ValueLeft;
        clone.Comparator = this.Comparator;
        clone.SourceRight = this.SourceRight;
        clone.ColumnRight = this.ColumnRight;
        clone.ValueRight = this.ValueRight;
        clone.IsNullRight = this.IsNullRight;
        clone.IsSearchStartRight = this.IsSearchStartRight;
        clone.IsSearchEndRight = this.IsSearchEndRight;
        return (clone);
    };
    return DrapoQueryCondition;
}());

"use strict";
var DrapoQueryOptions = (function () {
    function DrapoQueryOptions() {
        this._list = null;
    }
    Object.defineProperty(DrapoQueryOptions.prototype, "List", {
        get: function () {
            return (this._list);
        },
        set: function (value) {
            this._list = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoQueryOptions;
}());

"use strict";
var DrapoQueryProjection = (function () {
    function DrapoQueryProjection() {
        this._source = null;
        this._column = null;
        this._alias = null;
        this._functionName = null;
        this._functionParameters = null;
    }
    Object.defineProperty(DrapoQueryProjection.prototype, "Source", {
        get: function () {
            return (this._source);
        },
        set: function (value) {
            this._source = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryProjection.prototype, "Column", {
        get: function () {
            return (this._column);
        },
        set: function (value) {
            this._column = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryProjection.prototype, "Alias", {
        get: function () {
            return (this._alias);
        },
        set: function (value) {
            this._alias = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryProjection.prototype, "FunctionName", {
        get: function () {
            return (this._functionName);
        },
        set: function (value) {
            this._functionName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQueryProjection.prototype, "FunctionParameters", {
        get: function () {
            return (this._functionParameters);
        },
        set: function (value) {
            this._functionParameters = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoQueryProjection;
}());

"use strict";
var DrapoQuerySort = (function () {
    function DrapoQuerySort() {
        this._column = null;
        this._type = null;
    }
    Object.defineProperty(DrapoQuerySort.prototype, "Column", {
        get: function () {
            return (this._column);
        },
        set: function (value) {
            this._column = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuerySort.prototype, "Type", {
        get: function () {
            return (this._type);
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoQuerySort;
}());

"use strict";
var DrapoQuerySource = (function () {
    function DrapoQuerySource() {
        this._joinType = null;
        this._source = null;
        this._alias = null;
        this._joinConditions = [];
    }
    Object.defineProperty(DrapoQuerySource.prototype, "JoinType", {
        get: function () {
            return (this._joinType);
        },
        set: function (value) {
            this._joinType = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuerySource.prototype, "Source", {
        get: function () {
            return (this._source);
        },
        set: function (value) {
            this._source = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuerySource.prototype, "Alias", {
        get: function () {
            return (this._alias);
        },
        set: function (value) {
            this._alias = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoQuerySource.prototype, "JoinConditions", {
        get: function () {
            return (this._joinConditions);
        },
        set: function (value) {
            this._joinConditions = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoQuerySource;
}());

"use strict";
var DrapoRange = (function () {
    function DrapoRange(start, end) {
        if (start === void 0) { start = null; }
        if (end === void 0) { end = null; }
        this._start = null;
        this._end = null;
        this._start = start;
        this._end = end;
    }
    Object.defineProperty(DrapoRange.prototype, "Start", {
        get: function () {
            return (this._start);
        },
        set: function (value) {
            this._start = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRange.prototype, "End", {
        get: function () {
            return (this._end);
        },
        set: function (value) {
            this._end = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoRange;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoRegister = (function () {
    function DrapoRegister(application) {
        this._components = [];
        this._cacheKeys = [];
        this._cacheDatas = [];
        this._application = application;
    }
    Object.defineProperty(DrapoRegister.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoRegister.prototype.GetRegisteredComponent = function (tagName) {
        return __awaiter(this, void 0, void 0, function () {
            var components, i, component;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetSector("Components")];
                    case 1:
                        components = _a.sent();
                        if (components == null)
                            return [2, (null)];
                        for (i = 0; i < components.length; i++) {
                            component = components[i];
                            if (component.Tag == tagName)
                                return [2, (component)];
                        }
                        return [2, (null)];
                }
            });
        });
    };
    DrapoRegister.prototype.IsRegisteredComponent = function (tagName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetRegisteredComponent(tagName)];
                    case 1: return [2, ((_a.sent()) != null)];
                }
            });
        });
    };
    DrapoRegister.prototype.IsActiveComponent = function (tagName) {
        for (var i = 0; i < this._components.length; i++)
            if (this._components[i] === tagName)
                return (true);
        return (false);
    };
    DrapoRegister.prototype.ActivateComponent = function (tagName) {
        return __awaiter(this, void 0, void 0, function () {
            var component, i, file;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetRegisteredComponent(tagName)];
                    case 1:
                        component = _a.sent();
                        this._components.push(tagName);
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < component.Files.length)) return [3, 7];
                        file = component.Files[i];
                        if (!(file.Type === 2)) return [3, 4];
                        return [4, this.ActivateComponentFileScript(component, file)];
                    case 3:
                        _a.sent();
                        return [3, 6];
                    case 4:
                        if (!(file.Type === 1)) return [3, 6];
                        return [4, this.ActivateComponentFileStyle(component, file)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3, 2];
                    case 7: return [2];
                }
            });
        });
    };
    DrapoRegister.prototype.ActivateComponentFileScript = function (component, file) {
        return __awaiter(this, void 0, void 0, function () {
            var relatedUrl, url, script;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetComponentFileUrl(component, file)];
                    case 1:
                        relatedUrl = _a.sent();
                        url = this.Application.Server.ResolveUrl(relatedUrl);
                        script = document.createElement('script');
                        script.src = url;
                        script.async = false;
                        document.head.appendChild(script);
                        return [2];
                }
            });
        });
    };
    DrapoRegister.prototype.ActivateComponentFileStyle = function (component, file) {
        return __awaiter(this, void 0, void 0, function () {
            var relatedUrl, url, link;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetComponentFileUrl(component, file)];
                    case 1:
                        relatedUrl = _a.sent();
                        url = this.Application.Server.ResolveUrl(relatedUrl);
                        link = document.createElement('link');
                        link.href = url;
                        link.rel = 'stylesheet';
                        document.head.appendChild(link);
                        return [2];
                }
            });
        });
    };
    DrapoRegister.prototype.CreateInstanceComponent = function (tagName, el) {
        return __awaiter(this, void 0, void 0, function () {
            var component, constructor, result, resultPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetRegisteredComponent(tagName)];
                    case 1:
                        component = _a.sent();
                        if ((component.Constructor == null) || (component.Constructor == ''))
                            return [2];
                        return [4, this.WaitForFunction(component.Constructor)];
                    case 2:
                        _a.sent();
                        constructor = window[component.Constructor];
                        if (constructor == null)
                            return [2];
                        result = constructor(el, this.Application);
                        if (!(Promise.resolve(result) == result)) return [3, 4];
                        resultPromise = result;
                        return [4, resultPromise];
                    case 3: return [2, (_a.sent())];
                    case 4: return [2, (null)];
                }
            });
        });
    };
    DrapoRegister.prototype.WaitForFunction = function (functionName, retry, interval) {
        if (retry === void 0) { retry = 1000; }
        if (interval === void 0) { interval = 1000; }
        return __awaiter(this, void 0, void 0, function () {
            var i, functionReference;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < retry)) return [3, 4];
                        functionReference = window[functionName];
                        if (functionReference != null)
                            return [2];
                        return [4, this.Application.Document.Sleep(interval)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoRegister.prototype.GetRegisteredComponentViewContent = function (tagName) {
        return __awaiter(this, void 0, void 0, function () {
            var component, i, file;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetRegisteredComponent(tagName)];
                    case 1:
                        component = _a.sent();
                        if (component == null)
                            return [2, (null)];
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < component.Files.length)) return [3, 5];
                        file = component.Files[i];
                        if (!(file.Type === 0)) return [3, 4];
                        return [4, this.GetRegisteredComponentFileContent(component, file)];
                    case 3: return [2, (_a.sent())];
                    case 4:
                        i++;
                        return [3, 2];
                    case 5: return [2, (null)];
                }
            });
        });
    };
    DrapoRegister.prototype.GetRegisteredComponentFileContent = function (component, file) {
        return __awaiter(this, void 0, void 0, function () {
            var key, index, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        key = this.CreateKeyComponentFile(component, file);
                        index = this.GetCacheKeyIndex(key);
                        if (!(index == null)) return [3, 2];
                        _a = this.AddCacheData;
                        _b = [key];
                        return [4, this.GetRegisteredComponentFileContentInternal(component, file)];
                    case 1:
                        index = _a.apply(this, _b.concat([_c.sent()]));
                        _c.label = 2;
                    case 2: return [2, (this.GetCacheData(index))];
                }
            });
        });
    };
    DrapoRegister.prototype.GetComponentFileUrl = function (component, file) {
        return __awaiter(this, void 0, void 0, function () {
            var url, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = file.ResourceType === 1 ? file.Path : '~/components/' + component.Name + '/' + file.Name;
                        _a = url;
                        return [4, this.Application.Server.AppendUrlQueryStringCacheStatic(url)];
                    case 1:
                        url = _a + _b.sent();
                        return [2, (url)];
                }
            });
        });
    };
    DrapoRegister.prototype.GetRegisteredComponentFileContentInternal = function (component, file) {
        return __awaiter(this, void 0, void 0, function () {
            var url, htmlCached, response, html, allowCache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetComponentFileUrl(component, file)];
                    case 1:
                        url = _a.sent();
                        htmlCached = this.Application.CacheHandler.GetCachedComponentView(url);
                        if (htmlCached != null)
                            return [2, (htmlCached)];
                        return [4, this.Application.Server.GetHTML(url)];
                    case 2:
                        response = _a.sent();
                        if (response == null)
                            return [2, (null)];
                        html = response[0];
                        allowCache = response[1];
                        if (allowCache)
                            this.Application.CacheHandler.SetCachedComponentView(url, html);
                        return [2, (html)];
                }
            });
        });
    };
    DrapoRegister.prototype.CreateKeyComponentFile = function (component, file) {
        return (component.Name + ':' + file.Name);
    };
    DrapoRegister.prototype.GetCacheKeyIndex = function (dataKey) {
        for (var i = 0; i < this._cacheKeys.length; i++) {
            if (this._cacheKeys[i] == dataKey)
                return (i);
        }
        return (null);
    };
    DrapoRegister.prototype.GetCacheData = function (dataIndex) {
        return (this._cacheDatas[dataIndex]);
    };
    DrapoRegister.prototype.AddCacheData = function (dataKey, data) {
        this._cacheKeys.push(dataKey);
        this._cacheDatas.push(data);
        return (this._cacheKeys.length - 1);
    };
    DrapoRegister.prototype.IsEndsWith = function (text, value) {
        var length = value.length;
        if (text.length < length)
            return (false);
        return (text.substr(text.length - length) === value);
    };
    return DrapoRegister;
}());

"use strict";
var DrapoRegularExpression = (function () {
    function DrapoRegularExpression() {
        this._items = [];
    }
    Object.defineProperty(DrapoRegularExpression.prototype, "Expression", {
        get: function () {
            return (this._expression);
        },
        set: function (value) {
            this._expression = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRegularExpression.prototype, "Items", {
        get: function () {
            return (this._items);
        },
        enumerable: false,
        configurable: true
    });
    DrapoRegularExpression.prototype.CreateItem = function (expression, name) {
        if (name === void 0) { name = null; }
        var item = new DrapoRegularExpressionItem();
        item.Expression = expression;
        item.Name = name;
        this._items.push(item);
        return (item);
    };
    DrapoRegularExpression.prototype.IsValid = function (value) {
        var regex = new RegExp(this.Expression);
        if (!regex.test(value))
            return (false);
        var valueCurrent = value;
        for (var i = 0; i < this._items.length; i++) {
            var item = this._items[i];
            var match = valueCurrent.match(item.Expression);
            if (match == null)
                return (null);
            var matchValue = match[0];
            if (valueCurrent.indexOf(matchValue) != 0)
                return (null);
            item.Value = matchValue;
            valueCurrent = valueCurrent.substring(matchValue.length);
        }
        return (true);
    };
    DrapoRegularExpression.prototype.GetValue = function (name) {
        for (var i = 0; i < this._items.length; i++) {
            var item = this._items[i];
            if (item.Name === name)
                return (item.Value);
        }
        return (null);
    };
    return DrapoRegularExpression;
}());

"use strict";
var DrapoRegularExpressionItem = (function () {
    function DrapoRegularExpressionItem() {
    }
    Object.defineProperty(DrapoRegularExpressionItem.prototype, "Expression", {
        get: function () {
            return (this._expression);
        },
        set: function (value) {
            this._expression = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRegularExpressionItem.prototype, "Name", {
        get: function () {
            return (this._name);
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRegularExpressionItem.prototype, "Value", {
        get: function () {
            return (this._value);
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoRegularExpressionItem;
}());

"use strict";
var DrapoRenderContext = (function () {
    function DrapoRenderContext() {
        this._sectorExpressionContexts = {};
        this._dataKeyElements = {};
    }
    DrapoRenderContext.prototype.GetKey = function (sector, expression) {
        return (sector + '_' + expression);
    };
    DrapoRenderContext.prototype.HasExpressionContext = function (sector, expression) {
        var key = this.GetKey(sector, expression);
        var value = this._sectorExpressionContexts[key];
        if (value == null)
            return (null);
        return value;
    };
    DrapoRenderContext.prototype.AddExpressionContext = function (sector, expression, hasContext) {
        var key = this.GetKey(sector, expression);
        this._sectorExpressionContexts[key] = hasContext;
    };
    DrapoRenderContext.prototype.HasDataKeyElement = function (dataKey) {
        var value = this._dataKeyElements[dataKey];
        if (value == null)
            return (null);
        return value;
    };
    DrapoRenderContext.prototype.AddDataKeyElement = function (dataKey, hasElement) {
        this._dataKeyElements[dataKey] = hasElement;
    };
    return DrapoRenderContext;
}());

"use strict";
var DrapoResize = (function () {
    function DrapoResize() {
        this.Unit = 'px';
    }
    Object.defineProperty(DrapoResize.prototype, "Code", {
        get: function () {
            return (this._code);
        },
        set: function (value) {
            this._code = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Item", {
        get: function () {
            return (this._contextItem);
        },
        set: function (value) {
            this._contextItem = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Element", {
        get: function () {
            return (this._element);
        },
        set: function (value) {
            this._element = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Parent", {
        get: function () {
            return (this._parent);
        },
        set: function (value) {
            this._parent = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Container", {
        get: function () {
            return (this._container);
        },
        set: function (value) {
            this._container = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Model", {
        get: function () {
            return (this._model);
        },
        set: function (value) {
            this._model = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Location", {
        get: function () {
            return (this._location);
        },
        set: function (value) {
            this._location = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Type", {
        get: function () {
            return (this._type);
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Unit", {
        get: function () {
            return (this._unit);
        },
        set: function (value) {
            this._unit = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Class", {
        get: function () {
            return (this._class);
        },
        set: function (value) {
            this._class = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "Preview", {
        get: function () {
            return (this._preview);
        },
        set: function (value) {
            this._preview = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "SizeStart", {
        get: function () {
            return (this._sizeStart);
        },
        set: function (value) {
            this._sizeStart = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "UnitStart", {
        get: function () {
            return (this._unitStart);
        },
        set: function (value) {
            this._unitStart = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "EventStartValue", {
        get: function () {
            return (this._eventStartValue);
        },
        set: function (value) {
            this._eventStartValue = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoResize.prototype, "EventCurrentValue", {
        get: function () {
            return (this._eventCurrentValue);
        },
        set: function (value) {
            this._eventCurrentValue = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoResize;
}());

"use strict";
var DrapoRouteItem = (function () {
    function DrapoRouteItem() {
        this._url = null;
        this._sector = null;
        this._title = null;
        this._state = null;
    }
    Object.defineProperty(DrapoRouteItem.prototype, "Url", {
        get: function () {
            return (this._url);
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRouteItem.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRouteItem.prototype, "Title", {
        get: function () {
            return (this._title);
        },
        set: function (value) {
            this._title = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoRouteItem.prototype, "State", {
        get: function () {
            return (this._state);
        },
        set: function (value) {
            this._state = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoRouteItem;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoRouter = (function () {
    function DrapoRouter(application) {
        this._routes = [];
        this._canUseRouter = null;
        this._application = application;
    }
    Object.defineProperty(DrapoRouter.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoRouter.prototype.Create = function (url, sector, title, state) {
        var route = new DrapoRouteItem();
        route.Url = url;
        route.Sector = sector;
        route.Title = title;
        route.State = state;
        this._routes.push(route);
        return (route);
    };
    DrapoRouter.prototype.GetLastRouteUrlBySector = function (sector) {
        var route = this.GetLastRouteBySector(sector);
        if (route == null)
            return (null);
        return (route.Url);
    };
    DrapoRouter.prototype.GetLastRouteUrl = function () {
        for (var i = this._routes.length - 1; i >= 0; i--) {
            var route = this._routes[i];
            if (route.Url != null)
                return (route.Url);
        }
        return (null);
    };
    DrapoRouter.prototype.GetLastRouteBySector = function (sector) {
        for (var i = this._routes.length - 1; i >= 0; i--) {
            var route = this._routes[i];
            if (route.Sector === sector)
                return (route);
        }
        return (null);
    };
    DrapoRouter.prototype.GetLastRouteTitle = function () {
        for (var i = this._routes.length - 1; i >= 0; i--) {
            var route = this._routes[i];
            if (route.Title !== null)
                return (route.Title);
        }
        return (null);
    };
    DrapoRouter.prototype.CanUseRouter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this._canUseRouter === null)) return [3, 2];
                        _a = this;
                        return [4, this.Application.Config.GetUseRouter()];
                    case 1:
                        _a._canUseRouter = _b.sent();
                        _b.label = 2;
                    case 2: return [2, (this._canUseRouter)];
                }
            });
        });
    };
    DrapoRouter.prototype.Route = function (url, sector, title, state) {
        if (sector === void 0) { sector = null; }
        if (title === void 0) { title = null; }
        if (state === void 0) { state = null; }
        return __awaiter(this, void 0, void 0, function () {
            var canUseRouter, route;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.CanUseRouter()];
                    case 1:
                        canUseRouter = _a.sent();
                        this.UpdateTitle(title);
                        if (canUseRouter) {
                            route = this.Create(this.Application.Server.ResolveUrl(url), sector, title, state);
                            history.pushState(null, route.Title, route.Url);
                        }
                        this._application.Log.WriteVerbose("Router - Route to {0}", url);
                        return [2];
                }
            });
        });
    };
    DrapoRouter.prototype.OnPopState = function (e) {
        var route = this._routes.pop();
        if (route == null)
            return;
        var routePrevious = this.GetLastRouteBySector(route.Sector);
        var title = this.GetLastRouteTitle();
        this.UpdateTitle(title);
        this.Application.Document.StartUpdate(null);
        if (routePrevious == null) {
            this.Application.Document.LoadChildSectorDefault(route.Sector);
        }
        else {
            this.Application.Document.LoadChildSector(route.Sector, route.Url, route.Title, false);
        }
    };
    DrapoRouter.prototype.UpdateTitle = function (title) {
        if (title == null)
            return;
        if (title == '')
            return;
        if (title == '=')
            return;
        document.title = title;
    };
    DrapoRouter.prototype.UpdateURL = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var urlResolved;
            return __generator(this, function (_a) {
                urlResolved = this.Application.Server.ResolveUrl(url);
                history.pushState(null, document.title, urlResolved);
                return [2];
            });
        });
    };
    return DrapoRouter;
}());

"use strict";
var DrapoSearcher = (function () {
    function DrapoSearcher(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoSearcher.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoSearcher.prototype.FindDataKey = function (dataKey, sector) {
        var els = this.FindAllByAttributeAndValue('d-datakey', dataKey);
        var el = this.Filter(sector, els);
        return (el);
    };
    DrapoSearcher.prototype.HasDataKeyElement = function (dataKey) {
        var el = this.FindByAttributeAndValue('d-datakey', dataKey);
        return (el != null);
    };
    DrapoSearcher.prototype.Filter = function (sector, els) {
        var sectors = this.Application.Document.GetSectorsAllowed(sector);
        for (var i = 0; i < els.length; i++) {
            var el = els[i];
            var elSector = this.Application.Document.GetSector(el);
            if (elSector !== sector) {
                var elAccess = el.getAttribute('d-dataAccess');
                if (elAccess == 'private')
                    continue;
                var elType = el.getAttribute('d-dataType');
                if ((elAccess == null) && (elType === 'parent'))
                    continue;
            }
            if ((this.Application.Document.IsSectorAllowed(elSector, sectors)) && (!this.Application.Document.IsElementDetached(el)))
                return (el);
        }
        return (null);
    };
    DrapoSearcher.prototype.CreateElementsList = function (nodes) {
        var els = [];
        for (var i = 0; i < nodes.length; i++)
            els.push(nodes[i]);
        return (els);
    };
    DrapoSearcher.prototype.FindByAttributeAndValue = function (name, value) {
        var el = document.querySelector("[" + name + "='" + value + "']");
        return (el);
    };
    DrapoSearcher.prototype.FindAllByAttributeAndValue = function (name, value) {
        var nodes = document.querySelectorAll("[" + name + "='" + value + "']");
        return (this.CreateElementsList(nodes));
    };
    DrapoSearcher.prototype.FindByAttributeAndValueFromParent = function (name, value, parent) {
        var el = parent.querySelector("[" + name + "='" + value + "']");
        return (el);
    };
    DrapoSearcher.prototype.FindAllByAttribute = function (name) {
        var nodes = document.querySelectorAll("[" + name + "]");
        return (this.CreateElementsList(nodes));
    };
    DrapoSearcher.prototype.FindAllByAttributeFromParent = function (name, parent) {
        var nodes = parent.querySelectorAll("[" + name + "]");
        return (this.CreateElementsList(nodes));
    };
    DrapoSearcher.prototype.FindByTagName = function (tagName) {
        var el = document.querySelector(tagName);
        return (el);
    };
    return DrapoSearcher;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoSectorContainerHandler = (function () {
    function DrapoSectorContainerHandler(application) {
        this.CONTAINER_EQUAL = '=';
        this._containers = [];
        this._activeSectorContainers = [];
        this._sectorContexts = [];
        this._sectorContextsExpressions = [];
        this._sectorContextsValues = [];
        this._application = application;
    }
    Object.defineProperty(DrapoSectorContainerHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoSectorContainerHandler.prototype.IsElementContainerized = function (element) {
        var elRoot = this.GetElementRoot(element);
        if (elRoot === null)
            return (false);
        for (var i = this._containers.length - 1; i >= 0; i--) {
            var container = this._containers[i];
            if (container.Element === elRoot)
                return (true);
        }
        return (false);
    };
    DrapoSectorContainerHandler.prototype.GetElementRoot = function (el) {
        if (el == null)
            return (null);
        while (el.parentElement !== null) {
            el = el.parentElement;
            if (el.tagName === 'BODY')
                return (null);
        }
        return (el);
    };
    DrapoSectorContainerHandler.prototype.Switch = function (sector, containerCode) {
        if (containerCode === void 0) { containerCode = null; }
        return __awaiter(this, void 0, void 0, function () {
            var containerCodePrevious, i, activeSectorContainer, containerPrevious, el, loaded, i, container;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        containerCodePrevious = null;
                        for (i = 0; i < this._activeSectorContainers.length; i++) {
                            activeSectorContainer = this._activeSectorContainers[i];
                            if (activeSectorContainer[0] !== sector)
                                continue;
                            containerCodePrevious = activeSectorContainer[1];
                            if (containerCode !== this.CONTAINER_EQUAL)
                                this._activeSectorContainers.splice(i, 1);
                            break;
                        }
                        if ((containerCodePrevious !== null) && (containerCode !== this.CONTAINER_EQUAL)) {
                            containerPrevious = this.CreateContainer(sector, containerCodePrevious);
                            this._containers.push(containerPrevious);
                        }
                        return [4, this.UnloadSector(sector)];
                    case 1:
                        _a.sent();
                        if (containerCode === this.CONTAINER_EQUAL) {
                            el = this.Application.Document.GetSectorElementInner(sector);
                            if ((el !== null) && (el.parentElement !== null))
                                el.parentElement.removeChild(el);
                        }
                        if ((containerCode === null) || (containerCode === this.CONTAINER_EQUAL)) {
                            return [2, (false)];
                        }
                        loaded = false;
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < this._containers.length)) return [3, 5];
                        container = this._containers[i];
                        if ((container.Sector !== sector) || (container.ContainerCode !== containerCode))
                            return [3, 4];
                        this._containers.splice(i, 1);
                        return [4, this.LoadContainer(container)];
                    case 3:
                        _a.sent();
                        loaded = true;
                        return [3, 5];
                    case 4:
                        i++;
                        return [3, 2];
                    case 5:
                        this._activeSectorContainers.push([sector, containerCode]);
                        return [2, (loaded)];
                }
            });
        });
    };
    DrapoSectorContainerHandler.prototype.CreateContainer = function (sector, containerCode) {
        var el = this.Application.Document.GetSectorElementInner(sector);
        var canDetachElement = this.Application.Document.CanDetachElement(el);
        var sectorChildren = this.Application.Document.GetSectorAndChildren(sector);
        var storageItems = [];
        var sectorHierarchys = [];
        var sectorFriends = [];
        var componentSectors = [];
        var componentTags = [];
        var componentElements = [];
        var componentInstances = [];
        for (var i = 0; i < sectorChildren.length; i++) {
            var sectorCurrent = sectorChildren[i];
            this.Application.Storage.AppendCacheDataItemBySector(storageItems, sectorCurrent);
            this.Application.Document.AppendSectorHierarchyBySector(sectorHierarchys, sectorCurrent);
            this.Application.Document.AppendSectorFriendsBySector(sectorFriends, sectorCurrent);
            this.Application.ComponentHandler.AppendInstances(sectorCurrent, componentSectors, componentTags, componentElements, componentInstances);
        }
        return (new DrapoSectorContainerItem(sector, containerCode, storageItems, sectorHierarchys, sectorFriends, componentSectors, componentTags, componentElements, componentInstances, el, canDetachElement));
    };
    DrapoSectorContainerHandler.prototype.LoadContainer = function (container) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorChildren, i, sectorCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Document.SetSectorElementInner(container.Sector, container.Element, container.CanDetachElement);
                        return [4, this.Application.Storage.AddCacheDataItems(container.StorageItems)];
                    case 1:
                        _a.sent();
                        this.Application.Document.AddSectorHierarchys(container.SectorHierarchys);
                        this.Application.Document.AddSectorFriendsRange(container.SectorFriends);
                        return [4, this.Application.ComponentHandler.AddInstances(container)];
                    case 2:
                        _a.sent();
                        sectorChildren = this.Application.Document.GetSectorAndChildren(container.Sector);
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < sectorChildren.length)) return [3, 6];
                        sectorCurrent = sectorChildren[i];
                        return [4, this.Application.Storage.FireEventOnAfterContainerLoad(sectorCurrent)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        i++;
                        return [3, 3];
                    case 6: return [2];
                }
            });
        });
    };
    DrapoSectorContainerHandler.prototype.UnloadSector = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var sectorChildren, i, sectorCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sectorChildren = this.Application.Document.GetSectorAndChildren(sector);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < sectorChildren.length)) return [3, 5];
                        sectorCurrent = sectorChildren[i];
                        return [4, this.Application.Storage.FireEventOnBeforeContainerUnload(sectorCurrent)];
                    case 2:
                        _a.sent();
                        this.Application.Validator.UnloadSector(sectorCurrent);
                        this.Application.ComponentHandler.UnloadComponentInstances(sectorCurrent);
                        return [4, this.Application.Storage.RemoveBySector(sectorCurrent)];
                    case 3:
                        _a.sent();
                        this.RemoveMustacheContextCache(sectorCurrent);
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 1];
                    case 5:
                        this.Application.Document.CleanSectorMetadata(sector);
                        this.Application.Document.SetSectorElementInner(sector, null, null);
                        return [2];
                }
            });
        });
    };
    DrapoSectorContainerHandler.prototype.RemoveByContainer = function (containerCode) {
        for (var i = this._activeSectorContainers.length - 1; i >= 0; i--) {
            var sectorContainer = this._activeSectorContainers[i];
            if (sectorContainer[1] !== containerCode)
                continue;
            var el = this.Application.Document.GetSectorElementInner(sectorContainer[0]);
            if ((el !== null) && (el.parentElement !== null))
                el.parentElement.removeChild(el);
            this._activeSectorContainers.splice(i, 1);
            break;
        }
        var removed = false;
        for (var i = this._containers.length - 1; i >= 0; i--) {
            var container = this._containers[i];
            if (container.ContainerCode !== containerCode)
                continue;
            if (container.Element != null && container.Element.parentElement != null)
                container.Element.parentElement.removeChild(container.Element);
            this._containers.splice(i, 1);
            removed = true;
            break;
        }
        return (removed);
    };
    DrapoSectorContainerHandler.prototype.RemoveBySector = function (sector) {
        for (var i = this._activeSectorContainers.length - 1; i >= 0; i--) {
            var sectorContainer = this._activeSectorContainers[i];
            if (sectorContainer[0] !== sector)
                continue;
            this._activeSectorContainers.splice(i, 1);
            break;
        }
        var removed = false;
        for (var i = this._containers.length - 1; i >= 0; i--) {
            var container = this._containers[i];
            if (container.Sector !== sector)
                continue;
            if ((!container.CanDetachElement) && (container.Element.parentElement != null))
                container.Element.parentElement.removeChild(container.Element);
            this._containers.splice(i, 1);
            removed = true;
        }
        return (removed);
    };
    DrapoSectorContainerHandler.prototype.GetStorageItem = function (sector, containerCode, dataKey) {
        for (var i = this._containers.length - 1; i >= 0; i--) {
            var container = this._containers[i];
            if ((container.Sector !== sector) || (container.ContainerCode !== containerCode))
                continue;
            for (var j = 0; j < container.StorageItems.length; j++) {
                var storageItem = container.StorageItems[j];
                if (storageItem.DataKey !== dataKey)
                    continue;
                if (storageItem.Sector !== sector)
                    continue;
                return (storageItem);
            }
            break;
        }
        return (null);
    };
    DrapoSectorContainerHandler.prototype.ReloadStorageItemByPipe = function (dataPipe) {
    };
    DrapoSectorContainerHandler.prototype.HasMustacheContextCache = function (sector, expression) {
        var indexSector = this.GetMustacheContextIndex(sector);
        if (indexSector === null)
            return (null);
        var indexExpression = this.GetMustacheContextExpressionIndex(indexSector, expression);
        if (indexExpression === null)
            return (null);
        return (this._sectorContextsValues[indexSector][indexExpression]);
    };
    DrapoSectorContainerHandler.prototype.RemoveMustacheContextCache = function (sector) {
        var indexSector = this.GetMustacheContextIndex(sector);
        if (indexSector === null)
            return;
        this._sectorContexts.splice(indexSector, 1);
        this._sectorContextsExpressions.splice(indexSector, 1);
        this._sectorContextsValues.splice(indexSector, 1);
    };
    DrapoSectorContainerHandler.prototype.AddMustacheContextCache = function (sector, expression, value) {
        var indexSector = this.GetMustacheContextIndex(sector);
        if (indexSector === null) {
            indexSector = this._sectorContexts.push(sector) - 1;
            this._sectorContextsExpressions.push([]);
            this._sectorContextsValues.push([]);
        }
        this._sectorContextsExpressions[indexSector].push(expression);
        this._sectorContextsValues[indexSector].push(value);
    };
    DrapoSectorContainerHandler.prototype.GetMustacheContextIndex = function (sector) {
        for (var i = 0; i < this._sectorContexts.length; i++)
            if (this._sectorContexts[i] === sector)
                return (i);
        return (null);
    };
    DrapoSectorContainerHandler.prototype.GetMustacheContextExpressionIndex = function (indexSector, expression) {
        var expressions = this._sectorContextsExpressions[indexSector];
        for (var i = 0; i < expressions.length; i++)
            if (expressions[i] === expression)
                return (i);
        return (null);
    };
    return DrapoSectorContainerHandler;
}());

"use strict";
var DrapoSectorContainerItem = (function () {
    function DrapoSectorContainerItem(sector, containerCode, storageItems, sectorHierarchys, sectorFriends, componentSectors, componentTags, componentElements, componentInstances, element, canDetachElement) {
        this._sector = null;
        this._containerCode = null;
        this._storageItems = [];
        this._sectorHierarchys = [];
        this._sectorFriends = [];
        this._componentSectors = [];
        this._componentTags = [];
        this._componentElements = [];
        this._componentInstances = [];
        this._element = null;
        this._canDetachElement = true;
        this._sector = sector;
        this._containerCode = containerCode;
        this._storageItems = storageItems;
        this._sectorHierarchys = sectorHierarchys;
        this._sectorFriends = sectorFriends;
        this._componentSectors = componentSectors;
        this._componentTags = componentTags;
        this._componentElements = componentElements;
        this._componentInstances = componentInstances;
        this._element = element;
        this._canDetachElement = canDetachElement;
    }
    Object.defineProperty(DrapoSectorContainerItem.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "ContainerCode", {
        get: function () {
            return (this._containerCode);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "StorageItems", {
        get: function () {
            return (this._storageItems);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "SectorHierarchys", {
        get: function () {
            return this._sectorHierarchys;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "SectorFriends", {
        get: function () {
            return this._sectorFriends;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "ComponentSectors", {
        get: function () {
            return (this._componentSectors);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "ComponentTags", {
        get: function () {
            return (this._componentTags);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "ComponentElements", {
        get: function () {
            return (this._componentElements);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "ComponentInstances", {
        get: function () {
            return (this._componentInstances);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "Element", {
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoSectorContainerItem.prototype, "CanDetachElement", {
        get: function () {
            return this._canDetachElement;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoSectorContainerItem;
}());

"use strict";
var DrapoSerializer = (function () {
    function DrapoSerializer(application) {
        this.JSON_START = '{';
        this.JSON_END = '}';
        this.JSON_ARRAY_START = '[';
        this.JSON_ARRAY_END = ']';
        this._application = application;
    }
    Object.defineProperty(DrapoSerializer.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoSerializer.prototype.IsJson = function (data) {
        return ((this.IsJsonInstance(data)) || (this.IsJsonArray(data)));
    };
    DrapoSerializer.prototype.IsJsonInstance = function (data) {
        if (data === null)
            return (false);
        if (data.length < 2)
            return (false);
        return ((data.substr != null) && (data.substr(0, 1) == this.JSON_START) && (data.substr(data.length - 1, 1) == this.JSON_END));
    };
    DrapoSerializer.prototype.IsJsonArray = function (data) {
        if (data === null)
            return (false);
        if (data.length < 2)
            return (false);
        return ((data.substr != null) && (data.substr(0, 1) == this.JSON_ARRAY_START) && (data.substr(data.length - 1, 1) == this.JSON_ARRAY_END));
    };
    DrapoSerializer.prototype.Deserialize = function (data) {
        if (!this.IsJson(data))
            return (data);
        return (JSON.parse(data));
    };
    DrapoSerializer.prototype.Serialize = function (data) {
        if (data == null)
            return (null);
        return (JSON.stringify(data));
    };
    DrapoSerializer.prototype.SerializeObject = function (data) {
        if (typeof data === "string")
            return (data);
        return (this.Serialize(data));
    };
    DrapoSerializer.prototype.EncodeHeaderFieldValue = function (data) {
        if (data == null)
            return (null);
        return (data.replace(/(\r\n\t|\n|\r\t)/gm, ""));
    };
    DrapoSerializer.prototype.EnsureASCII = function (data) {
        if (this.HasUnicode(data))
            return (this.ConvertToASCII(data));
        return (data);
    };
    DrapoSerializer.prototype.HasUnicode = function (data) {
        for (var i = 0; i < data.length; i++) {
            var char = data[i];
            var index = char.charCodeAt(0);
            if (index > 127)
                return (true);
        }
        return (false);
    };
    DrapoSerializer.prototype.ConvertToASCII = function (data) {
        var encoded = '';
        for (var i = 0; i < data.length; i++) {
            var char = data[i];
            var index = char.charCodeAt(0);
            encoded += '\\u' + index.toString(16).toUpperCase();
        }
        return (encoded);
    };
    DrapoSerializer.prototype.EnsureUrlDecoded = function (value) {
        if ((value == null) || (value == '') || (value.indexOf == null))
            return (value);
        var hasPercentage = value.indexOf('%') >= 0;
        if (!hasPercentage)
            return (value);
        return (decodeURIComponent(value));
    };
    return DrapoSerializer;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoServer = (function () {
    function DrapoServer(application) {
        this._token = null;
        this._tokenAntiforgery = null;
        this._requestHeaders = [];
        this._requestHeadersNext = [];
        this._hasBadRequest = false;
        this._headerContainerIdKey = null;
        this._headerContainerIdValue = null;
        this._isInsideTimestamp = false;
        this._application = application;
        this.InitializeServer();
    }
    Object.defineProperty(DrapoServer.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServer.prototype, "HasBadRequest", {
        get: function () {
            return (this._hasBadRequest);
        },
        set: function (value) {
            this._hasBadRequest = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoServer.prototype.InitializeServer = function () {
        var scripts = document.getElementsByTagName('script');
        for (var i = 0; i < scripts.length; i++) {
            var script = scripts[i];
            var source = script.src;
            var index = source.indexOf('/drapo.js');
            if ((index == null) || (index < 0))
                continue;
            this._url = source.substr(0, index);
            return;
        }
        this._url = '';
    };
    DrapoServer.prototype.ResolveUrl = function (url) {
        if (url.substr(0, 1) == '~')
            return (this._url + url.substr(1));
        return (url);
    };
    DrapoServer.prototype.AppendUrlQueryStringCacheStatic = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var useCacheStatic, applicationBuild;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetUseCacheStatic()];
                    case 1:
                        useCacheStatic = _a.sent();
                        if (!useCacheStatic)
                            return [2, ('')];
                        return [4, this.Application.Config.GetApplicationBuild()];
                    case 2:
                        applicationBuild = _a.sent();
                        if (applicationBuild == '')
                            return [2, ('')];
                        if (url.indexOf('ab=') >= 0)
                            return [2, ('')];
                        return [2, ((url.indexOf('?') >= 0 ? '&' : '?') + 'ab=' + applicationBuild)];
                }
            });
        });
    };
    DrapoServer.prototype.AppendUrlQueryStringTimestamp = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var timestamp, timestampConfig, timestampMustache, timestampMustacheTimestamp, timestampResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        timestamp = new Date().getTime();
                        return [4, this.Application.Config.GetTimestamp()];
                    case 1:
                        timestampConfig = _a.sent();
                        timestampMustache = ((timestampConfig == null) || (timestampConfig == '') || (this._isInsideTimestamp)) ? '{{ts}}' : timestampConfig;
                        timestampMustacheTimestamp = timestampMustache.replace('{{ts}}', timestamp.toString());
                        this._isInsideTimestamp = true;
                        return [4, this.Application.Storage.ResolveMustachesRecursive(null, timestampMustacheTimestamp)];
                    case 2:
                        timestampResolved = _a.sent();
                        this._isInsideTimestamp = false;
                        return [2, (url + (url.indexOf('?') >= 0 ? '&' : '?') + 'ts=' + timestampResolved)];
                }
            });
        });
    };
    DrapoServer.prototype.GetViewHTML = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var htmlCached, response, html, allowCache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        htmlCached = this.Application.CacheHandler.GetCachedView(url);
                        if (htmlCached != null)
                            return [2, (htmlCached)];
                        return [4, this.Application.Server.GetHTML(url)];
                    case 1:
                        response = _a.sent();
                        if (response == null)
                            return [2, (null)];
                        html = response[0];
                        allowCache = response[1];
                        if (allowCache)
                            this.Application.CacheHandler.SetCachedView(url, html);
                        return [2, (html)];
                }
            });
        });
    };
    DrapoServer.prototype.GetHTML = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var requestHeaders, urlResolved, _a, request, response, responseText, responseStatus;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        requestHeaders = [];
                        this.InsertHeader(requestHeaders, 'X-Requested-With', 'XMLHttpRequest');
                        if (this._headerContainerIdValue !== null)
                            requestHeaders.push([this._headerContainerIdKey, this._headerContainerIdValue]);
                        urlResolved = this.ResolveUrl(url);
                        _a = urlResolved;
                        return [4, this.AppendUrlQueryStringCacheStatic(url)];
                    case 1:
                        urlResolved = _a + _b.sent();
                        request = new DrapoServerRequest('GET', urlResolved, requestHeaders, null, true);
                        return [4, this.Request(request)];
                    case 2:
                        response = _b.sent();
                        responseText = response.Body;
                        responseStatus = response.Status;
                        if (responseStatus == 200) {
                            return [2, ([responseText, response.IsCacheAllowed()])];
                        }
                        return [2, (null)];
                }
            });
        });
    };
    DrapoServer.prototype.GetJSON = function (url, verb, data, contentType, dataKey, headers, headersResponse) {
        if (verb === void 0) { verb = "GET"; }
        if (data === void 0) { data = null; }
        if (contentType === void 0) { contentType = null; }
        if (dataKey === void 0) { dataKey = null; }
        if (headers === void 0) { headers = null; }
        if (headersResponse === void 0) { headersResponse = null; }
        return __awaiter(this, void 0, void 0, function () {
            var requestHeaders, _a, _b, urlResolved, urlResolvedTimestamp, cookieValues, request, response, location_1, dataResponse, onBadRequest, storageBadRequest, dataResponse, onError, storageErrors, error;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        requestHeaders = [];
                        this.InsertHeaders(requestHeaders, this.GetRequestHeaders());
                        this.InsertHeaders(requestHeaders, headers);
                        if (contentType != null)
                            this.InsertHeader(requestHeaders, 'Content-Type', contentType);
                        this.InsertHeader(requestHeaders, 'X-Requested-With', 'XMLHttpRequest');
                        this.InsertHeader(requestHeaders, 'Cache-Control', 'no-cache, no-store, must-revalidate');
                        if (this._headerContainerIdValue !== null)
                            requestHeaders.push([this._headerContainerIdKey, this._headerContainerIdValue]);
                        if (!(this._tokenAntiforgery != null)) return [3, 2];
                        _a = this.InsertHeader;
                        _b = [requestHeaders];
                        return [4, this.Application.Config.GetHeaderCSRF()];
                    case 1:
                        _a.apply(this, _b.concat([_c.sent(), this._tokenAntiforgery]));
                        _c.label = 2;
                    case 2:
                        urlResolved = this.ResolveUrl(url);
                        return [4, this.AppendUrlQueryStringTimestamp(urlResolved)];
                    case 3:
                        urlResolvedTimestamp = _c.sent();
                        cookieValues = this.Application.CookieHandler.GetCookieValues();
                        request = new DrapoServerRequest(verb, urlResolvedTimestamp, requestHeaders, data, true);
                        return [4, this.Request(request)];
                    case 4:
                        response = _c.sent();
                        if (!((200 <= response.Status) && (response.Status < 400))) return [3, 6];
                        location_1 = this.GetHeaderValue(response.Headers, 'Location');
                        if (!(location_1 !== null)) return [3, 6];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, 'RedirectPage(' + location_1 + ')', this.Application.FunctionHandler.CreateExecutionContext(false))];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6:
                        if (!(response.Status == 200)) return [3, 8];
                        return [4, this.Application.CookieHandler.HandleCookieValuesChanges(cookieValues)];
                    case 7:
                        _c.sent();
                        if (response.Body == '')
                            return [2, (null)];
                        if (headersResponse !== null) {
                            this.InsertHeaders(headersResponse, response.Headers);
                            return [2, response.Body];
                        }
                        dataResponse = void 0;
                        dataResponse = this.Application.Serializer.Deserialize(response.Body);
                        return [2, (dataResponse)];
                    case 8:
                        if (!(response.Status == 204)) return [3, 9];
                        return [2, (null)];
                    case 9:
                        if (!(response.Status == 400)) return [3, 16];
                        this.HasBadRequest = true;
                        return [4, this.Application.Config.GetOnBadRequest()];
                    case 10:
                        onBadRequest = _c.sent();
                        if (!(onBadRequest !== null)) return [3, 15];
                        return [4, this.Application.Config.GetStorageBadRequest()];
                    case 11:
                        storageBadRequest = _c.sent();
                        if (!(storageBadRequest !== null)) return [3, 13];
                        dataResponse = this.Application.Serializer.Deserialize(response.Body);
                        return [4, this.Application.Storage.UpdateData(storageBadRequest, null, dataResponse)];
                    case 12:
                        _c.sent();
                        _c.label = 13;
                    case 13: return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, onBadRequest, this.Application.FunctionHandler.CreateExecutionContext(false))];
                    case 14:
                        _c.sent();
                        return [2, ([])];
                    case 15: return [2, ([])];
                    case 16:
                        if (!(response.Status == 401)) return [3, 19];
                        if (!(dataKey !== null)) return [3, 18];
                        return [4, this.Application.Document.RequestAuthorization(dataKey, 'notify')];
                    case 17:
                        _c.sent();
                        _c.label = 18;
                    case 18: return [3, 26];
                    case 19:
                        if (!(response.Status == 500)) return [3, 26];
                        this.HasBadRequest = true;
                        return [4, this.Application.Config.GetOnError()];
                    case 20:
                        onError = _c.sent();
                        if (!(onError !== null)) return [3, 25];
                        return [4, this.Application.Config.GetStorageErrors()];
                    case 21:
                        storageErrors = _c.sent();
                        if (!(storageErrors !== null)) return [3, 23];
                        error = this.Application.Serializer.IsJson(response.Body) ? this.Application.Serializer.Deserialize(response.Body) : response.Body;
                        return [4, this.Application.Storage.AddDataItem(storageErrors, null, null, this.Application.Storage.CreateErrorForStorage('DataRequest', 'Error requesting data for :' + url, error))];
                    case 22:
                        _c.sent();
                        _c.label = 23;
                    case 23: return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, onError, this.Application.FunctionHandler.CreateExecutionContext(false))];
                    case 24:
                        _c.sent();
                        return [2, ([])];
                    case 25: return [2, ([])];
                    case 26: return [2, ([])];
                }
            });
        });
    };
    DrapoServer.prototype.GetFile = function (url, verb, data, contentType, dataKey, headers, headersResponse) {
        if (contentType === void 0) { contentType = null; }
        if (dataKey === void 0) { dataKey = null; }
        if (headers === void 0) { headers = null; }
        if (headersResponse === void 0) { headersResponse = null; }
        return __awaiter(this, void 0, void 0, function () {
            var requestHeaders, _a, _b, urlResolved, urlResolvedTimestamp, request, response, location_2, dataResponse, onBadRequest, storageBadRequest, dataResponse, onError, storageErrors, error;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        requestHeaders = [];
                        this.InsertHeaders(requestHeaders, this.GetRequestHeaders());
                        this.InsertHeaders(requestHeaders, headers);
                        this.InsertHeader(requestHeaders, 'X-Requested-With', 'XMLHttpRequest');
                        this.InsertHeader(requestHeaders, 'Cache-Control', 'no-cache, no-store, must-revalidate');
                        if (this._headerContainerIdValue !== null)
                            requestHeaders.push([this._headerContainerIdKey, this._headerContainerIdValue]);
                        if (contentType != null)
                            this.InsertHeader(requestHeaders, 'Content-Type', contentType);
                        if (!(this._tokenAntiforgery != null)) return [3, 2];
                        _a = this.InsertHeader;
                        _b = [requestHeaders];
                        return [4, this.Application.Config.GetHeaderCSRF()];
                    case 1:
                        _a.apply(this, _b.concat([_c.sent(), this._tokenAntiforgery]));
                        _c.label = 2;
                    case 2:
                        urlResolved = this.ResolveUrl(url);
                        return [4, this.AppendUrlQueryStringTimestamp(urlResolved)];
                    case 3:
                        urlResolvedTimestamp = _c.sent();
                        request = new DrapoServerRequest(verb, urlResolvedTimestamp, requestHeaders, data, true, true);
                        return [4, this.Request(request)];
                    case 4:
                        response = _c.sent();
                        if (!((200 <= response.Status) && (response.Status < 400))) return [3, 6];
                        location_2 = this.GetHeaderValue(response.Headers, 'Location');
                        if (!(location_2 !== null)) return [3, 6];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, 'RedirectPage(' + location_2 + ')', this.Application.FunctionHandler.CreateExecutionContext(false))];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6:
                        if (!(response.Status == 200)) return [3, 7];
                        if (response.Body == '')
                            return [2, (null)];
                        if (headersResponse !== null) {
                            this.InsertHeaders(headersResponse, response.Headers);
                            return [2, (this.CreateFileObject(headersResponse, response.Body))];
                        }
                        dataResponse = void 0;
                        dataResponse = this.Application.Serializer.Deserialize(response.Body);
                        return [2, (dataResponse)];
                    case 7:
                        if (!(response.Status == 204)) return [3, 8];
                        return [2, (null)];
                    case 8:
                        if (!(response.Status == 400)) return [3, 15];
                        this.HasBadRequest = true;
                        return [4, this.Application.Config.GetOnBadRequest()];
                    case 9:
                        onBadRequest = _c.sent();
                        if (!(onBadRequest !== null)) return [3, 14];
                        return [4, this.Application.Config.GetStorageBadRequest()];
                    case 10:
                        storageBadRequest = _c.sent();
                        if (!(storageBadRequest !== null)) return [3, 12];
                        dataResponse = this.Application.Serializer.Deserialize(response.Body);
                        return [4, this.Application.Storage.UpdateData(storageBadRequest, null, dataResponse)];
                    case 11:
                        _c.sent();
                        _c.label = 12;
                    case 12: return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, onBadRequest, this.Application.FunctionHandler.CreateExecutionContext(false))];
                    case 13:
                        _c.sent();
                        return [2, ([])];
                    case 14: return [2, ([])];
                    case 15:
                        if (!(response.Status == 401)) return [3, 18];
                        if (!(dataKey !== null)) return [3, 17];
                        return [4, this.Application.Document.RequestAuthorization(dataKey, 'notify')];
                    case 16:
                        _c.sent();
                        _c.label = 17;
                    case 17: return [3, 25];
                    case 18:
                        if (!(response.Status == 500)) return [3, 25];
                        this.HasBadRequest = true;
                        return [4, this.Application.Config.GetOnError()];
                    case 19:
                        onError = _c.sent();
                        if (!(onError !== null)) return [3, 24];
                        return [4, this.Application.Config.GetStorageErrors()];
                    case 20:
                        storageErrors = _c.sent();
                        if (!(storageErrors !== null)) return [3, 22];
                        error = this.Application.Serializer.IsJson(response.Body) ? this.Application.Serializer.Deserialize(response.Body) : response.Body;
                        return [4, this.Application.Storage.AddDataItem(storageErrors, null, null, this.Application.Storage.CreateErrorForStorage('DataRequest', 'Error requesting data for :' + url, error))];
                    case 21:
                        _c.sent();
                        _c.label = 22;
                    case 22: return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(null, null, onError, this.Application.FunctionHandler.CreateExecutionContext(false))];
                    case 23:
                        _c.sent();
                        return [2, ([])];
                    case 24: return [2, ([])];
                    case 25: return [2, ([])];
                }
            });
        });
    };
    DrapoServer.prototype.CreateFileObject = function (headers, body) {
        var object = {};
        object.body = body;
        object.length = body.size;
        for (var i = 0; i < headers.length; i++) {
            var header = headers[i];
            var key = header[0].toLowerCase();
            var keyClean = key.replace('-', '');
            var value = header[1];
            object[keyClean] = value;
            if (keyClean !== 'contentdisposition')
                continue;
            var contentDispositionValues = value.split(';');
            for (var j = 0; j < contentDispositionValues.length; j++) {
                var contentDispositionValue = contentDispositionValues[j];
                var contentDispositionValueClean = contentDispositionValue[0] === ' ' ? contentDispositionValue.substring(1) : contentDispositionValue;
                var index = contentDispositionValueClean.indexOf('=');
                if (index < 0)
                    continue;
                var contentDispositionValueCleanKey = contentDispositionValueClean.substring(0, index);
                if (contentDispositionValueCleanKey === 'filename') {
                    var contentDispositionKeyValue = contentDispositionValueClean.substring(index + 1);
                    if ((contentDispositionKeyValue.length > 2) && (contentDispositionKeyValue[0] === '"') && (contentDispositionKeyValue[contentDispositionKeyValue.length - 1] === '"'))
                        contentDispositionKeyValue = contentDispositionKeyValue.substring(1, contentDispositionKeyValue.length - 1);
                    if ((contentDispositionKeyValue.length > 2) && (contentDispositionKeyValue[0] === "'") && (contentDispositionKeyValue[contentDispositionKeyValue.length - 1] === "'"))
                        contentDispositionKeyValue = contentDispositionKeyValue.substring(1, contentDispositionKeyValue.length - 1);
                    object.filename = contentDispositionKeyValue;
                }
                if (contentDispositionValueCleanKey === 'filename*') {
                    var contentDispositionKeyValue = contentDispositionValueClean.substring(index + 1);
                    if (contentDispositionKeyValue.indexOf('UTF-8\'\'') === 0)
                        contentDispositionKeyValue = contentDispositionKeyValue.substring('UTF-8\'\''.length, contentDispositionKeyValue.length);
                    if ((contentDispositionKeyValue.length > 2) && (contentDispositionKeyValue[0] === '"') && (contentDispositionKeyValue[contentDispositionKeyValue.length - 1] === '"'))
                        contentDispositionKeyValue = contentDispositionKeyValue.substring(1, contentDispositionKeyValue.length - 1);
                    if ((contentDispositionKeyValue.length > 2) && (contentDispositionKeyValue[0] === "'") && (contentDispositionKeyValue[contentDispositionKeyValue.length - 1] === "'"))
                        contentDispositionKeyValue = contentDispositionKeyValue.substring(1, contentDispositionKeyValue.length - 1);
                    object.filename = decodeURI(contentDispositionKeyValue);
                    break;
                }
            }
        }
        return (object);
    };
    DrapoServer.prototype.ConvertFileBody = function (body) {
        if ((body.length > 2) && (body[0] === '"') && (body[body.length - 1] === '"'))
            return (body.substring(1, body.length - 1));
        if ((body.length > 2) && (body[0] === "'") && (body[body.length - 1] === "'"))
            return (body.substring(1, body.length - 1));
        return (btoa(body));
    };
    DrapoServer.prototype.Request = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var requestDebbuger, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Debugger.CreateRequest(request.Url)];
                    case 1:
                        requestDebbuger = _a.sent();
                        return [4, this.RequestInternal(request)];
                    case 2:
                        response = _a.sent();
                        return [4, this.SetContainerId(response)];
                    case 3:
                        _a.sent();
                        return [4, this.Application.Debugger.FinishRequest(requestDebbuger)];
                    case 4:
                        _a.sent();
                        return [2, (response)];
                }
            });
        });
    };
    DrapoServer.prototype.RequestInternal = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var application;
            return __generator(this, function (_a) {
                application = this.Application;
                return [2, new Promise(function (resolve, reject) {
                        var xhr = new XMLHttpRequest();
                        xhr.withCredentials = true;
                        xhr.onload = function () {
                            resolve(application.Server.CreateResponse(request, xhr));
                        };
                        xhr.open(request.Verb, request.Url, true);
                        if (request.Headers != null) {
                            for (var i = 0; i < request.Headers.length; i++) {
                                var header = request.Headers[i];
                                xhr.setRequestHeader(header[0], application.Serializer.EnsureASCII(header[1]));
                            }
                        }
                        if (request.Binary)
                            xhr.responseType = 'blob';
                        xhr.send(request.Body);
                    })];
            });
        });
    };
    DrapoServer.prototype.CreateResponse = function (request, xhr) {
        var headers = [];
        if (request.ExtractHeaders)
            this.ExtractHeaders(xhr, headers);
        var body = null;
        if (request.Binary)
            body = xhr.response;
        else
            body = xhr.responseText;
        return (new DrapoServerResponse(xhr.status, headers, body));
    };
    DrapoServer.prototype.ExtractHeaders = function (xhr, headers) {
        var responseHeaders = xhr.getAllResponseHeaders();
        var lines = this.Application.Parser.ParseLines(responseHeaders);
        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            var header = this.Application.Parser.ParseHeader(line);
            if (header != null)
                headers.push(header);
        }
    };
    DrapoServer.prototype.InsertHeaders = function (headers, headersInsert) {
        if (headersInsert == null)
            return;
        for (var i = 0; i < headersInsert.length; i++) {
            var header = headersInsert[i];
            this.InsertHeader(headers, header[0], header[1]);
        }
    };
    DrapoServer.prototype.InsertHeader = function (headers, name, value) {
        headers.push([name, value]);
    };
    DrapoServer.prototype.GetHeaderValue = function (headers, name) {
        for (var i = 0; i < headers.length; i++) {
            var header = headers[i];
            if (header[0].toLowerCase() === name.toLowerCase())
                return (header[1]);
        }
        return (null);
    };
    DrapoServer.prototype.SetToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._token === token)
                            return [2, (false)];
                        this._token = token;
                        if (!(this._token === null)) return [3, 2];
                        return [4, this.Application.Storage.ClearDataToken()];
                    case 1:
                        _a.sent();
                        return [3, 4];
                    case 2: return [4, this.Application.Observer.NotifyAuthorization()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, (true)];
                }
            });
        });
    };
    DrapoServer.prototype.HasToken = function () {
        return (this._token != null);
    };
    DrapoServer.prototype.SetTokenAntiforgery = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var headerCSRF;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._tokenAntiforgery === token)
                            return [2, (false)];
                        return [4, this.Application.Config.GetHeaderCSRF()];
                    case 1:
                        headerCSRF = _a.sent();
                        if ((headerCSRF == null) || (headerCSRF == ''))
                            return [2];
                        this._tokenAntiforgery = token;
                        return [2, (true)];
                }
            });
        });
    };
    DrapoServer.prototype.GetRequestHeaders = function () {
        if (this._requestHeadersNext.length === 0)
            return (this._requestHeaders);
        var headers = [];
        this.AddHeader(headers, this._requestHeaders);
        this.AddHeader(headers, this._requestHeadersNext);
        this._requestHeadersNext = [];
        return (headers);
    };
    DrapoServer.prototype.AddHeader = function (headers, headersInsert) {
        for (var i = 0; i < headersInsert.length; i++)
            headers.push(headersInsert[i]);
    };
    DrapoServer.prototype.AddRequestHeader = function (key, value) {
        for (var i = this._requestHeaders.length - 1; i >= 0; i--) {
            var requestHeader = this._requestHeaders[i];
            if (requestHeader[0] !== key)
                continue;
            requestHeader[1] = value;
            return;
        }
        this._requestHeaders.push([key, value]);
    };
    DrapoServer.prototype.GetRequestHeader = function (key) {
        for (var i = this._requestHeaders.length - 1; i >= 0; i--) {
            var header = this._requestHeaders[i];
            if (header[0] === key)
                return (header[1]);
        }
        return (null);
    };
    DrapoServer.prototype.AddNextRequestHeader = function (key, value) {
        this._requestHeadersNext.push([key, value]);
    };
    DrapoServer.prototype.EnsureUrlEncoded = function (url) {
        if ((url == null) || (url == ''))
            return (url);
        if (this.IsUrlEncoded(url))
            return (url);
        var urlEncoded = encodeURI(url);
        urlEncoded = urlEncoded.replace(/[+]/g, '%2B');
        urlEncoded = urlEncoded.replace(/[$]/g, '%24');
        urlEncoded = urlEncoded.replace(/[#]/g, '%23');
        urlEncoded = urlEncoded.replace(/[,]/g, '%2C');
        urlEncoded = urlEncoded.replace(/[;]/g, '%3B');
        return (urlEncoded);
    };
    DrapoServer.prototype.EnsureUrlComponentEncoded = function (url) {
        if ((url == null) || (url == ''))
            return (url);
        if (this.IsUrlEncoded(url))
            return (url);
        return (encodeURIComponent(url));
    };
    DrapoServer.prototype.IsUrlEncoded = function (url) {
        if ((url == null) || (url == '') || (url.indexOf == null))
            return (false);
        var hasPercentage = url.indexOf('%') >= 0;
        if (!hasPercentage)
            return (false);
        var hasPercentageEncoded = url.indexOf('%25') >= 0;
        if (hasPercentageEncoded)
            return (true);
        var hasAndEncoded = url.indexOf('%26') >= 0;
        if (hasAndEncoded)
            return (true);
        var hasSpacedEncoded = url.indexOf('%20') >= 0;
        if (hasSpacedEncoded)
            return (true);
        var hasPlusEncoded = url.indexOf('%2B') >= 0;
        if (hasPlusEncoded)
            return (true);
        var hasCedilhaLCase = url.indexOf('%C3%A7') >= 0;
        if (hasCedilhaLCase)
            return (true);
        var hasCedilhaUCase = url.indexOf('%C3%87') >= 0;
        if (hasCedilhaUCase)
            return (true);
        var hasATilLCase = (url.indexOf('%C3%A3') >= 0 || url.indexOf('%C3%B5') >= 0 || url.indexOf('%C3%B1') >= 0);
        if (hasATilLCase)
            return (true);
        var hasATilUCase = (url.indexOf('%C3%83') >= 0 || url.indexOf('%C3%95') >= 0 || url.indexOf('%C3%91') >= 0);
        if (hasATilUCase)
            return (true);
        var hasAcuteAccentUCase = (url.indexOf('%C3%81') >= 0 || url.indexOf('%C3%89') >= 0 || url.indexOf('%C3%8D') >= 0 || url.indexOf('%C3%93') >= 0 || url.indexOf('%C3%9A') >= 0);
        if (hasAcuteAccentUCase)
            return (true);
        var hasAcuteAccentLCase = (url.indexOf('%C3%A1') >= 0 || url.indexOf('%C3%A9') >= 0 || url.indexOf('%C3%AD') >= 0 || url.indexOf('%C3%B3') >= 0 || url.indexOf('%C3%BA') >= 0);
        if (hasAcuteAccentLCase)
            return (true);
        var hasCircumflexAccentUCase = (url.indexOf('%C3%82') >= 0 || url.indexOf('%C3%8A') >= 0 || url.indexOf('%C3%94') >= 0);
        if (hasCircumflexAccentUCase)
            return (true);
        var hasCircumflexAccentLCase = (url.indexOf('%C3%A2') >= 0 || url.indexOf('%C3%AA') >= 0 || url.indexOf('%C3%B4') >= 0);
        if (hasCircumflexAccentLCase)
            return (true);
        return (false);
    };
    DrapoServer.prototype.SetContainerId = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, i, header;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this._headerContainerIdKey == null)) return [3, 2];
                        _a = this;
                        return [4, this.Application.Config.GetHeaderContainerId()];
                    case 1:
                        _a._headerContainerIdKey = _b.sent();
                        _b.label = 2;
                    case 2:
                        if ((this._headerContainerIdKey == null) || (this._headerContainerIdKey == ''))
                            return [2];
                        for (i = 0; i < response.Headers.length; i++) {
                            header = response.Headers[i];
                            if (header[0].toLowerCase() !== this._headerContainerIdKey.toLowerCase())
                                continue;
                            this._headerContainerIdValue = header[1];
                            break;
                        }
                        return [2];
                }
            });
        });
    };
    return DrapoServer;
}());

"use strict";
var DrapoServerRequest = (function () {
    function DrapoServerRequest(verb, url, headers, body, extractHeaders, binary) {
        if (binary === void 0) { binary = false; }
        this._verb = 'GET';
        this._url = null;
        this._headers = [];
        this._body = null;
        this._extractHeaders = false;
        this._binary = false;
        this._verb = verb;
        this._url = url;
        this._headers = headers;
        this._body = body;
        this._extractHeaders = extractHeaders;
        this._binary = binary;
    }
    Object.defineProperty(DrapoServerRequest.prototype, "Verb", {
        get: function () {
            return (this._verb);
        },
        set: function (value) {
            this._verb = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerRequest.prototype, "Url", {
        get: function () {
            return (this._url);
        },
        set: function (value) {
            this._url = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerRequest.prototype, "Headers", {
        get: function () {
            return (this._headers);
        },
        set: function (value) {
            this._headers = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerRequest.prototype, "Body", {
        get: function () {
            return (this._body);
        },
        set: function (value) {
            this._body = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerRequest.prototype, "ExtractHeaders", {
        get: function () {
            return (this._extractHeaders);
        },
        set: function (value) {
            this._extractHeaders = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerRequest.prototype, "Binary", {
        get: function () {
            return (this._binary);
        },
        set: function (value) {
            this._binary = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoServerRequest;
}());

"use strict";
var DrapoServerResponse = (function () {
    function DrapoServerResponse(status, headers, body) {
        this._status = null;
        this._headers = [];
        this._body = null;
        this._cookies = null;
        this._status = status;
        this._headers = headers;
        this._body = body;
    }
    Object.defineProperty(DrapoServerResponse.prototype, "Status", {
        get: function () {
            return (this._status);
        },
        set: function (value) {
            this._status = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerResponse.prototype, "Headers", {
        get: function () {
            return (this._headers);
        },
        set: function (value) {
            this._headers = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoServerResponse.prototype, "Body", {
        get: function () {
            return (this._body);
        },
        set: function (value) {
            this._body = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoServerResponse.prototype.IsCacheAllowed = function () {
        if (this._headers == null)
            return (true);
        for (var i = 0; i < this._headers.length; i++) {
            var entry = this._headers[i];
            var key = entry[0].toLowerCase();
            if (key != 'cache-control')
                continue;
            var value = entry[1].toLowerCase();
            if (value == 'no-store')
                return (false);
            if (value == 'no-cache')
                return (false);
        }
        return (true);
    };
    DrapoServerResponse.prototype.GetCookieValue = function (name) {
        var cookies = this.GetCookies();
        for (var i = 0; i < cookies.length; i++)
            if (cookies[i][0] === name)
                return (cookies[i][1]);
        return (null);
    };
    DrapoServerResponse.prototype.GetCookies = function () {
        if (this._cookies == null)
            this._cookies = this.GetCookiesInternal();
        return (this._cookies);
    };
    DrapoServerResponse.prototype.GetCookiesInternal = function () {
        var cookies = [];
        for (var i = 0; i < this._headers.length; i++) {
            var header = this._headers[i];
            if (header[0].toLowerCase() !== 'set-cookie')
                continue;
            var headerCookies = header[1];
            var cookiesList = headerCookies.split(';');
            for (var j = 0; j < cookiesList.length; j++) {
                var cookie = cookiesList[j];
                var cookieParts = cookie.split('=');
                cookies.push([cookieParts[0], cookieParts[1]]);
            }
        }
        return (cookies);
    };
    return DrapoServerResponse;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoSolver = (function () {
    function DrapoSolver(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoSolver.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoSolver.prototype.ResolveConditional = function (expression, el, sector, context, renderContext, eljForTemplate) {
        if (el === void 0) { el = null; }
        if (sector === void 0) { sector = null; }
        if (context === void 0) { context = null; }
        if (renderContext === void 0) { renderContext = null; }
        if (eljForTemplate === void 0) { eljForTemplate = null; }
        return __awaiter(this, void 0, void 0, function () {
            var block, response, responseBoolean;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof expression === 'boolean')
                            return [2, (expression)];
                        if (typeof expression === 'number')
                            return [2, (expression > 0)];
                        block = this.Application.Parser.ParseExpression(expression);
                        return [4, this.ResolveConditionalExpressionBlock(sector, context, renderContext, el, eljForTemplate, block)];
                    case 1:
                        response = _a.sent();
                        if (!this.Application.Parser.HasMustache(response)) return [3, 3];
                        return [4, this.ResolveConditional(response, el, sector, context, renderContext, eljForTemplate)];
                    case 2: return [2, (_a.sent())];
                    case 3: return [4, this.ResolveConditionalBoolean(response)];
                    case 4:
                        responseBoolean = _a.sent();
                        return [2, (responseBoolean)];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveConditionalExpressionBlock = function (sector, context, renderContext, el, eljForTemplate, block) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.EnsureExpressionItemCurrentLevelResolved(sector, context, renderContext, el, block, eljForTemplate)];
                    case 1:
                        _a.sent();
                        this.JoinTexts(block);
                        return [4, this.ResolveConditionalExpressionBlockOperation(sector, context, renderContext, el, eljForTemplate, block)];
                    case 2: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveConditionalExpressionBlockOperation = function (sector, context, renderContext, el, eljForTemplate, block) {
        return __awaiter(this, void 0, void 0, function () {
            var itemFirst, itemEmpty, resultFirst, itemSecond, resultSecond, resultDenySecond, resultDenyItemSecond, resultThird, hasMoreThanTwoTerms, resultFourth, resultDenyFourth, resultDenyItemFourth, result, resultItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (block.Items.length === 0)
                            return [2, ('')];
                        return [4, this.EnsureExpressionItemResolved(sector, context, renderContext, el, block, 0, eljForTemplate)];
                    case 1:
                        _a.sent();
                        itemFirst = block.Items[0];
                        if (!((itemFirst.Type == DrapoExpressionItemType.Logical) || (itemFirst.Type == DrapoExpressionItemType.Comparator))) return [3, 3];
                        itemEmpty = new DrapoExpressionItem(DrapoExpressionItemType.Text, '');
                        block.Items.unshift(itemEmpty);
                        return [4, this.ResolveConditionalExpressionBlock(sector, context, renderContext, el, eljForTemplate, block)];
                    case 2: return [2, (_a.sent())];
                    case 3:
                        resultFirst = itemFirst.Value;
                        if (block.Items.length < 2)
                            return [2, (resultFirst)];
                        return [4, this.EnsureExpressionItemResolved(sector, context, renderContext, el, block, 1, eljForTemplate)];
                    case 4:
                        _a.sent();
                        itemSecond = block.Items[1];
                        resultSecond = itemSecond.Value;
                        if ((resultSecond === '&&') && (!this.ResolveConditionalBoolean(resultFirst)))
                            return [2, ('false')];
                        if (!(resultFirst === '!')) return [3, 6];
                        resultDenySecond = (!this.ResolveConditionalBoolean(resultSecond)).toString();
                        resultDenyItemSecond = new DrapoExpressionItem(DrapoExpressionItemType.Text, resultDenySecond);
                        block.Items[0] = resultDenyItemSecond;
                        block.Items.splice(1, 1);
                        return [4, this.ResolveConditionalExpressionBlock(sector, context, renderContext, el, eljForTemplate, block)];
                    case 5: return [2, (_a.sent())];
                    case 6:
                        resultThird = '';
                        hasMoreThanTwoTerms = block.Items.length > 2;
                        if (!hasMoreThanTwoTerms) return [3, 8];
                        return [4, this.EnsureExpressionItemResolved(sector, context, renderContext, el, block, 2, eljForTemplate)];
                    case 7:
                        _a.sent();
                        resultThird = block.Items[2].Value;
                        _a.label = 8;
                    case 8:
                        if (!(resultThird === '!')) return [3, 12];
                        resultFourth = 'false';
                        if (!(block.Items.length > 3)) return [3, 10];
                        return [4, this.EnsureExpressionItemResolved(sector, context, renderContext, el, block, 3, eljForTemplate)];
                    case 9:
                        _a.sent();
                        resultFourth = block.Items[3].Value;
                        _a.label = 10;
                    case 10:
                        resultDenyFourth = (!this.ResolveConditionalBoolean(resultFourth)).toString();
                        resultDenyItemFourth = new DrapoExpressionItem(DrapoExpressionItemType.Text, resultDenyFourth);
                        block.Items[2] = resultDenyItemFourth;
                        if (block.Items.length > 3)
                            block.Items.splice(3, 1);
                        return [4, this.ResolveConditionalExpressionBlock(sector, context, renderContext, el, eljForTemplate, block)];
                    case 11: return [2, (_a.sent())];
                    case 12:
                        result = this.ResolveConditionalOperator(resultFirst, resultSecond, resultThird);
                        resultItem = new DrapoExpressionItem(DrapoExpressionItemType.Text);
                        resultItem.Value = result;
                        block.Items[0] = resultItem;
                        block.Items.splice(1, hasMoreThanTwoTerms ? 2 : 1);
                        return [4, this.ResolveConditionalExpressionBlock(sector, context, renderContext, el, eljForTemplate, block)];
                    case 13: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoSolver.prototype.EnsureExpressionItemCurrentLevelResolved = function (sector, context, renderContext, el, block, eljForTemplate) {
        return __awaiter(this, void 0, void 0, function () {
            var i, item, _a, _b, _c, _d, _e, _f, _g, _h;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        i = 0;
                        _j.label = 1;
                    case 1:
                        if (!(i < block.Items.length)) return [3, 6];
                        item = block.Items[i];
                        if (!(item.Type === DrapoExpressionItemType.Function)) return [3, 3];
                        _a = block.Items;
                        _b = i;
                        _c = DrapoExpressionItem.bind;
                        _d = [void 0, DrapoExpressionItemType.Text];
                        return [4, this.Application.FunctionHandler.ReplaceFunctionExpressions(sector, context, item.Value, true)];
                    case 2:
                        _a[_b] = new (_c.apply(DrapoExpressionItem, _d.concat([(_j.sent())])))();
                        return [3, 5];
                    case 3:
                        if (!(item.Type === DrapoExpressionItemType.Mustache)) return [3, 5];
                        _e = block.Items;
                        _f = i;
                        _g = DrapoExpressionItem.bind;
                        _h = [void 0, DrapoExpressionItemType.Text];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, renderContext, null, item.Value, el, sector, true, DrapoStorageLinkType.Render, eljForTemplate != null, eljForTemplate)];
                    case 4:
                        _e[_f] = new (_g.apply(DrapoExpressionItem, _h.concat([(_j.sent())])))();
                        _j.label = 5;
                    case 5:
                        i++;
                        return [3, 1];
                    case 6: return [2];
                }
            });
        });
    };
    DrapoSolver.prototype.JoinTexts = function (block) {
        for (var i = block.Items.length - 1; i > 0; i--) {
            var item = block.Items[i];
            if (item.Type !== DrapoExpressionItemType.Text)
                continue;
            var itemPrevious = block.Items[i - 1];
            if (itemPrevious.Type !== DrapoExpressionItemType.Text)
                continue;
            itemPrevious.Value = itemPrevious.Value + item.Value;
            block.Items.splice(i, 1);
        }
    };
    DrapoSolver.prototype.EnsureExpressionItemResolved = function (sector, context, renderContext, el, block, index, eljForTemplate) {
        return __awaiter(this, void 0, void 0, function () {
            var item, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0:
                        item = block.Items[index];
                        if (!(item.Type === DrapoExpressionItemType.Block)) return [3, 2];
                        _a = block.Items;
                        _b = index;
                        _c = DrapoExpressionItem.bind;
                        _d = [void 0, DrapoExpressionItemType.Text];
                        return [4, this.ResolveConditionalExpressionBlock(sector, context, renderContext, el, eljForTemplate, item)];
                    case 1:
                        _a[_b] = new (_c.apply(DrapoExpressionItem, _d.concat([(_o.sent()).toString()])))();
                        return [3, 6];
                    case 2:
                        if (!(item.Type === DrapoExpressionItemType.Function)) return [3, 4];
                        _e = block.Items;
                        _f = index;
                        _g = DrapoExpressionItem.bind;
                        _h = [void 0, DrapoExpressionItemType.Text];
                        return [4, this.Application.FunctionHandler.ReplaceFunctionExpressions(sector, context, item.Value, true)];
                    case 3:
                        _e[_f] = new (_g.apply(DrapoExpressionItem, _h.concat([(_o.sent())])))();
                        return [3, 6];
                    case 4:
                        if (!(item.Type === DrapoExpressionItemType.Mustache)) return [3, 6];
                        _j = block.Items;
                        _k = index;
                        _l = DrapoExpressionItem.bind;
                        _m = [void 0, DrapoExpressionItemType.Text];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(context, renderContext, null, item.Value, el, sector, true, DrapoStorageLinkType.Render, eljForTemplate != null, eljForTemplate)];
                    case 5:
                        _j[_k] = new (_l.apply(DrapoExpressionItem, _m.concat([(_o.sent())])))();
                        _o.label = 6;
                    case 6: return [2];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveConditionalBlock = function (block) {
        var parts = this.Application.Parser.ParseConditionalLogicalOrComparator(block);
        while (parts.length > 2) {
            var result = this.ResolveConditionalOperator(parts[0], parts[1], parts[2]);
            parts[0] = result;
            parts.splice(1, 2);
        }
        if (parts.length == 0)
            return (false);
        return (this.ResolveConditionalBoolean(parts[0]));
    };
    DrapoSolver.prototype.ResolveConditionalOperator = function (dataLeft, dataOperation, dataRight) {
        if (dataOperation == "||")
            return (((this.ResolveConditionalBoolean(dataLeft)) || (this.ResolveConditionalBoolean(dataRight))).toString());
        if (dataOperation == "&&")
            return (((this.ResolveConditionalBoolean(dataLeft)) && (this.ResolveConditionalBoolean(dataRight))).toString());
        if (dataOperation == "!=")
            return ((dataLeft !== dataRight).toString());
        if (dataOperation == "=")
            return ((dataLeft === dataRight).toString());
        if (dataOperation == "<")
            return ((this.ResolveConditionalOperatorLessThan(dataLeft, dataRight)).toString());
        if (dataOperation == "<=")
            return ((this.ResolveConditionalOperatorLessOrEqualThan(dataLeft, dataRight)).toString());
        if (dataOperation == ">")
            return ((this.ResolveConditionalOperatorGreaterThan(dataLeft, dataRight)).toString());
        if (dataOperation == ">=")
            return ((this.ResolveConditionalOperatorGreaterOrEqualThan(dataLeft, dataRight)).toString());
        if (dataOperation == "LIKE")
            return ((this.ResolveConditionalOperatorLike(dataLeft, dataRight)).toString());
        if (dataOperation == "+")
            return (this.ResolveOperationArithmeticAddition(dataLeft, dataRight));
        if (dataOperation == "-")
            return (this.ResolveOperationArithmeticSubtraction(dataLeft, dataRight));
        if (dataOperation == "*")
            return (this.ResolveOperationArithmeticMultiplication(dataLeft, dataRight));
        if (dataOperation == "/")
            return (this.ResolveOperationArithmeticDivision(dataLeft, dataRight));
        this.Application.ExceptionHandler.HandleError('Drapo: Conditional Operation {0} is not supported', dataOperation);
        return (dataLeft);
    };
    DrapoSolver.prototype.ResolveConditionalBoolean = function (data) {
        if ((data != null) && (typeof data === 'string'))
            data = data.toLowerCase();
        if (data == 'true')
            return (true);
        if (data == 'false')
            return (false);
        if (data == '!false')
            return (true);
        if (data == '!true')
            return (false);
        if (data == '!null')
            return (true);
        if (data == 'null')
            return (false);
        if (data == '!')
            return (true);
        return ((data != null) && (data != '') && ((data.length == 1) || (data[0] !== '!')));
    };
    DrapoSolver.prototype.ResolveConditionalOperatorLessThan = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, null);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, null);
        if ((numberLeft !== null) && (numberRight !== null))
            return (numberLeft < numberRight);
        return (dataLeft < dataRight);
    };
    DrapoSolver.prototype.ResolveConditionalOperatorLessOrEqualThan = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, null);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, null);
        if ((numberLeft !== null) && (numberRight !== null))
            return (numberLeft <= numberRight);
        return (dataLeft <= dataRight);
    };
    DrapoSolver.prototype.ResolveConditionalOperatorGreaterThan = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, null);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, null);
        if ((numberLeft !== null) && (numberRight !== null))
            return (numberLeft > numberRight);
        return (dataLeft > dataRight);
    };
    DrapoSolver.prototype.ResolveConditionalOperatorGreaterOrEqualThan = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, null);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, null);
        if ((numberLeft !== null) && (numberRight !== null))
            return (numberLeft >= numberRight);
        return (dataLeft >= dataRight);
    };
    DrapoSolver.prototype.ResolveConditionalOperatorLike = function (dataLeft, dataRight) {
        if ((dataLeft == null) || (dataLeft == ''))
            return (false);
        if ((dataRight == null) || (dataRight == ''))
            return (false);
        var isAnyLeft = dataRight[0] === '%';
        var isAnyRight = dataRight[dataRight.length - 1] === '%';
        var dataRightClean = ((!isAnyLeft) && (!isAnyRight)) ? dataRight : dataRight.substring((isAnyLeft ? 1 : 0), dataRight.length - (isAnyRight ? 1 : 0));
        var index = dataLeft.toLowerCase().indexOf(dataRightClean.toLowerCase());
        if ((index == null) || (index < 0))
            return (false);
        if ((isAnyLeft) && (isAnyRight))
            return (true);
        if ((isAnyRight) && (index == 0))
            return (true);
        if ((isAnyLeft) && (index == (dataLeft.length - dataRight.length)))
            return (true);
        return (false);
    };
    DrapoSolver.prototype.ResolveOperationArithmeticAddition = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, 0);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, 0);
        var numberResult = numberLeft + numberRight;
        return (numberResult.toString());
    };
    DrapoSolver.prototype.ResolveOperationArithmeticSubtraction = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, 0);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, 0);
        var numberResult = numberLeft - numberRight;
        return (numberResult.toString());
    };
    DrapoSolver.prototype.ResolveOperationArithmeticMultiplication = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, 0);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, 0);
        var numberResult = numberLeft * numberRight;
        return (numberResult.toString());
    };
    DrapoSolver.prototype.ResolveOperationArithmeticDivision = function (dataLeft, dataRight) {
        var numberLeft = this.Application.Parser.ParseNumberBlock(dataLeft, 0);
        var numberRight = this.Application.Parser.ParseNumberBlock(dataRight, 0);
        var numberResult = numberRight != 0 ? numberLeft / numberRight : 0;
        return (numberResult.toString());
    };
    DrapoSolver.prototype.CreateContextItemFromPath = function (sector, dataPath) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, context, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKey = dataPath[0];
                        context = new DrapoContext();
                        return [4, this.Application.Storage.RetrieveData(dataKey, sector)];
                    case 1:
                        data = _a.sent();
                        return [2, (context.Create(data, null, null, dataKey, dataKey, null, null))];
                }
            });
        });
    };
    DrapoSolver.prototype.CreateMustache = function (dataPath) {
        var mustache = '{{';
        for (var i = 0; i < dataPath.length; i++) {
            if (i > 0)
                mustache = mustache + '.';
            mustache = mustache + dataPath[i];
        }
        return (mustache + '}}');
    };
    DrapoSolver.prototype.CreateMustacheContext = function (context, mustacheParts, canResolveKey) {
        if (canResolveKey === void 0) { canResolveKey = true; }
        var mustacheContext = [];
        var updated = false;
        for (var i = 0; i < mustacheParts.length; i++) {
            var mustachePart = mustacheParts[i];
            var mustachePartNext = i < (mustacheParts.length - 1) ? mustacheParts[i + 1] : null;
            var mustacheSystem = mustachePartNext != null ? this.GetSystemContextPathValue(null, context, null, [mustachePart, mustachePartNext]) : null;
            if (mustacheSystem !== null) {
                return (mustacheSystem);
            }
            else {
                var mustacheRelative = this.CreateContextAbsoluteArray(context, mustachePart, canResolveKey);
                if (mustacheRelative === null) {
                    mustacheContext.push(mustachePart);
                }
                else {
                    for (var j = 0; j < mustacheRelative.length; j++)
                        mustacheContext.push(mustacheRelative[j]);
                    updated = true;
                }
            }
        }
        if (!updated)
            return (null);
        var mustacheRecursive = this.CreateMustache(mustacheContext);
        var mustacheRecursiveParts = this.Application.Parser.ParseMustache(mustacheRecursive);
        var mustacheRecursiveContext = this.CreateMustacheContext(context, mustacheRecursiveParts, false);
        if (mustacheRecursiveContext !== null)
            return (mustacheRecursiveContext);
        return (mustacheRecursive);
    };
    DrapoSolver.prototype.CreateContextAbsoluteArray = function (context, mustachePart, canResolveKey) {
        if ((canResolveKey) && (context.Item.Key === mustachePart)) {
            var contextKey = [];
            var hasInsertedContext = false;
            for (var i = 0; i < context.IndexRelatives.length; i++)
                if (this.AppendContextAbsoluteArray(context.Item, context.ItemsCurrentStack[i], context.IndexRelatives[i], contextKey, i === 0))
                    hasInsertedContext = true;
            this.AppendContextAbsoluteArray(context.Item, context.Item, context.IndexRelative, contextKey, !hasInsertedContext);
            return (contextKey);
        }
        for (var i = 0; i < context.ItemsCurrentStack.length; i++) {
            var itemCurrent = context.ItemsCurrentStack[i];
            if (itemCurrent.Key !== mustachePart)
                continue;
            return ([itemCurrent.Iterator, '[' + context.IndexRelatives[i] + ']']);
        }
        return (null);
    };
    DrapoSolver.prototype.AppendContextAbsoluteArray = function (itemCurrent, item, index, context, checkIndex) {
        if (!this.IsContextItemSameDataKey(itemCurrent, item))
            return (false);
        var iterators = this.Application.Parser.ParseForIterable(item.Iterator);
        if (iterators.length == 1)
            context.push(item.Iterator);
        else
            this.AppendContextAbsoluteIterators(item, context, iterators, checkIndex);
        context.push('[' + index + ']');
        return (true);
    };
    DrapoSolver.prototype.IsContextItemSameDataKey = function (itemCurrent, item) {
        if (item.DataKey == itemCurrent.DataKey)
            return (true);
        if (item.Key == itemCurrent.DataKey)
            return (true);
        return (false);
    };
    DrapoSolver.prototype.AppendContextAbsoluteIterators = function (item, context, iterators, checkIndex) {
        var start = ((checkIndex) && (item.DataKey === iterators[0])) ? 0 : 1;
        for (var i = start; i < iterators.length; i++)
            context.push(iterators[i]);
    };
    DrapoSolver.prototype.CreateMustacheReference = function (sector, contextItem, mustache) {
        return __awaiter(this, void 0, void 0, function () {
            var mustacheContext, mustacheParts, i, mustachePart, mustacheRelative, j, dataKey, storageItem, sectorStorage, mustacheReference;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mustacheContext = [];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        for (i = 0; i < mustacheParts.length; i++) {
                            mustachePart = mustacheParts[i];
                            if (contextItem != null) {
                                mustacheRelative = this.GetContextItemAbsolute(contextItem, mustachePart);
                                for (j = 0; j < mustacheRelative.length; j++)
                                    mustacheContext.push(mustacheRelative[j]);
                            }
                            else {
                                mustacheContext.push(mustachePart);
                            }
                        }
                        dataKey = mustacheContext[0];
                        return [4, this.Application.Storage.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        storageItem = _a.sent();
                        if (storageItem == null)
                            return [2, ('')];
                        sectorStorage = storageItem.Sector != null ? storageItem.Sector : '';
                        mustacheContext.splice(0, 0, '@' + sectorStorage);
                        mustacheReference = this.CreateMustache(mustacheContext);
                        return [2, (mustacheReference)];
                }
            });
        });
    };
    DrapoSolver.prototype.GetContextItemAbsolute = function (contextItem, mustachePart) {
        if (contextItem.Key !== mustachePart)
            return ([mustachePart]);
        var iteratorParts = this.Application.Parser.ParseForIterable(contextItem.Iterator);
        var mustachePartsAbsolute = iteratorParts.concat('[' + contextItem.Index + ']');
        return (mustachePartsAbsolute);
    };
    DrapoSolver.prototype.ResolveDataPathMustache = function (context, executionContext, element, sector, mustacheParts) {
        return __awaiter(this, void 0, void 0, function () {
            var updated, i, mustachePart, mustachePartParts, dataValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updated = false;
                        i = 1;
                        _a.label = 1;
                    case 1:
                        if (!(i < mustacheParts.length)) return [3, 4];
                        mustachePart = mustacheParts[i];
                        if (!this.Application.Parser.IsMustache(mustachePart))
                            return [3, 3];
                        mustachePartParts = this.Application.Parser.ParseMustache(mustachePart);
                        return [4, this.ResolveDataPath(context, executionContext, element, sector, mustachePartParts)];
                    case 2:
                        dataValue = _a.sent();
                        mustacheParts[i] = dataValue;
                        updated = true;
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        if (!updated)
                            return [2, (null)];
                        return [2, (this.CreateMustache(mustacheParts))];
                }
            });
        });
    };
    DrapoSolver.prototype.ExistDataPath = function (context, sector, path) {
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataFields, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKey = this.Application.Solver.ResolveDataKey(path);
                        dataFields = this.Application.Solver.ResolveDataFields(path);
                        return [4, this.ResolveDataPathObjectItem(context.Item, dataKey, sector, true, path)];
                    case 1:
                        item = _a.sent();
                        if (item == null)
                            return [2, (false)];
                        return [2, (this.ExistDataPathObject(item.Data, path))];
                }
            });
        });
    };
    DrapoSolver.prototype.ExistDataPathObject = function (dataObject, dataPath) {
        var data = dataObject;
        for (var i = 1; i < dataPath.length; i++) {
            var currentKey = dataPath[i];
            var index = this.GetDataObjectPathObjectPropertyIndex(data, currentKey);
            if (index === null) {
                if ((data === null) || (data === undefined) || (data[currentKey] === undefined)) {
                    return (false);
                }
                data = data[currentKey];
            }
            else {
                if (!data.length)
                    return (false);
                data = data[index];
            }
        }
        if ((data === null) || (data === undefined))
            return (false);
        return (true);
    };
    DrapoSolver.prototype.ResolveDataPath = function (context, executionContext, element, sector, path, canBindReader, canBindWriter, modelEvents, modelEventsCancel, canNotify) {
        if (canBindReader === void 0) { canBindReader = false; }
        if (canBindWriter === void 0) { canBindWriter = false; }
        if (modelEvents === void 0) { modelEvents = null; }
        if (modelEventsCancel === void 0) { modelEventsCancel = null; }
        if (canNotify === void 0) { canNotify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var dataPath, i, mustache, isMustacheIndexer, mustacheIndexer, mustacheParts, mustacheValue, mustacheValueIndexer, dataKey, dataFields, _a, data, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        dataPath = (typeof path === 'string') ? [path] : path;
                        i = 1;
                        _f.label = 1;
                    case 1:
                        if (!(i < dataPath.length)) return [3, 4];
                        mustache = dataPath[i];
                        isMustacheIndexer = this.Application.Parser.IsMustacheIndexer(mustache);
                        mustacheIndexer = isMustacheIndexer ? this.Application.Parser.GetMustacheInsideIndexer(mustache) : mustache;
                        if (!this.Application.Parser.IsMustache(mustacheIndexer))
                            return [3, 3];
                        mustacheParts = this.Application.Parser.ParseMustache(mustacheIndexer);
                        return [4, this.ResolveDataPath(context, executionContext, element, sector, mustacheParts, canBindReader, canBindWriter, modelEvents, modelEventsCancel, canNotify)];
                    case 2:
                        mustacheValue = _f.sent();
                        mustacheValueIndexer = isMustacheIndexer ? this.Application.Parser.CreateMustacheIndexer(mustacheValue) : mustacheValue;
                        dataPath[i] = mustacheValueIndexer;
                        _f.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4:
                        dataKey = this.Application.Solver.ResolveDataKey(dataPath);
                        dataFields = this.Application.Solver.ResolveDataFields(dataPath);
                        _a = (!context.IsKey(dataKey)) && (!this.Application.Storage.IsDataKeyExecution(dataKey));
                        if (!_a) return [3, 6];
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(dataKey, sector, dataPath)];
                    case 5:
                        _a = (!(_f.sent()));
                        _f.label = 6;
                    case 6:
                        if (_a) {
                            if ((dataFields.length === 0))
                                return [2, ('')];
                            if (this.Application.Storage.IsDataKeyDelay(dataKey, sector))
                                this.Application.Observer.SubscribeDelay(element, dataKey, dataFields);
                            return [2, (this.CreateMustache(dataPath))];
                        }
                        return [4, this.ResolveDataPathObject(sector, context, executionContext, dataPath)];
                    case 7:
                        data = _f.sent();
                        if (!canBindWriter) return [3, 9];
                        _c = (_b = this.Application.Binder).BindReaderWriter;
                        return [4, this.ResolveDataPathObjectItem(context.Item, dataKey, sector)];
                    case 8:
                        _c.apply(_b, [_f.sent(), element, dataFields, modelEvents, modelEventsCancel, canNotify]);
                        return [3, 11];
                    case 9:
                        if (!canBindReader) return [3, 11];
                        _e = (_d = this.Application.Binder).BindReader;
                        return [4, this.ResolveDataPathObjectItem(context.Item, dataKey, sector)];
                    case 10:
                        _e.apply(_d, [_f.sent(), element, dataFields]);
                        _f.label = 11;
                    case 11: return [2, (data)];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveDataPathObject = function (sector, context, executionContext, dataPath) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveItemDataPathObject(sector, context.Item, dataPath, false, executionContext)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveItemDataPathObject = function (sector, contextItem, dataPath, canForceLoadDataDelay, executionContext) {
        if (canForceLoadDataDelay === void 0) { canForceLoadDataDelay = false; }
        if (executionContext === void 0) { executionContext = null; }
        return __awaiter(this, void 0, void 0, function () {
            var valueSystem, valueExecutionContext, dataKey, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        valueSystem = contextItem !== null ? this.GetSystemContextPathValue(sector, contextItem.Context, executionContext, dataPath) : null;
                        if (valueSystem !== null)
                            return [2, (valueSystem)];
                        valueExecutionContext = executionContext === null ? null : this.GetExecutionContextPathValue(sector, executionContext, dataPath);
                        if (valueExecutionContext !== null)
                            return [2, (valueExecutionContext)];
                        dataKey = dataPath[0];
                        return [4, this.ResolveDataPathObjectItem(contextItem, dataKey, sector, canForceLoadDataDelay, dataPath)];
                    case 1:
                        item = _a.sent();
                        if (item == null)
                            return [2, ('')];
                        return [2, (this.ResolveDataObjectPathObject(item.Data, dataPath))];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveItemStoragePathObject = function (item, dataPath) {
        var valueSystem = item !== null ? this.GetSystemPathValue(item, dataPath) : null;
        if (valueSystem !== null)
            return (valueSystem);
        return (this.ResolveDataObjectPathObject(item.Data, dataPath));
    };
    DrapoSolver.prototype.ResolveDataObjectPathObject = function (dataObject, dataPath, dataEnforce) {
        if (dataEnforce === void 0) { dataEnforce = null; }
        var data = dataObject;
        for (var i = 1; i < dataPath.length; i++) {
            var currentKey = dataPath[i];
            var index = this.GetDataObjectPathObjectPropertyIndex(data, currentKey);
            if (index === null) {
                if ((data === null) || (data === undefined) || (data[currentKey] === undefined)) {
                    if ((dataEnforce !== null) && (i === dataPath.length - 1)) {
                        data[currentKey] = dataEnforce;
                        return (dataEnforce);
                    }
                    return ('');
                }
                data = data[currentKey];
            }
            else {
                if (!data.length)
                    return ('');
                data = data[index];
            }
        }
        if ((data === null) || (data === undefined))
            return ('');
        return (data);
    };
    DrapoSolver.prototype.GetDataObjectPathObjectPropertyIndex = function (data, property) {
        if (property.length < 3)
            return (null);
        if (property[0] !== '[')
            return (null);
        if (property[property.length - 1] !== ']')
            return (null);
        var isHat = (property[1] === '^');
        var index = this.Application.Parser.ParseNumber(property.substring(isHat ? 2 : 1, property.length - 1));
        return (((isHat) && (data.length)) ? (data.length - index) : index);
    };
    DrapoSolver.prototype.ResolveDataObjectLookupHierarchy = function (data, searchField, searchValue, searchHierarchyField) {
        if (searchHierarchyField === void 0) { searchHierarchyField = null; }
        var dataList = data.length == null ? [data] : data;
        for (var i = 0; i < dataList.length; i++) {
            var dataCurrent = dataList[i];
            if (dataCurrent == null)
                continue;
            if ((searchHierarchyField != null) && (dataCurrent[searchHierarchyField] != null)) {
                var dataCurrentChild = this.ResolveDataObjectLookupHierarchy(dataCurrent[searchHierarchyField], searchField, searchValue, searchHierarchyField);
                if (dataCurrentChild != null)
                    return (dataCurrentChild);
            }
            var itemValue = searchField == '_Index' ? i : dataCurrent[searchField];
            if (itemValue == searchValue)
                return (dataCurrent);
        }
        return (null);
    };
    DrapoSolver.prototype.UpdateDataObjectLookupHierarchy = function (data, searchField, searchValue, value, searchHierarchyField) {
        if (searchHierarchyField === void 0) { searchHierarchyField = null; }
        var dataList = data.length == null ? [data] : data;
        for (var i = 0; i < dataList.length; i++) {
            var dataCurrent = dataList[i];
            if (dataCurrent == null)
                continue;
            if ((searchHierarchyField != null) && (dataCurrent[searchHierarchyField] != null)) {
                var updated = this.UpdateDataObjectLookupHierarchy(dataCurrent[searchHierarchyField], searchField, searchValue, value, searchHierarchyField);
                if (updated != null)
                    return (updated);
            }
            var itemValue = searchField == '_Index' ? i : dataCurrent[searchField];
            if ((itemValue != null) && (itemValue == searchValue)) {
                dataList[i] = value;
                return (true);
            }
        }
        return (null);
    };
    DrapoSolver.prototype.ContainsItemStoragePathObject = function (item, dataPath) {
        var data = item.Data;
        for (var i = 1; i < dataPath.length; i++) {
            var currentKey = dataPath[i];
            if ((data === null) || (data === undefined) || (data[currentKey] === undefined)) {
                return (false);
            }
            data = data[currentKey];
        }
        return (true);
    };
    DrapoSolver.prototype.ResolveDataPathObjectItem = function (contextItem, dataKey, sector, canForceLoadDataDelay, dataPath) {
        if (canForceLoadDataDelay === void 0) { canForceLoadDataDelay = false; }
        if (dataPath === void 0) { dataPath = null; }
        return __awaiter(this, void 0, void 0, function () {
            var item, dataItem, context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        item = contextItem;
                        while (item != null) {
                            if (item.Key == dataKey)
                                return [2, (item)];
                            item = item.Parent;
                        }
                        return [4, this.Application.Storage.RetrieveDataItem(dataKey, sector, canForceLoadDataDelay, null)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (null)];
                        if (!((canForceLoadDataDelay) && (dataItem.IsDelay))) return [3, 3];
                        return [4, this.Application.Storage.EnsureDataDelayLoaded(dataItem, dataPath)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        context = new DrapoContext();
                        return [2, (context.Create(dataItem.Data, null, null, dataKey, null, null, null))];
                }
            });
        });
    };
    DrapoSolver.prototype.ResolveSector = function (mustacheParts, sector) {
        if (mustacheParts.length == 0)
            return (sector);
        var mustacheSector = mustacheParts[0];
        if (mustacheSector === '@')
            return (null);
        if (mustacheSector.indexOf("@") === 0)
            return (mustacheSector.substring(1));
        return (sector);
    };
    DrapoSolver.prototype.HasMustachePartsSector = function (mustacheParts) {
        if (mustacheParts == null)
            return (false);
        var part = mustacheParts[0];
        if (part == null)
            return (false);
        if (part.length == 0)
            return (false);
        return (part[0] === '@');
    };
    DrapoSolver.prototype.ResolveDataKey = function (mustacheParts) {
        var index = this.HasMustachePartsSector(mustacheParts) ? 1 : 0;
        return (mustacheParts[index]);
    };
    DrapoSolver.prototype.ResolveDataFields = function (mustacheParts) {
        var dataFields = [];
        var start = this.HasMustachePartsSector(mustacheParts) ? 2 : 1;
        for (var i = start; i < mustacheParts.length; i++)
            dataFields.push(mustacheParts[i]);
        return (dataFields);
    };
    DrapoSolver.prototype.CreateDataPath = function (dataKey, dataFields) {
        var path = [];
        path.push(dataKey);
        if (dataFields != null) {
            for (var i = 0; i < dataFields.length; i++)
                path.push(dataFields[i]);
        }
        return (path);
    };
    DrapoSolver.prototype.CombineDataPath = function (dataPath1, dataPath2) {
        var path = [];
        if (dataPath1 != null)
            for (var i = 0; i < dataPath1.length; i++)
                path.push(dataPath1[i]);
        if (dataPath2 != null)
            for (var i = 0; i < dataPath2.length; i++)
                path.push(dataPath2[i]);
        return (path);
    };
    DrapoSolver.prototype.GetDataPathParent = function (dataPath) {
        var dataPathParent = [];
        for (var i = 0; i < dataPath.length - 1; i++)
            dataPathParent.push(dataPath[i]);
        return (dataPathParent);
    };
    DrapoSolver.prototype.UpdateItemDataPathObject = function (sector, contextItem, executionContext, dataPath, value, canNotify) {
        if (canNotify === void 0) { canNotify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var key, data, storageItem, item, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = dataPath[0];
                        if ((executionContext != null) && (this.Application.Storage.IsDataKeyExecution(key))) {
                            data = this.GetExecutionContextPathValueStack(sector, executionContext, dataPath);
                            dataPath.splice(1, 1);
                            if (this.UpdateDataPathObject(data, dataPath, value))
                                return [2, (true)];
                            return [2, (false)];
                        }
                        if (!(contextItem === null)) return [3, 4];
                        return [4, this.Application.Storage.RetrieveDataItem(key, sector)];
                    case 1:
                        storageItem = _a.sent();
                        if (storageItem === null)
                            return [2, (false)];
                        if (dataPath.length === 1) {
                            if (storageItem.Data === value)
                                return [2, (false)];
                            storageItem.Data = value;
                        }
                        else {
                            if (!this.UpdateDataPathObject(storageItem.Data, dataPath, value))
                                return [2, (false)];
                        }
                        storageItem.HasChanges = true;
                        if (!canNotify) return [3, 3];
                        return [4, this.Application.Observer.Notify(key, null, this.ResolveDataFields(dataPath))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2, (true)];
                    case 4: return [4, this.ResolveDataPathObjectItem(contextItem, key, sector)];
                    case 5:
                        item = _a.sent();
                        if (item == null)
                            return [2, (false)];
                        if (dataPath.length === 1) {
                            if (item.Data === value)
                                return [2, (false)];
                            item.Data = value;
                        }
                        else {
                            data = item.Data;
                            if (!this.UpdateDataPathObject(item.Data, dataPath, value))
                                return [2, (false)];
                        }
                        if (!canNotify) return [3, 7];
                        return [4, this.Application.Observer.Notify(item.DataKey, item.Index, this.ResolveDataFields(dataPath))];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2, (true)];
                }
            });
        });
    };
    DrapoSolver.prototype.UpdateDataPathObject = function (data, dataPath, value) {
        for (var i = 1; i < dataPath.length - 1; i++) {
            var currentKey = dataPath[i];
            var index = this.GetDataObjectPathObjectPropertyIndex(data, currentKey);
            if (index === null) {
                if ((data === null) || (data === undefined) || (data[currentKey] === undefined)) {
                    return (false);
                }
                data = data[currentKey];
            }
            else {
                if (!data.length)
                    return (false);
                data = data[index];
            }
        }
        if (data == null)
            return (false);
        var dataField = dataPath[dataPath.length - 1];
        var indexDataField = this.GetDataObjectPathObjectPropertyIndex(data, dataField);
        if (indexDataField === null) {
            if (data[dataField] === value)
                return (false);
            data[dataField] = value;
        }
        else {
            if (data[indexDataField] === value)
                return (false);
            data[indexDataField] = value;
        }
        return (true);
    };
    DrapoSolver.prototype.IsPrimitive = function (object) {
        if (object === null)
            return (true);
        if (typeof object === "string")
            return (true);
        if (typeof object === "number")
            return (true);
        if (typeof object === "boolean")
            return (true);
        if (typeof object === "bigint")
            return (true);
        if (typeof object === "undefined")
            return (true);
        if (typeof object === "symbol")
            return (true);
        return (false);
    };
    DrapoSolver.prototype.Clone = function (object, deepCopy) {
        if (deepCopy === void 0) { deepCopy = false; }
        if (this.IsPrimitive(object))
            return (object);
        if (object instanceof Date)
            return (new Date(object.getTime()));
        if (Array.isArray(object))
            return (this.CloneArray(object, deepCopy));
        return (this.CloneObject(object, deepCopy));
    };
    DrapoSolver.prototype.CloneObject = function (object, deepCopy) {
        var clone = {};
        for (var property in object) {
            if (!Object.prototype.hasOwnProperty.call(object, property))
                continue;
            if (deepCopy)
                clone[property] = this.Clone(object[property], true);
            else
                clone[property] = object[property];
        }
        return (clone);
    };
    DrapoSolver.prototype.CloneArray = function (object, deepCopy) {
        var clone = [];
        for (var i = 0; i < object.length; i++) {
            if (deepCopy)
                clone.push(this.Clone(object[i], deepCopy));
            else
                clone.push(object[i]);
        }
        return (clone);
    };
    DrapoSolver.prototype.CloneArrayString = function (list) {
        if (list == null)
            return (null);
        var clone = [];
        for (var i = 0; i < list.length; i++)
            clone.push(list[i]);
        return (clone);
    };
    DrapoSolver.prototype.CloneArrayElement = function (list) {
        if (list == null)
            return (null);
        var clone = [];
        for (var i = 0; i < list.length; i++)
            clone.push(list[i]);
        return (clone);
    };
    DrapoSolver.prototype.CloneArrayAny = function (list) {
        if (list == null)
            return (null);
        var clone = [];
        for (var i = 0; i < list.length; i++)
            clone.push(list[i]);
        return (clone);
    };
    DrapoSolver.prototype.GetSystemContextPathValue = function (sector, context, executionContext, dataPath) {
        if (this.Application.Storage.IsDataKeyExecution(dataPath[0]))
            return (this.GetExecutionContextPathValueSolved(sector, executionContext, dataPath));
        if (dataPath.length != 2)
            return (null);
        var property = dataPath[1];
        if (property.charAt(0) !== '_')
            return (null);
        if (context.Item === null)
            return (null);
        var propertyLower = property.toLowerCase();
        var key = dataPath[0];
        if (propertyLower === '_index')
            return (this.GetSystemContextPathValueIndex(context, key));
        if (propertyLower === '_indexrelative')
            return (this.GetSystemContextPathValueIndexRelative(context, key));
        if (context.Item.Key !== key)
            return (null);
        if (propertyLower === '_level')
            return (this.GetSystemContextPathValueLevel(context));
        if (propertyLower === '_haschanges')
            return (this.GetSystemContextPathValueHasChanges(sector, context.Item.DataKey));
        return (null);
    };
    DrapoSolver.prototype.GetExecutionContextPathValueSolved = function (sector, executionContext, dataPath) {
        var data = this.GetExecutionContextPathValueStack(sector, executionContext, dataPath);
        dataPath.splice(1, 1);
        return (this.ResolveDataObjectPathObject(data, dataPath));
    };
    DrapoSolver.prototype.GetExecutionContextPathValue = function (sector, executionContext, dataPath) {
        if (dataPath.length != 2)
            return (null);
        var obj = dataPath[0];
        if (obj.toLowerCase() === '_stack')
            return (this.GetExecutionContextPathValueStack(sector, executionContext, dataPath));
        return (null);
    };
    DrapoSolver.prototype.GetExecutionContextPathValueStack = function (sector, executionContext, dataPath) {
        var property = dataPath[1].toLowerCase();
        if (property === 'peek')
            return (executionContext.Stack.Peek());
        if (property === 'pop')
            return (executionContext.Stack.Pop());
        return (null);
    };
    DrapoSolver.prototype.GetSystemPathValue = function (item, dataPath) {
        if (dataPath.length != 2)
            return (null);
        var property = dataPath[1];
        if (property.charAt(0) !== '_')
            return (null);
        if (item === null)
            return (null);
        var propertyLower = dataPath[1].toLowerCase();
        if (propertyLower === '_haschanges')
            return (item.HasChanges.toString());
        return (null);
    };
    DrapoSolver.prototype.GetSystemContextPathValueIndex = function (context, key) {
        var index = context.GetIndex(key);
        if (index === null)
            return (null);
        return (index.toString());
    };
    DrapoSolver.prototype.GetSystemContextPathValueIndexRelative = function (context, key) {
        var indexRelative = context.GetIndexRelative(key);
        if (indexRelative === null)
            return (null);
        return (indexRelative.toString());
    };
    DrapoSolver.prototype.GetSystemContextPathValueLevel = function (context) {
        return (context.Level.toString());
    };
    DrapoSolver.prototype.GetSystemContextPathValueHasChanges = function (sector, dataKey) {
        return (this.Application.Storage.HasChanges(sector, dataKey).toString());
    };
    DrapoSolver.prototype.ResolveSystemContextPath = function (sector, context, expression) {
        if (expression.indexOf('._') < 0)
            return (expression);
        var mustaches = this.Application.Parser.ParseMustaches(expression);
        for (var i = 0; i < mustaches.length; i++) {
            var mustache = mustaches[i];
            var dataPath = this.Application.Parser.ParseMustache(mustache);
            var data = this.GetSystemContextPathValue(sector, context, null, dataPath);
            if (data === null)
                continue;
            expression = expression.replace(mustache, data);
        }
        return (expression);
    };
    DrapoSolver.prototype.TransformObjectIntoArray = function (object) {
        var array = [];
        for (var property in object) {
            var objectProperty = {};
            objectProperty.Key = property;
            objectProperty.Value = object[property];
            array.push(objectProperty);
        }
        return (array);
    };
    DrapoSolver.prototype.ResolveUrlToAbsolute = function (urlRelative) {
        if (urlRelative.search(/^\/\//) != -1)
            return (window.location.protocol + urlRelative);
        if (urlRelative.search(/:\/\//) != -1)
            return (urlRelative);
        if (urlRelative.search(/^\//) != -1)
            return window.location.origin + urlRelative;
        var base = window.location.href.match(/(.*\/)/)[0];
        return (base + urlRelative);
    };
    DrapoSolver.prototype.Contains = function (data, item) {
        for (var i = 0; i < data.length; i++)
            if (data[i] == item)
                return (true);
        return (false);
    };
    DrapoSolver.prototype.Join = function (list1, list2) {
        var list = [];
        for (var i = 0; i < list1.length; i++)
            list.push(list1[i]);
        for (var i = 0; i < list2.length; i++) {
            var value = list2[i];
            if (!this.Contains(list, value))
                list.push(value);
        }
        return (list);
    };
    DrapoSolver.prototype.Get = function (dictionary, key) {
        for (var i = 0; i < dictionary.length; i++) {
            var keyValue = dictionary[i];
            if (keyValue[0] === key)
                return (keyValue[1]);
        }
        return (null);
    };
    DrapoSolver.prototype.IsEqualAny = function (data1, data2) {
        var isData1Null = (data1 == null);
        var isData2Null = (data2 == null);
        if (isData1Null !== isData2Null)
            return (false);
        if (isData1Null)
            return (true);
        var isData1Array = Array.isArray(data1);
        var isData2Array = Array.isArray(data2);
        if (isData1Array !== isData2Array)
            return (false);
        if (isData1Array)
            return (this.IsEqualObjectArray(data1, data2));
        var isData1Object = (typeof data1 == 'object');
        var isData2Object = (typeof data2 == 'object');
        if (isData1Object !== isData2Object)
            return (false);
        if (isData1Object)
            return (this.IsEqualObject(data1, data2));
        return (false);
    };
    DrapoSolver.prototype.IsEqualObject = function (value1, value2) {
        var value1Properties = this.GetObjectProperties(value1);
        var value2Properties = this.GetObjectProperties(value2);
        if (value1Properties.length !== value2Properties.length)
            return (false);
        for (var i = 0; i < value1Properties.length; i++) {
            var value1Property = value1Properties[i];
            var value2Property = value2Properties[i];
            if (value1Property[0] !== value2Property[0])
                return (false);
            if (value1Property[1] !== value2Property[1])
                return (false);
        }
        return (true);
    };
    DrapoSolver.prototype.GetObjectProperties = function (value) {
        var valueAsAny = value;
        var properties = [];
        for (var propertyName in value) {
            properties.push([propertyName, valueAsAny[propertyName]]);
        }
        return (properties);
    };
    DrapoSolver.prototype.IsEqualObjectArray = function (value1, value2) {
        if (value1.length !== value2.length)
            return (false);
        for (var i = 0; i < value1.length; i++) {
            if (!this.IsEqualObject(value1[i], value2[i]))
                return (false);
        }
        return (true);
    };
    DrapoSolver.prototype.IsEqualStringArray = function (list1, list2) {
        if (list1.length !== list2.length)
            return (false);
        for (var i = 0; i < list1.length; i++)
            if (list1[i] !== list2[i])
                return (false);
        return (true);
    };
    DrapoSolver.prototype.IsEqualString = function (value1, value2) {
        var value1String = this.EnsureString(value1);
        var value2String = this.EnsureString(value2);
        return (value1String === value2String);
    };
    DrapoSolver.prototype.EnsureString = function (data) {
        if (data === null)
            return (data);
        if (typeof data === 'object')
            return ('object');
        if (typeof data === 'string')
            return (data);
        return (data.toString());
    };
    DrapoSolver.prototype.Replace = function (data, from, to) {
        if (from === '.')
            from = '\\.';
        var regex = new RegExp(from, 'g');
        var dataReplaced = data.replace(regex, to);
        return (dataReplaced);
    };
    DrapoSolver.prototype.ResolveMathematicalExpression = function (data) {
        var tokens = this.Application.Parser.ParseBlockMathematicalExpression(data);
        for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i];
            if ((token.length > 2) && (token[0] === '(') && (token[token.length - 1] === ')'))
                tokens[i] = this.ResolveMathematicalExpression(token.substring(1, token.length - 1));
        }
        for (var i = 0; i < tokens.length - 2; i++) {
            var token = tokens[i + 1];
            if (token !== '*')
                continue;
            var blockMultiFirstParameter = tokens[i];
            var blockMultiSecondParameter = tokens[i + 2];
            var blockMultiValue = (this.Application.Parser.ParseNumber(blockMultiFirstParameter) * this.Application.Parser.ParseNumber(blockMultiSecondParameter)).toString();
            tokens[i] = blockMultiValue;
            tokens.splice(i + 1, 2);
            i--;
        }
        for (var i = 0; i < tokens.length - 2; i++) {
            var token = tokens[i + 1];
            if (token !== '/')
                continue;
            var blockDivisionFirstParameter = tokens[i];
            var blockDivisionSecondParameter = tokens[i + 2];
            var numberDividend = this.Application.Parser.ParseNumber(blockDivisionSecondParameter);
            var blockDivisionValue = numberDividend == 0 ? '0' : (this.Application.Parser.ParseNumber(blockDivisionFirstParameter) / numberDividend).toString();
            tokens[i] = blockDivisionValue;
            tokens.splice(i + 1, 2);
            i--;
        }
        for (var i = 0; i < tokens.length - 2; i++) {
            var token = tokens[i + 1];
            if (token !== '+')
                continue;
            var blockPlusFirstParameter = tokens[i];
            var blockPlusSecondParameter = tokens[i + 2];
            var blockPlusValue = (this.Application.Parser.ParseNumber(blockPlusFirstParameter) + this.Application.Parser.ParseNumber(blockPlusSecondParameter)).toString();
            tokens[i] = blockPlusValue;
            tokens.splice(i + 1, 2);
            i--;
        }
        for (var i = 0; i < tokens.length - 2; i++) {
            var token = tokens[i + 1];
            if (token !== '-')
                continue;
            var blockMinusFirstParameter = tokens[i];
            var blockMinusSecondParameter = tokens[i + 2];
            var blockMinusValue = (this.Application.Parser.ParseNumber(blockMinusFirstParameter) - this.Application.Parser.ParseNumber(blockMinusSecondParameter)).toString();
            tokens[i] = blockMinusValue;
            tokens.splice(i + 1, 2);
            i--;
        }
        return (tokens[0]);
    };
    return DrapoSolver;
}());

"use strict";
var DrapoStack = (function () {
    function DrapoStack() {
        this._data = [];
    }
    DrapoStack.prototype.Peek = function () {
        if (this._data.length == 0)
            return (null);
        return (this._data[this._data.length - 1]);
    };
    DrapoStack.prototype.Push = function (item) {
        this._data.push(item);
    };
    DrapoStack.prototype.Pop = function () {
        var item = this._data.pop();
        return (item !== null && item !== void 0 ? item : null);
    };
    return DrapoStack;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoStorage = (function () {
    function DrapoStorage(application) {
        this._cacheItems = [];
        this._isDelayTriggered = false;
        this.CONTENT_TYPE_JSON = 'application/json; charset=utf-8';
        this._lock = false;
        this._application = application;
    }
    Object.defineProperty(DrapoStorage.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoStorage.prototype.AdquireLock = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._lock) return [3, 2];
                        return [4, this.Application.Document.Sleep(50)];
                    case 1:
                        _a.sent();
                        return [3, 0];
                    case 2:
                        this._lock = true;
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ReleaseLock = function () {
        this._lock = false;
    };
    DrapoStorage.prototype.Retrieve = function (dataKey, sector, context, dataKeyParts) {
        if (dataKeyParts === void 0) { dataKeyParts = null; }
        return __awaiter(this, void 0, void 0, function () {
            var item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (dataKeyParts === null)
                            dataKeyParts = this.Application.Parser.ParseForIterable(dataKey);
                        if (!((dataKeyParts.length == 1) || (this.IsDataKey(dataKeyParts[0], sector)))) return [3, 2];
                        return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1: return [2, (_a.sent())];
                    case 2:
                        if ((dataKeyParts.length > 1) && (context.Item != null))
                            return [2, (this.RetrieveIterator(dataKey, dataKeyParts, context))];
                        if (!((dataKeyParts.length > 1) && (context.Item === null))) return [3, 4];
                        return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 3:
                        item = _a.sent();
                        if (item === null)
                            return [2, (null)];
                        return [2, (this.RetrieveIteratorChild(dataKey, dataKeyParts, item.Data))];
                    case 4: return [2, (null)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemContext = function (dataKey, sector, executionContext) {
        if (executionContext === void 0) { executionContext = null; }
        return __awaiter(this, void 0, void 0, function () {
            var dataItemContext, dataItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!((executionContext !== null) && (executionContext.HasSectorContainer(sector)))) return [3, 2];
                        return [4, this.Application.SectorContainerHandler.GetStorageItem(sector, executionContext.GetSectorContainer(sector), dataKey)];
                    case 1:
                        dataItemContext = _a.sent();
                        if (dataItemContext !== null)
                            return [2, (dataItemContext)];
                        _a.label = 2;
                    case 2: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 3:
                        dataItem = _a.sent();
                        return [2, (dataItem)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveData = function (dataKey, sector, executionContext) {
        if (executionContext === void 0) { executionContext = null; }
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!((executionContext !== null) && (executionContext.HasSectorContainer(sector)))) return [3, 2];
                        return [4, this.Application.SectorContainerHandler.GetStorageItem(sector, executionContext.GetSectorContainer(sector), dataKey)];
                    case 1:
                        _a = _b.sent();
                        return [3, 4];
                    case 2: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        dataItem = _a;
                        if (dataItem == null)
                            return [2, (null)];
                        return [2, (dataItem.Data)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveStorageItemsCached = function (sector, dataKeyOrDataGroup) {
        var isAllSectors = ((sector === null) || (sector === ''));
        var isAllData = ((dataKeyOrDataGroup === null) || (dataKeyOrDataGroup === ''));
        var list = [];
        for (var i = 0; i < this._cacheItems.length; i++) {
            var item = this._cacheItems[i];
            if (item == null)
                continue;
            if ((!isAllSectors) && (item.Sector !== sector))
                continue;
            var dataKey = item.DataKey;
            if ((!isAllData) && (dataKey !== dataKeyOrDataGroup) && (!item.ContainsGroup(dataKeyOrDataGroup)))
                continue;
            list.push(item);
        }
        return (list);
    };
    DrapoStorage.prototype.RetrieveDataValue = function (sector, mustache) {
        return __awaiter(this, void 0, void 0, function () {
            var mustacheFullParts, dataSector, dataKey, mustacheDataFields, mustacheParts, item, cacheIndex, cacheItem, dataFieldCurrent, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mustacheFullParts = this.Application.Parser.ParseMustache(mustache);
                        dataSector = this.Application.Solver.ResolveSector(mustacheFullParts, sector);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheFullParts);
                        mustacheDataFields = this.Application.Solver.ResolveDataFields(mustacheFullParts);
                        mustacheParts = this.Application.Solver.CreateDataPath(dataKey, mustacheDataFields);
                        return [4, this.EnsureDataKeyFieldReady(dataKey, dataSector, mustacheParts)];
                    case 1:
                        if (_a.sent())
                            return [2, (this.Application.Storage.GetDataKeyField(dataKey, dataSector, mustacheParts))];
                        return [4, this.RetrieveDataItemInternal(dataKey, dataSector, true, mustacheDataFields)];
                    case 2:
                        item = _a.sent();
                        if ((item == null) || (item.Data == null))
                            return [2, ('')];
                        cacheIndex = this.GetCacheKeyIndex(dataKey, dataSector);
                        if (!(cacheIndex == null)) return [3, 4];
                        return [4, this.AddCacheData(dataKey, dataSector, item)];
                    case 3:
                        _a.sent();
                        return [3, 5];
                    case 4:
                        cacheItem = this.GetCacheDataItem(cacheIndex);
                        for (dataFieldCurrent in item.Data)
                            cacheItem.Data[dataFieldCurrent] = item.Data[dataFieldCurrent];
                        _a.label = 5;
                    case 5:
                        data = this.Application.Solver.ResolveItemStoragePathObject(item, mustacheParts);
                        return [2, (data)];
                }
            });
        });
    };
    DrapoStorage.prototype.CanGrowData = function (dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        return [2, ((dataItem.IsIncremental) && (!dataItem.IsFull))];
                }
            });
        });
    };
    DrapoStorage.prototype.GrowData = function (dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, dataItem, dataNew, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (cacheIndex == null)
                            return [2, (false)];
                        dataItem = this.GetCacheDataItem(cacheIndex);
                        if (dataItem == null)
                            return [2, (false)];
                        if (dataItem.IsFull)
                            return [2, (false)];
                        if (dataItem.IsGrowing)
                            return [2, (false)];
                        dataItem.IsGrowing = true;
                        return [4, this.RetrieveDataKeyUrl(dataKey, sector, dataItem.UrlGet, dataItem.UrlParameters, dataItem.PostGet, (dataItem.Start + dataItem.Data.length).toString(), dataItem.Increment.toString(), dataItem.Type, dataItem.IsToken)];
                    case 1:
                        dataNew = _a.sent();
                        if (dataNew == null)
                            return [2, (false)];
                        dataItem.IsGrowing = false;
                        if (dataNew.length < dataItem.Increment)
                            dataItem.IsFull = true;
                        for (i = 0; i < dataNew.length; i++)
                            dataItem.Data.push(dataNew[i]);
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.UpdateData = function (dataKey, sector, data, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, dataItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.EnsureDataKeyReady(dataKey, sector)];
                    case 1:
                        cacheIndex = _a.sent();
                        if (cacheIndex == null)
                            return [2, (false)];
                        dataItem = this.GetCacheDataItem(cacheIndex);
                        if (dataItem == null)
                            return [2, (false)];
                        if (dataItem.Data == data)
                            return [2, (false)];
                        dataItem.Data = data;
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null, false)];
                    case 2:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.UpdateDataPath = function (sector, contextItem, dataPath, value, canNotify) {
        if (canNotify === void 0) { canNotify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var dataKey, dataItem, context, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKey = this.Application.Solver.ResolveDataKey(dataPath);
                        return [4, this.Application.Storage.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        context = new DrapoContext();
                        item = contextItem == null ? context.Create(dataItem.Data, null, null, dataKey, null, null, null) : contextItem;
                        if (item == null)
                            return [2, (false)];
                        if ((dataPath == null) || (dataPath.length == 1)) {
                            if (dataItem.Data == value)
                                return [2, (false)];
                            dataItem.Data = value;
                        }
                        else {
                            if (!this.Application.Solver.UpdateDataPathObject(item.Data, dataPath, value))
                                return [2, (false)];
                        }
                        if (!canNotify) return [3, 3];
                        return [4, this.Application.Observer.Notify(item.DataKey, item.Index, this.Application.Solver.ResolveDataFields(dataPath))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4, this.NotifyChanges(dataItem, false, dataKey, null, this.Application.Solver.ResolveDataFields(dataPath), false)];
                    case 4:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.ReloadData = function (dataKey, sector, notify, canUseDifference) {
        if (notify === void 0) { notify = true; }
        if (canUseDifference === void 0) { canUseDifference = false; }
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex, storageItem, storageItemLoaded, storageItemLoaded, isEqual;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (dataKeyIndex == null)
                            return [2, (true)];
                        storageItem = this._cacheItems[dataKeyIndex];
                        if (!(storageItem.UrlGet !== null)) return [3, 4];
                        return [4, this.RetrieveDataItemInternal(dataKey, sector)];
                    case 1:
                        storageItemLoaded = _a.sent();
                        if (!(storageItemLoaded !== null)) return [3, 3];
                        return [4, this.AdquireLock()];
                    case 2:
                        _a.sent();
                        this._cacheItems[dataKeyIndex] = storageItemLoaded;
                        this.ReleaseLock();
                        _a.label = 3;
                    case 3: return [3, 10];
                    case 4:
                        if (!(storageItem.Type === 'query')) return [3, 8];
                        return [4, this.RetrieveDataItemInternal(dataKey, sector)];
                    case 5:
                        storageItemLoaded = _a.sent();
                        if (!(storageItemLoaded !== null)) return [3, 7];
                        isEqual = this.Application.Solver.IsEqualAny(storageItem.Data, storageItemLoaded.Data);
                        if (isEqual)
                            return [2, (false)];
                        return [4, this.AdquireLock()];
                    case 6:
                        _a.sent();
                        this._cacheItems[dataKeyIndex] = storageItemLoaded;
                        this.ReleaseLock();
                        _a.label = 7;
                    case 7: return [3, 10];
                    case 8: return [4, this.RemoveCacheData(dataKeyIndex, false)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        if (!notify) return [3, 12];
                        return [4, this.Application.Observer.Notify(dataKey, null, null, canUseDifference)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12: return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.GetSectors = function (dataKey) {
        var sectors = [];
        for (var i = this._cacheItems.length - 1; i >= 0; i--) {
            var storageItem = this._cacheItems[i];
            if (storageItem == null)
                continue;
            if (storageItem.DataKey === dataKey)
                sectors.push(storageItem.Sector);
        }
        return (sectors);
    };
    DrapoStorage.prototype.GetSectorDataKeys = function (sector) {
        var dataKeys = [];
        for (var i = this._cacheItems.length - 1; i >= 0; i--) {
            var storageItem = this._cacheItems[i];
            if (storageItem == null)
                continue;
            if (storageItem.Sector === sector)
                dataKeys.push(storageItem.DataKey);
        }
        return (dataKeys);
    };
    DrapoStorage.prototype.ReloadPipe = function (dataPipe) {
        return __awaiter(this, void 0, void 0, function () {
            var reloaded, i, storageItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reloaded = false;
                        i = this._cacheItems.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        if (i >= this._cacheItems.length)
                            return [3, 3];
                        storageItem = this._cacheItems[i];
                        if (storageItem == null)
                            return [3, 3];
                        if (storageItem.Pipes == null)
                            return [3, 3];
                        if (!this.Application.Solver.Contains(storageItem.Pipes, dataPipe))
                            return [3, 3];
                        return [4, this.ReloadData(storageItem.DataKey, null)];
                    case 2:
                        if (_a.sent())
                            reloaded = true;
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2, (reloaded)];
                }
            });
        });
    };
    DrapoStorage.prototype.IsMustachePartsDataKey = function (sector, mustacheParts) {
        var dataKey = mustacheParts[0];
        if (!this.IsDataKey(dataKey, sector))
            return (false);
        for (var i = 1; i < mustacheParts.length; i++) {
            var mustachePart = mustacheParts[i];
            if (!this.Application.Parser.IsMustache(mustachePart))
                continue;
            var mustachePartParts = this.Application.Parser.ParseMustache(mustachePart);
            if (!this.IsMustachePartsDataKey(sector, mustachePartParts))
                return (false);
        }
        return (true);
    };
    DrapoStorage.prototype.IsDataKey = function (dataKey, sector, renderContext) {
        if (renderContext === void 0) { renderContext = null; }
        if (this.Application.Document.IsSystemKey(dataKey))
            return (true);
        var cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
        if (cacheIndex != null)
            return (true);
        return (this.IsDataKeyElement(dataKey, renderContext));
    };
    DrapoStorage.prototype.IsDataKeyExecution = function (dataKey) {
        return (dataKey === '_stack');
    };
    DrapoStorage.prototype.IsDataKeyDelay = function (dataKey, sector) {
        var cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
        if (cacheIndex === null)
            return (false);
        var cacheItem = this.GetCacheDataItem(cacheIndex);
        if (cacheItem === null)
            return (false);
        return (cacheItem.IsDelay);
    };
    DrapoStorage.prototype.IsDataKeyElement = function (dataKey, renderContext) {
        if (renderContext === null)
            return (this.Application.Searcher.HasDataKeyElement(dataKey));
        var hasDataKeyElement = renderContext.HasDataKeyElement(dataKey);
        if (hasDataKeyElement !== null)
            return (hasDataKeyElement);
        var isDataKeyElement = this.Application.Searcher.HasDataKeyElement(dataKey);
        renderContext.AddDataKeyElement(dataKey, isDataKeyElement);
        return (isDataKeyElement);
    };
    DrapoStorage.prototype.EnsureDataKeyReady = function (dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (!(cacheIndex == null)) return [3, 3];
                        return [4, this.RetrieveDataItemInternal(dataKey, sector)];
                    case 1:
                        item = _a.sent();
                        if (item == null)
                            return [2, (null)];
                        return [4, this.AddCacheData(dataKey, sector, item)];
                    case 2:
                        cacheIndex = _a.sent();
                        _a.label = 3;
                    case 3: return [2, (cacheIndex)];
                }
            });
        });
    };
    DrapoStorage.prototype.EnsureDataKeyFieldReady = function (dataKey, sector, dataPath) {
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, item, storageItem, hasData, isLoaded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (!(cacheIndex == null)) return [3, 3];
                        return [4, this.RetrieveDataItemInternal(dataKey, sector)];
                    case 1:
                        item = _a.sent();
                        if (item == null)
                            return [2, (false)];
                        return [4, this.AddCacheData(dataKey, sector, item)];
                    case 2:
                        cacheIndex = _a.sent();
                        _a.label = 3;
                    case 3:
                        storageItem = this.GetCacheDataItem(cacheIndex);
                        if (!storageItem.IsDelay)
                            return [2, (true)];
                        hasData = this.Application.Solver.ContainsItemStoragePathObject(storageItem, dataPath);
                        if (hasData)
                            return [2, (true)];
                        isLoaded = this.Application.CacheHandler.EnsureLoaded(storageItem, sector, dataKey, dataPath);
                        if (!isLoaded)
                            return [2, (false)];
                        return [2, (this.Application.Solver.ContainsItemStoragePathObject(storageItem, dataPath))];
                }
            });
        });
    };
    DrapoStorage.prototype.GetData = function (sector, dataPath) {
        if ((dataPath == null) || (dataPath.length == 0))
            return (null);
        var dataKey = this.Application.Solver.ResolveDataKey(dataPath);
        return (this.GetDataKeyField(dataKey, sector, dataPath));
    };
    DrapoStorage.prototype.GetDataKeyField = function (dataKey, sector, dataPath, executionContext) {
        if (executionContext === void 0) { executionContext = null; }
        var storageItem = this.GetCacheStorageItem(dataKey, sector, executionContext);
        if (storageItem === null)
            return (null);
        return (this.Application.Solver.ResolveItemStoragePathObject(storageItem, dataPath));
    };
    DrapoStorage.prototype.SetDataKeyField = function (dataKey, sector, dataFields, value, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, storageItem, length_1, updated, i, data, path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.EnsureDataKeyReady(dataKey, sector)];
                    case 1:
                        cacheIndex = _a.sent();
                        if (cacheIndex == null)
                            return [2, (false)];
                        storageItem = this.GetCacheDataItem(cacheIndex);
                        if (!((dataFields !== null) && (storageItem.IsTypeArray))) return [3, 3];
                        length_1 = storageItem.Data.length;
                        updated = false;
                        for (i = 0; i < length_1; i++) {
                            data = storageItem.Data[i];
                            if (this.Application.Solver.UpdateDataPathObject(data, dataFields, value))
                                updated = true;
                        }
                        if (!updated)
                            return [2, (false)];
                        return [4, this.NotifyChanges(storageItem, notify, dataKey, null, dataFields)];
                    case 2:
                        _a.sent();
                        return [3, 7];
                    case 3:
                        path = this.Application.Solver.CreateDataPath(dataKey, dataFields);
                        if (!(path.length === 1)) return [3, 5];
                        if (storageItem.Data === value)
                            return [2, (false)];
                        storageItem.Data = value;
                        return [4, this.NotifyChanges(storageItem, notify, dataKey, null, null)];
                    case 4:
                        _a.sent();
                        return [3, 7];
                    case 5:
                        if (!this.Application.Solver.UpdateDataPathObject(storageItem.Data, path, value))
                            return [2, (false)];
                        return [4, this.NotifyChanges(storageItem, notify, dataKey, null, dataFields)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.UpdateDataFieldLookup = function (dataKey, sector, dataFieldSeek, valueSeek, dataField, value, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, dataPath, storageItem, length_2, updated, context, i, data, dataPathSeek, contextItem, dataPathSeekValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.EnsureDataKeyReady(dataKey, sector)];
                    case 1:
                        cacheIndex = _a.sent();
                        if (cacheIndex == null)
                            return [2, (false)];
                        dataPath = (typeof dataField === "string") ? [dataField] : dataField;
                        storageItem = this.GetCacheDataItem(cacheIndex);
                        if (!storageItem.IsTypeArray) return [3, 7];
                        length_2 = storageItem.Data.length;
                        updated = false;
                        context = new DrapoContext();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < length_2)) return [3, 5];
                        data = storageItem.Data[i];
                        dataPathSeek = this.CreateDataPath(dataKey, dataFieldSeek);
                        contextItem = context.Create(data, null, null, dataKey, dataKey, null, i);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPathSeek)];
                    case 3:
                        dataPathSeekValue = _a.sent();
                        if (!this.Application.Solver.IsEqualString(valueSeek, dataPathSeekValue))
                            return [3, 4];
                        if (!this.Application.Solver.UpdateDataPathObject(data, dataPath, value))
                            return [3, 4];
                        this.FlagAsUpdated(storageItem, i);
                        updated = true;
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5:
                        if (!updated)
                            return [2, (false)];
                        return [4, this.NotifyChanges(storageItem, notify, dataKey, null, null)];
                    case 6:
                        _a.sent();
                        return [3, 8];
                    case 7: return [2, (false)];
                    case 8: return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.RemoveDataItemLookup = function (dataSource, sector, dataFieldSeek, valueSeek, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var isDataSourceMustache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isDataSourceMustache = this.Application.Parser.IsMustache(dataSource);
                        if (!isDataSourceMustache) return [3, 2];
                        return [4, this.RemoveDataItemLookupMustache(dataSource, sector, dataFieldSeek, valueSeek, notify)];
                    case 1: return [2, (_a.sent())];
                    case 2: return [4, this.RemoveDataItemLookupDataKey(dataSource, sector, dataFieldSeek, valueSeek, notify)];
                    case 3: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoStorage.prototype.RemoveDataItemLookupDataKey = function (dataKey, sector, dataFieldSeek, valueSeek, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, dataPath, storageItem, length_3, removedArray, context, i, data, dataPathSeek, contextItem, dataPathSeekValue, i, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.EnsureDataKeyReady(dataKey, sector)];
                    case 1:
                        cacheIndex = _a.sent();
                        if (cacheIndex == null)
                            return [2, (false)];
                        dataPath = (typeof dataFieldSeek === "string") ? [dataFieldSeek] : dataFieldSeek;
                        storageItem = this.GetCacheDataItem(cacheIndex);
                        if (!storageItem.IsTypeArray) return [3, 7];
                        length_3 = storageItem.Data.length;
                        removedArray = [];
                        context = new DrapoContext();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < length_3)) return [3, 5];
                        data = storageItem.Data[i];
                        dataPathSeek = this.Application.Solver.CreateDataPath(dataKey, dataPath);
                        contextItem = context.Create(data, null, null, dataKey, dataKey, null, i);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, contextItem, dataPathSeek)];
                    case 3:
                        dataPathSeekValue = _a.sent();
                        if (!this.Application.Solver.IsEqualString(valueSeek, dataPathSeekValue))
                            return [3, 4];
                        removedArray.push(i);
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5:
                        for (i = removedArray.length - 1; i >= 0; i--) {
                            index = removedArray[i];
                            this.DeleteDataItemIndex(storageItem, index);
                        }
                        return [4, this.NotifyChanges(storageItem, ((notify) && (removedArray.length > 0)), dataKey, null, null)];
                    case 6:
                        _a.sent();
                        return [3, 8];
                    case 7: return [2, (false)];
                    case 8: return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.RemoveDataItemLookupMustache = function (dataSource, sector, dataFieldSeek, valueSeek, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var dataSourcePath, dataKey, cacheIndex, storageItem, dataBase, dataPath, length, removedArray, context, i, data, dataPathSeekValue, i, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataSourcePath = this.Application.Parser.ParseMustache(dataSource);
                        dataKey = this.Application.Solver.ResolveDataKey(dataSourcePath);
                        return [4, this.EnsureDataKeyReady(dataKey, sector)];
                    case 1:
                        cacheIndex = _a.sent();
                        if (cacheIndex == null)
                            return [2, (false)];
                        storageItem = this.GetCacheStorageItem(dataKey, sector, null);
                        if (storageItem === null)
                            return [2, (false)];
                        dataBase = this.Application.Solver.ResolveItemStoragePathObject(storageItem, dataSourcePath);
                        if ((dataBase == null) || (dataBase.length == 0))
                            return [2, (false)];
                        dataPath = (typeof dataFieldSeek === "string") ? [dataKey, dataFieldSeek] : this.Application.Solver.CreateDataPath(dataKey, dataFieldSeek);
                        length = dataBase.length;
                        removedArray = [];
                        context = new DrapoContext();
                        for (i = 0; i < length; i++) {
                            data = dataBase[i];
                            dataPathSeekValue = this.Application.Solver.ResolveDataObjectPathObject(data, dataPath);
                            if (!this.Application.Solver.IsEqualString(valueSeek, dataPathSeekValue))
                                continue;
                            removedArray.push(i);
                        }
                        for (i = removedArray.length - 1; i >= 0; i--) {
                            index = removedArray[i];
                            dataBase.splice(index, 1);
                        }
                        return [4, this.NotifyChanges(storageItem, ((notify) && (removedArray.length > 0)), dataKey, null, null)];
                    case 2:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.CreatePath = function (data) {
        return ([data]);
    };
    DrapoStorage.prototype.CreateDataPath = function (dataKey, dataField) {
        return ([dataKey, dataField]);
    };
    DrapoStorage.prototype.LoadDataDelayedAndNotify = function () {
        return __awaiter(this, void 0, void 0, function () {
            var dataKeys, i, dataKey, dataFields, item, cacheIndex, cacheItem, dataField, _a, _b, _c, _i, dataField;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (this._isDelayTriggered)
                            return [2];
                        if (!this.Application.Observer.HasDelayKeys())
                            return [2];
                        this._isDelayTriggered = true;
                        dataKeys = this.Application.Observer.GetDelayKeys();
                        i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(i < dataKeys.length)) return [3, 10];
                        dataKey = dataKeys[i];
                        dataFields = this.Application.Observer.GetDelayFields(dataKey);
                        if (dataFields.length == 0)
                            return [3, 9];
                        return [4, this.RetrieveDataItemInternal(dataKey, null, true, dataFields)];
                    case 2:
                        item = _d.sent();
                        if ((item == null) || (item.Data == null))
                            return [3, 9];
                        cacheIndex = this.GetCacheKeyIndex(dataKey, null);
                        if (!(cacheIndex == null)) return [3, 4];
                        return [4, this.AddCacheData(dataKey, null, item)];
                    case 3:
                        _d.sent();
                        return [3, 5];
                    case 4:
                        cacheItem = this.GetCacheDataItem(cacheIndex);
                        for (dataField in item.Data)
                            cacheItem.Data[dataField] = item.Data[dataField];
                        _d.label = 5;
                    case 5:
                        _a = item.Data;
                        _b = [];
                        for (_c in _a)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 6;
                    case 6:
                        if (!(_i < _b.length)) return [3, 9];
                        _c = _b[_i];
                        if (!(_c in _a)) return [3, 8];
                        dataField = _c;
                        return [4, this.Application.Observer.NotifyDelay(dataKey, [dataField])];
                    case 7:
                        _d.sent();
                        _d.label = 8;
                    case 8:
                        _i++;
                        return [3, 6];
                    case 9:
                        i++;
                        return [3, 1];
                    case 10:
                        this._isDelayTriggered = false;
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItem = function (dataKey, sector, canLoadDelay, dataDelayFields) {
        if (canLoadDelay === void 0) { canLoadDelay = false; }
        if (dataDelayFields === void 0) { dataDelayFields = null; }
        return __awaiter(this, void 0, void 0, function () {
            var cacheIndex, item, executionContext, _a, executionContext, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (cacheIndex != null)
                            return [2, (this.GetCacheDataItem(cacheIndex))];
                        return [4, this.RetrieveDataItemInternal(dataKey, sector, canLoadDelay, dataDelayFields)];
                    case 1:
                        item = _c.sent();
                        if (item === null)
                            return [2, (null)];
                        if (!item.OnLoad) return [3, 4];
                        executionContext = this.Application.FunctionHandler.CreateExecutionContext();
                        _a = executionContext;
                        return [4, this.Application.Debugger.HasBreakpoint(sector, dataKey)];
                    case 2:
                        _a.HasBreakpoint = _c.sent();
                        executionContext.Sector = sector;
                        executionContext.DataKey = dataKey;
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(sector, item.Element, item.OnLoad, executionContext)];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        if (!item.CanCache) return [3, 7];
                        return [4, this.AddCacheData(dataKey, item.Sector, item)];
                    case 5:
                        _c.sent();
                        if (!(item.OnAfterCached != null)) return [3, 7];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(sector, item.Element, item.OnAfterCached)];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7:
                        if (!item.OnAfterLoad) return [3, 10];
                        executionContext = this.Application.FunctionHandler.CreateExecutionContext();
                        _b = executionContext;
                        return [4, this.Application.Debugger.HasBreakpoint(sector, dataKey)];
                    case 8:
                        _b.HasBreakpoint = _c.sent();
                        executionContext.Sector = sector;
                        executionContext.DataKey = dataKey;
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(sector, item.Element, item.OnAfterLoad, executionContext)];
                    case 9:
                        _c.sent();
                        _c.label = 10;
                    case 10: return [4, this.Application.Debugger.NotifyStorage(dataKey)];
                    case 11:
                        _c.sent();
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternal = function (dataKey, sector, canLoadDelay, dataDelayFields) {
        if (canLoadDelay === void 0) { canLoadDelay = false; }
        if (dataDelayFields === void 0) { dataDelayFields = null; }
        return __awaiter(this, void 0, void 0, function () {
            var itemSystem, el, dataUrlGet, isDelay, dataUrlParameters, dataUrlSet, dataPostGet, isLazy, dataStart, dataIncrement, isUnitOfWork, cookieName, isCookieChange, userConfig, isToken, type, access, value, dataSector, groupsAttribute, groups, pipes, channels, canCache, cacheKeys, onLoad, onAfterLoad, onAfterContainerLoad, onBeforeContainerUnload, onAfterCached, onNotify, headersGet, headersSet, headersResponse, data, increment, isFull, pollingKey, pollingTimespan, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItemInternalSystem(dataKey)];
                    case 1:
                        itemSystem = _a.sent();
                        if (itemSystem !== null)
                            return [2, (itemSystem)];
                        el = this.Application.Searcher.FindDataKey(dataKey, sector);
                        if (!(el == null)) return [3, 3];
                        return [4, this.Application.ExceptionHandler.HandleError('Storage - RetrieveDataItemInternal - Invalid DataKey: {0}', dataKey)];
                    case 2:
                        _a.sent();
                        return [2, (null)];
                    case 3:
                        dataUrlGet = el.getAttribute('d-dataUrlGet');
                        isDelay = el.getAttribute('d-dataDelay') === 'true';
                        if ((isDelay) && (!canLoadDelay))
                            return [2, (null)];
                        dataUrlParameters = el.getAttribute('d-dataUrlParameters');
                        if ((dataUrlParameters == null) || (dataUrlParameters == ''))
                            dataUrlParameters = 'optional';
                        dataUrlSet = el.getAttribute('d-dataUrlSet');
                        dataPostGet = el.getAttribute('d-dataPostGet');
                        isLazy = el.getAttribute('d-dataLazy') === 'true';
                        dataStart = el.getAttribute('d-dataLazyStart');
                        dataIncrement = el.getAttribute('d-dataLazyIncrement');
                        isUnitOfWork = el.getAttribute('d-dataUnitOfWork') === 'true';
                        cookieName = el.getAttribute('d-dataCookieGet');
                        isCookieChange = el.getAttribute('d-dataCookieChange') === 'true';
                        userConfig = el.getAttribute('d-dataUserConfig');
                        isToken = el.getAttribute('d-dataToken') === 'true';
                        type = el.getAttribute('d-dataType');
                        access = el.getAttribute('d-dataAccess');
                        value = el.getAttribute('d-dataValue');
                        dataSector = this.Application.Document.GetSector(el);
                        groupsAttribute = el.getAttribute('d-dataGroups');
                        groups = ((groupsAttribute == null) || (groupsAttribute == '')) ? null : this.Application.Parser.ParsePipes(groupsAttribute);
                        pipes = this.Application.Parser.ParsePipes(el.getAttribute('d-dataPipes'));
                        return [4, this.ParseChannels(sector, el.getAttribute('d-dataChannels'))];
                    case 4:
                        channels = _a.sent();
                        canCache = this.Application.Parser.ParseBoolean(el.getAttribute('d-dataCache'), true);
                        cacheKeys = this.Application.Parser.ParsePipes(el.getAttribute('d-dataCacheKeys'));
                        onLoad = type === 'function' ? value : null;
                        onAfterLoad = el.getAttribute('d-dataOnAfterLoad');
                        onAfterContainerLoad = el.getAttribute('d-dataOnAfterContainerLoad');
                        onBeforeContainerUnload = el.getAttribute('d-dataOnBeforeContainerUnLoad');
                        onAfterCached = el.getAttribute('d-dataOnAfterCached');
                        onNotify = el.getAttribute('d-dataOnNotify');
                        headersGet = this.ExtractDataHeaderGet(el);
                        headersSet = this.ExtractDataHeaderSet(el);
                        headersResponse = ((isCookieChange) || (type === 'file')) ? [] : null;
                        return [4, this.RetrieveDataKey(dataKey, sector, el, dataUrlGet, dataUrlParameters, dataPostGet, dataStart, dataIncrement, isDelay, dataDelayFields, cookieName, type, isToken, cacheKeys, channels, headersGet, headersResponse)];
                    case 5:
                        data = _a.sent();
                        if (data == null) {
                            return [2, (null)];
                        }
                        if (type == null) {
                            if (data.length)
                                type = 'array';
                            else
                                type = 'object';
                        }
                        increment = this.Application.Parser.GetStringAsNumber(dataIncrement);
                        isFull = ((isLazy) && (data.length < increment)) ? true : false;
                        return [4, this.ResolveValueMustaches(dataKey, sector, el.getAttribute('d-dataPollingKey'))];
                    case 6:
                        pollingKey = _a.sent();
                        return [4, this.ResolveValueMustachesAsNumber(dataKey, sector, el.getAttribute('d-dataPollingTimespan'))];
                    case 7:
                        pollingTimespan = _a.sent();
                        item = new DrapoStorageItem(dataKey, type, access, el, data, dataUrlGet, dataUrlSet, dataUrlParameters, dataPostGet, this.Application.Parser.GetStringAsNumber(dataStart), increment, isLazy, isFull, isUnitOfWork, isDelay, cookieName, isCookieChange, userConfig, isToken, dataSector, groups, pipes, channels, canCache, cacheKeys, onLoad, onAfterLoad, onAfterContainerLoad, onBeforeContainerUnload, onAfterCached, onNotify, headersGet, headersSet, pollingKey, pollingTimespan);
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveValueMustaches = function (dataKey, sector, value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (value == null)
                            return [2, (null)];
                        return [4, this.ResolveDataUrlMustaches(dataKey, sector, value, null, null)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveValueMustachesAsNumber = function (dataKey, sector, value) {
        return __awaiter(this, void 0, void 0, function () {
            var valueResolved, valueAsNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (value == null)
                            return [2, (null)];
                        return [4, this.ResolveDataUrlMustaches(dataKey, sector, value, null, null)];
                    case 1:
                        valueResolved = _a.sent();
                        valueAsNumber = this.Application.Parser.ParseNumber(valueResolved, null);
                        return [2, (valueAsNumber)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKey = function (dataKey, sector, el, dataUrlGet, dataUrlParameters, dataPostGet, dataStart, dataIncrement, isDelay, dataDelayFields, cookieName, type, isToken, cacheKeys, channels, headersGet, headersResponse) {
        return __awaiter(this, void 0, void 0, function () {
            var dataChannels, dataConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (channels !== null) {
                            dataChannels = this.RetrieveDataChannels(channels);
                            if (dataChannels != null)
                                return [2, (dataChannels)];
                        }
                        if (!(dataUrlGet != null)) return [3, 2];
                        return [4, this.RetrieveDataKeyUrl(dataKey, sector, dataUrlGet, dataUrlParameters, dataPostGet, dataStart, dataIncrement, type, isToken, cacheKeys, isDelay, dataDelayFields, headersGet, headersResponse)];
                    case 1: return [2, (_a.sent())];
                    case 2:
                        if (cookieName != null)
                            return [2, (this.RetrieveDataKeyCookie(cookieName))];
                        if (!(type != null)) return [3, 4];
                        return [4, this.RetrieveDataKeyInitialize(dataKey, sector, type, el)];
                    case 3: return [2, (_a.sent())];
                    case 4:
                        dataConfig = el.getAttribute('d-dataConfigGet');
                        if (!(dataConfig != null)) return [3, 6];
                        return [4, this.RetrieveDataKeyConfig(dataConfig)];
                    case 5: return [2, (_a.sent())];
                    case 6: return [2, (null)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyUrl = function (dataKey, sector, dataUrlGet, dataUrlParameters, dataPostGet, dataStart, dataIncrement, type, isToken, cacheKeys, isDelay, dataDelayFields, headersGet, headersResponse) {
        if (cacheKeys === void 0) { cacheKeys = null; }
        if (isDelay === void 0) { isDelay = false; }
        if (dataDelayFields === void 0) { dataDelayFields = null; }
        if (headersGet === void 0) { headersGet = null; }
        if (headersResponse === void 0) { headersResponse = null; }
        return __awaiter(this, void 0, void 0, function () {
            var url, cachedData, cachedData, objectCachedData, changes, verb, data, contentType, headers, dataPostGetKey, _a, item, dataResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = dataUrlGet;
                        if (!((false) && (isToken) && (!this.Application.Server.HasToken()))) return [3, 2];
                        return [4, this.Application.Document.RequestAuthorization(dataKey, 'notify')];
                    case 1:
                        _b.sent();
                        return [2, ([])];
                    case 2:
                        if (!isDelay) {
                            cachedData = this.Application.CacheHandler.GetCachedData(cacheKeys, sector, dataKey);
                            if (cachedData != null)
                                return [2, (cachedData)];
                        }
                        if ((isDelay) && (dataDelayFields != null) && (dataDelayFields.length === 1)) {
                            cachedData = this.Application.CacheHandler.GetCachedDataPath(cacheKeys, sector, dataKey, [dataKey, dataDelayFields[0]]);
                            if (cachedData != null) {
                                objectCachedData = {};
                                objectCachedData[dataDelayFields[0]] = cachedData;
                                return [2, (objectCachedData)];
                            }
                        }
                        if (dataStart != null)
                            url = url.replace('{{start}}', dataStart);
                        if (dataIncrement != null)
                            url = url.replace('{{increment}}', dataIncrement);
                        changes = [];
                        return [4, this.ResolveDataUrlMustaches(dataKey, sector, url, null, changes)];
                    case 3:
                        url = _b.sent();
                        if ((dataUrlParameters === 'required') && (this.HasChangeNullOrEmpty(changes)))
                            return [2, ([])];
                        verb = "GET";
                        data = null;
                        contentType = null;
                        headers = [];
                        if (!isDelay) return [3, 4];
                        if (dataDelayFields === null)
                            return [2, ([])];
                        verb = "POST";
                        data = this.Application.Serializer.Serialize(dataDelayFields);
                        contentType = this.CONTENT_TYPE_JSON;
                        return [3, 11];
                    case 4:
                        if (!(dataPostGet != null)) return [3, 9];
                        verb = "POST";
                        if (!this.Application.Parser.IsMustache(dataPostGet)) return [3, 6];
                        return [4, this.ResolveMustaches(sector, dataPostGet)];
                    case 5:
                        _a = _b.sent();
                        return [3, 7];
                    case 6:
                        _a = dataPostGet;
                        _b.label = 7;
                    case 7:
                        dataPostGetKey = _a;
                        return [4, this.RetrieveDataItem(dataPostGetKey, sector)];
                    case 8:
                        item = _b.sent();
                        if (item !== null)
                            data = this.Application.Serializer.Serialize(item.Data);
                        contentType = this.CONTENT_TYPE_JSON;
                        this.Application.Observer.SubscribeStorage(dataPostGetKey, null, dataKey);
                        return [3, 11];
                    case 9: return [4, this.ResolveDataHeaders(dataKey, sector, headersGet, null)];
                    case 10:
                        headers = _b.sent();
                        _b.label = 11;
                    case 11:
                        dataResponse = null;
                        if (!(type === 'file')) return [3, 13];
                        return [4, this.Application.Server.GetFile(url, verb, data, contentType, dataKey, headers, headersResponse)];
                    case 12:
                        dataResponse = _b.sent();
                        return [3, 15];
                    case 13: return [4, this.Application.Server.GetJSON(url, verb, data, contentType, dataKey, headers, headersResponse)];
                    case 14:
                        dataResponse = _b.sent();
                        _b.label = 15;
                    case 15:
                        this.Application.CacheHandler.AppendCacheData(cacheKeys, sector, dataKey, dataResponse, isDelay);
                        return [2, (dataResponse)];
                }
            });
        });
    };
    DrapoStorage.prototype.ParseChannels = function (sector, channels) {
        return __awaiter(this, void 0, void 0, function () {
            var channelsResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (channels == null)
                            return [2, (null)];
                        return [4, this.ResolveDataUrlMustaches(null, sector, channels, null)];
                    case 1:
                        channelsResolved = _a.sent();
                        return [2, (this.Application.Parser.ParsePipes(channelsResolved))];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataChannels = function (channels) {
        if (channels == null)
            return (null);
        for (var i = 0; i < channels.length; i++) {
            var dataChannel = this.RetrieveDataChannel(channels[i]);
            if (dataChannel !== null)
                return (dataChannel);
        }
        return (null);
    };
    DrapoStorage.prototype.ContainsDataChannel = function (dataItem, channel) {
        if (dataItem.Channels === null)
            return (false);
        for (var i = 0; i < dataItem.Channels.length; i++) {
            if (channel === dataItem.Channels[i])
                return (true);
        }
        return (false);
    };
    DrapoStorage.prototype.RetrieveDataChannel = function (channel) {
        for (var i = 0; i < this._cacheItems.length; i++) {
            var dataItem = this._cacheItems[i];
            if (dataItem == null)
                continue;
            if (this.ContainsDataChannel(dataItem, channel))
                return (this.Application.Solver.Clone(dataItem.Data, true));
        }
        return (null);
    };
    DrapoStorage.prototype.PropagateDataChannels = function (dataItem) {
        return __awaiter(this, void 0, void 0, function () {
            var i, channel, j, dataItemCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (dataItem.Channels === null)
                            return [2, (false)];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < dataItem.Channels.length)) return [3, 6];
                        channel = dataItem.Channels[i];
                        j = 0;
                        _a.label = 2;
                    case 2:
                        if (!(j < this._cacheItems.length)) return [3, 5];
                        dataItemCurrent = this._cacheItems[j];
                        if (dataItemCurrent == null)
                            return [3, 4];
                        if (!this.ContainsDataChannel(dataItemCurrent, channel))
                            return [3, 4];
                        if (dataItem.Data === dataItemCurrent.Data)
                            return [3, 4];
                        return [4, this.Application.Storage.UpdateData(dataItemCurrent.DataKey, dataItemCurrent.Sector, dataItem.Data, true)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        j++;
                        return [3, 2];
                    case 5:
                        i++;
                        return [3, 1];
                    case 6: return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.HasChangeNullOrEmpty = function (changes) {
        for (var i = 0; i < changes.length; i++) {
            var change = changes[i];
            var value = change[1];
            if ((value === null) || (value === ''))
                return (true);
        }
        return (false);
    };
    DrapoStorage.prototype.ExtractDataHeaderGet = function (el) {
        var attributes = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var attributeProperty = this.ExtractDataHeaderGetProperty(attribute.nodeName);
            if (attributeProperty != null)
                attributes.push([attributeProperty, attribute.nodeValue]);
        }
        return (attributes);
    };
    DrapoStorage.prototype.ExtractDataHeaderGetProperty = function (property) {
        var parse = this.Application.Parser.ParseProperty(property);
        if (parse.length != 3)
            return (null);
        if (parse[0] != 'd')
            return (null);
        if (parse[1].toLowerCase() != 'dataheaderget')
            return (null);
        return (parse[2]);
    };
    DrapoStorage.prototype.ExtractDataHeaderSet = function (el) {
        var attributes = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var attributeProperty = this.ExtractDataHeaderSetProperty(attribute.nodeName);
            if (attributeProperty != null)
                attributes.push([attributeProperty, attribute.nodeValue]);
        }
        return (attributes);
    };
    DrapoStorage.prototype.ExtractDataHeaderSetProperty = function (property) {
        var parse = this.Application.Parser.ParseProperty(property);
        if (parse.length != 3)
            return (null);
        if (parse[0] != 'd')
            return (null);
        if (parse[1].toLowerCase() != 'dataheaderset')
            return (null);
        return (parse[2]);
    };
    DrapoStorage.prototype.ResolveDataUrlMustaches = function (dataKey, sector, url, executionContext, changes) {
        if (changes === void 0) { changes = null; }
        return __awaiter(this, void 0, void 0, function () {
            var mustaches, i, mustache, mustacheParts, mustacheDataKey, change, isSameDataKey, _a, mustacheData, mustacheDataEncoded, mustacheDataFields;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mustaches = this.Application.Parser.ParseMustaches(url);
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < mustaches.length)) return [3, 5];
                        mustache = mustaches[i];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        mustacheDataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        change = [mustache, null];
                        if (changes != null)
                            changes.push(change);
                        if (!this.IsDataKey(mustacheDataKey, sector))
                            return [3, 4];
                        isSameDataKey = dataKey === mustacheDataKey;
                        _a = (!isSameDataKey);
                        if (!_a) return [3, 3];
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(mustacheDataKey, sector, mustacheParts)];
                    case 2:
                        _a = (!(_b.sent()));
                        _b.label = 3;
                    case 3:
                        if (_a)
                            return [3, 4];
                        mustacheData = this.Application.Storage.GetDataKeyField(mustacheDataKey, sector, mustacheParts, executionContext);
                        if ((!isSameDataKey) && (mustacheData == null))
                            return [3, 4];
                        mustacheDataEncoded = this.Application.Server.EnsureUrlComponentEncoded(mustacheData);
                        url = url.replace(mustache, mustacheDataEncoded);
                        change[1] = mustacheDataEncoded;
                        if ((!isSameDataKey) && (dataKey !== null)) {
                            mustacheDataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                            this.Application.Observer.SubscribeStorage(mustacheDataKey, mustacheDataFields, dataKey);
                        }
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3, 1];
                    case 5: return [2, (url)];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveDataHeaders = function (dataKey, sector, headers, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var headersData, isSectorActive, i, header, headerValue, headerDataKey, data, headerMustacheParts, headerDataFields, dataItem, dataSerialized, dataEncoded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headersData = [];
                        if (headers === null)
                            return [2, (headersData)];
                        isSectorActive = (executionContext === null) || (!executionContext.HasSectorContainer(sector));
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < headers.length)) return [3, 7];
                        header = headers[i];
                        headerValue = header[1];
                        headerDataKey = null;
                        data = null;
                        if (!!this.Application.Parser.IsMustache(headerValue)) return [3, 3];
                        headerDataKey = headerValue;
                        return [4, this.RetrieveData(headerDataKey, sector, executionContext)];
                    case 2:
                        data = _a.sent();
                        if (isSectorActive)
                            this.Application.Observer.SubscribeStorage(headerDataKey, null, dataKey);
                        return [3, 5];
                    case 3:
                        headerMustacheParts = this.Application.Parser.ParseMustache(headerValue);
                        headerDataKey = this.Application.Solver.ResolveDataKey(headerMustacheParts);
                        headerDataFields = this.Application.Solver.ResolveDataFields(headerMustacheParts);
                        return [4, this.RetrieveDataItem(headerDataKey, sector)];
                    case 4:
                        dataItem = _a.sent();
                        data = this.Application.Solver.ResolveItemStoragePathObject(dataItem, headerMustacheParts);
                        if (isSectorActive)
                            this.Application.Observer.SubscribeStorage(headerDataKey, headerDataFields, dataKey);
                        _a.label = 5;
                    case 5:
                        if (data == null)
                            return [3, 6];
                        dataSerialized = this.Application.Serializer.Serialize(data);
                        dataEncoded = this.Application.Serializer.EncodeHeaderFieldValue(dataSerialized);
                        headersData.push([header[0], dataEncoded]);
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3, 1];
                    case 7: return [2, (headersData)];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveMustachesRecursive = function (sector, data) {
        return __awaiter(this, void 0, void 0, function () {
            var dataResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveMustaches(sector, data, true)];
                    case 1:
                        dataResolved = _a.sent();
                        if (dataResolved === data)
                            return [2, (dataResolved)];
                        return [4, this.ResolveMustachesRecursive(sector, dataResolved)];
                    case 2: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveMustaches = function (sector, data, canSubscribe) {
        if (canSubscribe === void 0) { canSubscribe = false; }
        return __awaiter(this, void 0, void 0, function () {
            var mustaches, i, mustache, mustacheParts, dataSector, mustacheDataKey, mustacheDataFields, mustacheData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mustaches = this.Application.Parser.ParseMustaches(data);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < mustaches.length)) return [3, 4];
                        mustache = mustaches[i];
                        mustacheParts = this.Application.Parser.ParseMustache(mustache);
                        dataSector = this.Application.Solver.ResolveSector(mustacheParts, sector);
                        mustacheDataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        if (!this.IsDataKey(mustacheDataKey, dataSector))
                            return [3, 3];
                        mustacheDataFields = this.Application.Solver.ResolveDataFields(mustacheParts);
                        return [4, this.Application.Storage.EnsureDataKeyFieldReady(mustacheDataKey, dataSector, mustacheParts)];
                    case 2:
                        if (!(_a.sent())) {
                            if (!canSubscribe)
                                return [3, 3];
                            this.Application.Observer.SubscribeDelay(null, mustacheDataKey, this.Application.Solver.ResolveDataFields(mustacheParts));
                            return [2, (data)];
                        }
                        mustacheData = this.Application.Storage.GetDataKeyField(mustacheDataKey, dataSector, mustacheParts);
                        if (mustacheData == null)
                            return [3, 3];
                        data = data.replace(mustache, mustacheData);
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2, (data)];
                }
            });
        });
    };
    DrapoStorage.prototype.ReactivateDataUrlMustache = function (dataKey, sector, item) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (item.UrlGet == null)
                            return [2];
                        return [4, this.ResolveDataUrlMustaches(dataKey, sector, item.UrlGet, null)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitialize = function (dataKey, sector, type, el) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (type == 'object')
                            return [2, (this.RetrieveDataKeyInitializeObject(el))];
                        if (!(type == 'array')) return [3, 2];
                        return [4, this.RetrieveDataKeyInitializeArray(el, sector, dataKey)];
                    case 1: return [2, (_a.sent())];
                    case 2:
                        if (type == 'value')
                            return [2, (this.RetrieveDataKeyInitializeValue(el))];
                        if (!(type == 'mapping')) return [3, 4];
                        return [4, this.RetrieveDataKeyInitializeMapping(el, sector, dataKey)];
                    case 3: return [2, (_a.sent())];
                    case 4:
                        if (!(type == 'pointer')) return [3, 6];
                        return [4, this.RetrieveDataKeyInitializePointer(el, sector, dataKey)];
                    case 5: return [2, (_a.sent())];
                    case 6:
                        if (!(type == 'function')) return [3, 8];
                        return [4, this.RetrieveDataKeyInitializeFunction(dataKey, el)];
                    case 7: return [2, (_a.sent())];
                    case 8:
                        if (type == 'querystring')
                            return [2, (this.RetrieveDataKeyInitializeQueryString(el, sector, dataKey))];
                        if (type == 'query')
                            return [2, (this.RetrieveDataKeyInitializeQuery(el, sector, dataKey))];
                        if (type == 'switch')
                            return [2, (this.RetrieveDataKeyInitializeSwitch(el, sector, dataKey))];
                        if (type == 'parent')
                            return [2, (this.RetrieveDataKeyInitializeParent(el, sector))];
                        return [2, (null)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeValue = function (el) {
        var dataValue = el.getAttribute('d-dataValue');
        if (dataValue != null)
            return (dataValue);
        return ('');
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeArray = function (el, sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var dataValue, mustacheParts, dataKeyReference, dataValueObject, dataArray, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataValue = el.getAttribute('d-dataValue');
                        if (dataValue == null)
                            return [2, ([])];
                        if (!this.Application.Parser.IsMustache(dataValue)) return [3, 2];
                        mustacheParts = this.Application.Parser.ParseMustache(dataValue);
                        dataKeyReference = this.Application.Solver.ResolveDataKey(mustacheParts);
                        this.Application.Observer.SubscribeStorage(dataKeyReference, null, dataKey, DrapoStorageLinkType.Pointer);
                        this.Application.Observer.SubscribeStorage(dataKey, null, dataKeyReference, DrapoStorageLinkType.Pointer);
                        return [4, this.RetrieveDataValue(sector, dataValue)];
                    case 1:
                        dataValueObject = _a.sent();
                        dataArray = [];
                        dataArray.push(dataValueObject);
                        return [2, (dataArray)];
                    case 2:
                        data = this.Application.Parser.ParseIterator(dataValue);
                        if (data.length)
                            return [2, (data)];
                        return [2, ([data])];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeMapping = function (el, sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var dataValue, isReference, dataValueResolved, dataReference, isSubscribe, storageItemMapped, data, dataMappingField, dataMappingFieldResolved, dataPath, dataPathFull, dataMappingSearchField, dataMappingSearchValue, dataMappingSearchHierarchyField, dataPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataValue = el.getAttribute('d-dataValue');
                        if (dataValue == null)
                            return [2, ([])];
                        isReference = el.getAttribute('d-dataLoadType') === 'reference';
                        dataValueResolved = dataValue;
                        if (!this.Application.Parser.IsMustache(dataValue)) return [3, 2];
                        return [4, this.ResolveMustaches(sector, dataValue)];
                    case 1:
                        dataValueResolved = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!isReference) return [3, 4];
                        el.setAttribute('d-dataValue', dataValueResolved);
                        return [4, this.RetrieveDataValue(sector, dataValueResolved)];
                    case 3:
                        dataReference = _a.sent();
                        return [2, (this.Application.Solver.Clone(dataReference, true))];
                    case 4:
                        isSubscribe = el.getAttribute('d-dataMappingSubscribe') === 'true';
                        if (isSubscribe)
                            this.Application.Observer.SubscribeStorage(dataValueResolved, null, dataKey, DrapoStorageLinkType.Reload);
                        return [4, this.RetrieveDataItem(dataValueResolved, sector)];
                    case 5:
                        storageItemMapped = _a.sent();
                        if (storageItemMapped === null)
                            return [2, (null)];
                        data = storageItemMapped.Data;
                        dataMappingField = el.getAttribute('d-dataMappingField');
                        if (!((dataMappingField != null) && (dataMappingField != ''))) return [3, 7];
                        return [4, this.ResolveMustaches(sector, dataMappingField)];
                    case 6:
                        dataMappingFieldResolved = _a.sent();
                        if ((dataMappingFieldResolved != null) && (dataMappingFieldResolved != '')) {
                            dataPath = this.Application.Parser.ParsePath(dataMappingFieldResolved);
                            dataPathFull = this.Application.Solver.CreateDataPath(dataValueResolved, dataPath);
                            data = this.Application.Solver.ResolveDataObjectPathObject(data, dataPathFull);
                            if (data === null)
                                return [2, (null)];
                        }
                        _a.label = 7;
                    case 7:
                        dataMappingSearchField = el.getAttribute('d-dataMappingSearchField');
                        dataMappingSearchValue = el.getAttribute('d-dataMappingSearchValue');
                        dataMappingSearchHierarchyField = el.getAttribute('d-dataMappingSearchHierarchyField');
                        if (!((dataMappingSearchField != null) && (dataMappingSearchField != '') && (dataMappingSearchValue != null) && (dataMappingSearchValue != ''))) return [3, 10];
                        if (!this.Application.Parser.IsMustache(dataMappingSearchValue)) return [3, 9];
                        dataPath = this.Application.Parser.ParseMustache(dataMappingSearchValue);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, null, dataPath)];
                    case 8:
                        dataMappingSearchValue = _a.sent();
                        _a.label = 9;
                    case 9:
                        data = this.Application.Solver.ResolveDataObjectLookupHierarchy(data, dataMappingSearchField, dataMappingSearchValue, dataMappingSearchHierarchyField);
                        _a.label = 10;
                    case 10: return [2, (this.Application.Solver.Clone(data, true))];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializePointer = function (el, sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var dataValue, dataMustache, dataMustacheResolved, mustacheParts, mustacheDataKey, dataReference;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataValue = el.getAttribute('d-dataValue');
                        if (!(dataValue == null)) return [3, 2];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoStorage - value of a pointer cant be null - {0}', dataKey)];
                    case 1:
                        _a.sent();
                        return [2, ([])];
                    case 2:
                        if (!!this.Application.Parser.IsMustache(dataValue)) return [3, 4];
                        return [4, this.Application.ExceptionHandler.HandleError('DrapoStorage - value of a pointer must be a mustache - {0}', dataKey)];
                    case 3:
                        _a.sent();
                        return [2, ([])];
                    case 4:
                        dataMustache = dataValue;
                        _a.label = 5;
                    case 5:
                        if (!this.Application.Parser.IsMustache(dataMustache)) return [3, 7];
                        return [4, this.ResolveMustaches(sector, dataMustache)];
                    case 6:
                        dataMustacheResolved = _a.sent();
                        if ((dataMustacheResolved == null) || (dataMustacheResolved === ''))
                            return [3, 7];
                        if (!this.Application.Parser.IsMustache(dataMustacheResolved))
                            return [3, 7];
                        dataMustache = dataMustacheResolved;
                        return [3, 5];
                    case 7:
                        mustacheParts = this.Application.Parser.ParseMustache(dataMustache);
                        mustacheDataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        this.Application.Observer.SubscribeStorage(mustacheDataKey, null, dataKey, DrapoStorageLinkType.Pointer);
                        this.Application.Observer.SubscribeStorage(dataKey, null, mustacheDataKey, DrapoStorageLinkType.Pointer);
                        return [4, this.RetrieveDataValue(sector, dataMustache)];
                    case 8:
                        dataReference = _a.sent();
                        return [2, (dataReference)];
                }
            });
        });
    };
    DrapoStorage.prototype.UpdatePointerStorageItems = function (dataKey, dataReferenceKey) {
        return __awaiter(this, void 0, void 0, function () {
            var storageItems, storageItem, storageReferenceItems, storageReferenceItem, storageItemLoaded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        storageItems = this.Application.Storage.RetrieveStorageItemsCached(null, dataKey);
                        if (storageItems.length == 0)
                            return [2];
                        storageItem = storageItems[0];
                        storageReferenceItems = this.Application.Storage.RetrieveStorageItemsCached(null, dataReferenceKey);
                        if (storageReferenceItems.length == 0)
                            return [2];
                        storageReferenceItem = storageReferenceItems[0];
                        if (storageItem.HasChanges)
                            storageReferenceItem.HasChanges = true;
                        if (storageReferenceItem.Type !== 'pointer')
                            return [2];
                        return [4, this.RetrieveDataItemInternal(dataReferenceKey, storageReferenceItem.Sector)];
                    case 1:
                        storageItemLoaded = _a.sent();
                        if (storageItemLoaded === null)
                            return [2];
                        storageReferenceItem.Data = storageItemLoaded.Data;
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeFunction = function (dataKey, el) {
        return __awaiter(this, void 0, void 0, function () {
            var dataValue, isToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataValue = el.getAttribute('d-dataValue');
                        if (dataValue == null)
                            return [2, ([])];
                        isToken = el.getAttribute('d-dataToken') === 'true';
                        if (!isToken) return [3, 2];
                        if (!((!this.Application.Server.HasToken()) && (this.Application.Observer.HasPendingAuthorization()))) return [3, 2];
                        return [4, this.Application.Document.RequestAuthorization(dataKey, 'initialize')];
                    case 1:
                        _a.sent();
                        return [2, (null)];
                    case 2: return [2, ([])];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeQueryString = function (el, sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var object, canUseRouter, dictionary, i, keyValuePair, key, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataKeyInitializeMapping(el, sector, dataKey)];
                    case 1:
                        object = _a.sent();
                        if ((object !== null) && (((object.length) && (object.length > 0)) || (Object.keys(object).length > 0)))
                            return [2, (object)];
                        object = {};
                        return [4, this.Application.Router.CanUseRouter()];
                    case 2:
                        canUseRouter = _a.sent();
                        return [4, this.Application.Document.ExtractQueryString(canUseRouter)];
                    case 3:
                        dictionary = _a.sent();
                        for (i = 0; i < dictionary.length; i++) {
                            keyValuePair = dictionary[i];
                            key = keyValuePair[0];
                            value = keyValuePair[1];
                            object[key] = value;
                        }
                        return [2, (object)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeQuery = function (el, sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var dataValue, query, dataQueryArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataValue = el.getAttribute('d-dataValue');
                        if (!(dataValue == null)) return [3, 2];
                        return [4, this.Application.ExceptionHandler.HandleError('There is no d-datavalue in: {0}', dataKey)];
                    case 1:
                        _a.sent();
                        return [2, ([])];
                    case 2:
                        query = this.Application.Parser.ParseQuery(dataValue, el.getAttribute('d-data-query-options'));
                        if (!(query === null)) return [3, 4];
                        return [4, this.Application.ExceptionHandler.HandleError('There is an error in query d-datavalue in: {0}', dataKey)];
                    case 3:
                        _a.sent();
                        return [2, ([])];
                    case 4:
                        if (!(query.Error !== null)) return [3, 6];
                        return [4, this.Application.ExceptionHandler.HandleError('Error parsing the query in: {0}. {1}', dataKey, query.Error)];
                    case 5:
                        _a.sent();
                        return [2, ([])];
                    case 6:
                        if (!(query.Sources.length > 2)) return [3, 8];
                        return [4, this.Application.ExceptionHandler.HandleError('Only support for 2 sources in query: {0}', dataKey)];
                    case 7:
                        _a.sent();
                        return [2, ([])];
                    case 8:
                        dataQueryArray = el.getAttribute('d-dataQueryArray');
                        if (dataQueryArray != null)
                            query.OutputArray = dataQueryArray;
                        return [4, this.ExecuteQuery(sector, dataKey, query)];
                    case 9: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeSwitch = function (el, sector, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var dataValue, switchItems, i, switchItem, conditional, mustaches, j, mustache, mustacheParts, dataKeyConditional, conditionalResolved, dataKeySwitch, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataValue = el.getAttribute('d-dataValue');
                        if (!(dataValue == null)) return [3, 2];
                        return [4, this.Application.ExceptionHandler.HandleError('There is no d-datavalue in: {0}', dataKey)];
                    case 1:
                        _a.sent();
                        return [2, ([])];
                    case 2:
                        switchItems = this.Application.Parser.ParseSwitch(dataValue);
                        this.Application.Observer.UnsubscribeStorage(dataKey);
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < switchItems.length)) return [3, 8];
                        switchItem = switchItems[i];
                        conditional = switchItem[1];
                        if (!(conditional != null)) return [3, 5];
                        mustaches = this.Application.Parser.ParseMustaches(conditional);
                        for (j = 0; j < mustaches.length; j++) {
                            mustache = mustaches[j];
                            mustacheParts = this.Application.Parser.ParseMustache(mustache);
                            dataKeyConditional = this.Application.Solver.ResolveDataKey(mustacheParts);
                            this.Application.Observer.SubscribeStorage(dataKeyConditional, null, dataKey);
                        }
                        return [4, this.Application.Solver.ResolveConditional(conditional, null, sector)];
                    case 4:
                        conditionalResolved = _a.sent();
                        if (!conditionalResolved)
                            return [3, 7];
                        _a.label = 5;
                    case 5:
                        dataKeySwitch = switchItem[0];
                        return [4, this.RetrieveData(dataKeySwitch, sector)];
                    case 6:
                        data = _a.sent();
                        return [2, (data)];
                    case 7:
                        i++;
                        return [3, 3];
                    case 8: return [2, ([])];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeParent = function (el, sector) {
        var dataValue = el.getAttribute('d-dataValue');
        var isReference = el.getAttribute('d-dataLoadType') === 'reference';
        var elParent = el.parentElement;
        var elParentAttributes = null;
        while ((elParent !== null) && ((elParentAttributes = this.Application.Document.GetElementAttributesFilteredPrefix(elParent, dataValue)).length == 0))
            elParent = elParent.parentElement;
        return (this.BuildObject(sector, isReference, elParentAttributes));
    };
    DrapoStorage.prototype.BuildObject = function (sector, isReference, attributes) {
        return __awaiter(this, void 0, void 0, function () {
            var object, hasDelay, i, keyValuePair, key, value, valueResolved, _a, i, keyValuePair, key, value, valueResolved;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        object = {};
                        hasDelay = false;
                        i = 0;
                        _b.label = 1;
                    case 1:
                        if (!(i < attributes.length)) return [3, 6];
                        keyValuePair = attributes[i];
                        key = keyValuePair[0];
                        value = keyValuePair[1];
                        if (!isReference) return [3, 3];
                        return [4, this.ResolveMustachesRecursive(sector, value)];
                    case 2:
                        _a = _b.sent();
                        return [3, 4];
                    case 3:
                        _a = value;
                        _b.label = 4;
                    case 4:
                        valueResolved = _a;
                        if ((isReference) && (this.Application.Parser.IsMustache(valueResolved)))
                            hasDelay = true;
                        object[key] = valueResolved;
                        _b.label = 5;
                    case 5:
                        i++;
                        return [3, 1];
                    case 6:
                        if (!hasDelay) return [3, 11];
                        return [4, this.Application.Storage.LoadDataDelayedAndNotify()];
                    case 7:
                        _b.sent();
                        i = 0;
                        _b.label = 8;
                    case 8:
                        if (!(i < attributes.length)) return [3, 11];
                        keyValuePair = attributes[i];
                        key = keyValuePair[0];
                        value = object[key];
                        if (!this.Application.Parser.IsMustache(value))
                            return [3, 10];
                        return [4, this.ResolveMustachesRecursive(sector, value)];
                    case 9:
                        valueResolved = _b.sent();
                        object[key] = valueResolved;
                        _b.label = 10;
                    case 10:
                        i++;
                        return [3, 8];
                    case 11: return [2, (object)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyInitializeObject = function (el) {
        var dataValue = el.getAttribute('d-dataValue');
        if ((dataValue != null) && (this.Application.Serializer.IsJson(dataValue))) {
            return (this.Application.Serializer.Deserialize(dataValue));
        }
        var object = {};
        var propertyKeys = [];
        var propertyNames = [];
        var propertyValues = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            this.RetrieveDataProperty(object, attribute.nodeName, attribute.nodeValue, propertyKeys, propertyNames, propertyValues);
        }
        return (object);
    };
    DrapoStorage.prototype.RetrieveDataProperty = function (object, property, value, propertyKeys, propertyNames, propertyValues) {
        var parse = this.Application.Parser.ParseProperty(property);
        if (parse.length < 3)
            return (false);
        if (parse[0] != 'd')
            return (false);
        if (parse[1].toLowerCase() != 'dataproperty')
            return (false);
        if (parse.length == 3) {
            object[parse[2]] = value;
            return (true);
        }
        var key = parse[2];
        var nameOrValue = parse[3];
        var index = this.RetrieveDataPropertyKeyIndex(propertyKeys, key);
        if (nameOrValue == 'name') {
            if (index < 0) {
                index = propertyKeys.push(key);
                propertyNames.push(value);
                propertyValues.push(null);
                return (false);
            }
            else {
                propertyNames[index] = value;
                object[value] = propertyValues[index];
                return (true);
            }
        }
        if (nameOrValue == 'value') {
            if (index < 0) {
                index = propertyKeys.push(key);
                propertyNames.push(null);
                propertyValues.push(value);
                return (false);
            }
            else {
                propertyValues[index] = value;
                object[propertyNames[index]] = value;
                return (true);
            }
        }
        return (false);
    };
    DrapoStorage.prototype.RetrieveDataPropertyKeyIndex = function (propertyKeys, key) {
        for (var i = propertyKeys.length - 1; i >= 0; i--)
            if (propertyKeys[i] == key)
                return (i);
        return (-1);
    };
    DrapoStorage.prototype.RetrieveDataKeyConfig = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetSector(sector)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataKeyCookie = function (name) {
        return (this.Application.CookieHandler.RetrieveData(name));
    };
    DrapoStorage.prototype.RetrieveIterator = function (dataKey, dataKeyParts, context) {
        if (dataKeyParts[0] == context.Item.Key)
            return (this.RetrieveIteratorChild(dataKey, dataKeyParts, context.Item.Data));
        return (null);
    };
    DrapoStorage.prototype.RetrieveIteratorChild = function (dataKey, dataKeyParts, contextData) {
        var current = contextData;
        for (var i = 1; i < dataKeyParts.length; i++) {
            var dataKeyCurrent = dataKeyParts[i];
            if (current[dataKeyCurrent] === 'undefined')
                return (null);
            current = current[dataKeyCurrent];
        }
        return (new DrapoStorageItem(dataKey, 'array', null, null, current, null, null, null, null, null, null, false, true, false, false, null, false, null, false, null, null, null, null, false, null, null, null, null, null, null, null, null, null, null, null));
    };
    DrapoStorage.prototype.AddDataItem = function (dataKey, dataPath, sector, item, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        data = dataItem.Data;
                        if (dataPath != null)
                            data = this.Application.Solver.ResolveDataObjectPathObject(data, dataPath, []);
                        data.push(item);
                        if (dataItem.IsUnitOfWork)
                            dataItem.DataInserted.push(item);
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ToggleData = function (dataKey, dataPath, sector, item, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, data, found, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        data = dataItem.Data;
                        if (dataPath != null)
                            data = this.Application.Solver.ResolveDataObjectPathObject(data, dataPath);
                        found = false;
                        for (i = 0; i < data.length; i++) {
                            if (data[i] != item)
                                continue;
                            found = true;
                            data.splice(i, 1);
                        }
                        if (!found)
                            data.push(item);
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.GetDataItemLast = function (dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (null)];
                        if (dataItem.Data.length == 0)
                            return [2, (null)];
                        return [2, (dataItem.Data[dataItem.Data.length - 1])];
                }
            });
        });
    };
    DrapoStorage.prototype.FlagDataItemAsUpdated = function (dataKey, sector, index, notify) {
        if (notify === void 0) { notify = true; }
        return __awaiter(this, void 0, void 0, function () {
            var dataItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        this.FlagAsUpdated(dataItem, index);
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null)];
                    case 2:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.NotifyChanges = function (dataItem, notify, dataKey, dataIndex, dataFields, canUseDifference) {
        if (canUseDifference === void 0) { canUseDifference = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataItem.HasChanges = true;
                        if (!notify) return [3, 2];
                        return [4, this.Application.Observer.Notify(dataKey, dataIndex, dataFields, canUseDifference)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4, this.PropagateDataChannels(dataItem)];
                    case 3:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.NotifyNoChanges = function (dataItem, notify, dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataItem.HasChanges = false;
                        if (!notify) return [3, 2];
                        return [4, this.Application.Observer.Notify(dataKey, null, ['_HasChanges'])];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.FlagAsUpdated = function (dataItem, index) {
        if (!dataItem.IsUnitOfWork)
            return (false);
        var dataArray = dataItem.Data;
        if (dataArray.length <= index)
            return (false);
        var data = dataArray[index];
        for (var i = dataItem.DataUpdated.length - 1; i >= 0; i--)
            if (dataItem.DataUpdated[i] === data)
                return (false);
        dataItem.DataUpdated.push(data);
        return (true);
    };
    DrapoStorage.prototype.GetCacheKeyIndex = function (dataKey, sector) {
        var sectors = this.Application.Document.GetSectorsAllowed(sector);
        for (var i = 0; i < this._cacheItems.length; i++) {
            var storageItem = this._cacheItems[i];
            if (storageItem == null)
                continue;
            var isAccessPublic = storageItem.IsAccessPublic;
            if ((storageItem.DataKey == dataKey) && ((this.Application.Document.IsSystemKey(dataKey)) || (storageItem.Sector === sector) || ((isAccessPublic) && (this.Application.Document.IsSectorAllowed(storageItem.Sector, sectors)))))
                return (i);
        }
        return (null);
    };
    DrapoStorage.prototype.IsDataReady = function (sector, dataKey) {
        var index = this.GetCacheKeyIndex(dataKey, sector);
        return (index !== null);
    };
    DrapoStorage.prototype.GetCacheStorageItem = function (dataKey, sector, executionContext) {
        if ((executionContext !== null) && (executionContext.HasSectorContainer(sector)))
            return (this.Application.SectorContainerHandler.GetStorageItem(sector, executionContext.GetSectorContainer(sector), dataKey));
        var index = this.GetCacheKeyIndex(dataKey, sector);
        if (index === null)
            return (null);
        return (this.GetCacheDataItem(index));
    };
    DrapoStorage.prototype.GetCacheDataItem = function (dataIndex) {
        return (this._cacheItems[dataIndex]);
    };
    DrapoStorage.prototype.AddCacheData = function (dataKey, sector, dataItem, canFireEventOnAfterCached) {
        if (canFireEventOnAfterCached === void 0) { canFireEventOnAfterCached = true; }
        return __awaiter(this, void 0, void 0, function () {
            var index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.AdquireLock()];
                    case 1:
                        _a.sent();
                        index = this._cacheItems.push(dataItem) - 1;
                        this.ReleaseLock();
                        if (!((canFireEventOnAfterCached) && (dataItem.OnAfterCached != null))) return [3, 3];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(sector, dataItem.Element, dataItem.OnAfterCached)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.Application.Worker.Check();
                        return [2, (index)];
                }
            });
        });
    };
    DrapoStorage.prototype.FireEventOnNotify = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var i, storageItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._cacheItems.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        if (i >= this._cacheItems.length)
                            return [3, 3];
                        storageItem = this._cacheItems[i];
                        if (storageItem == null)
                            return [3, 3];
                        if (storageItem.DataKey != dataKey)
                            return [3, 3];
                        if (storageItem.OnNotify == null)
                            return [3, 3];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(storageItem.Sector, null, storageItem.OnNotify)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.RemoveCacheData = function (index, canRemoveObservers) {
        if (canRemoveObservers === void 0) { canRemoveObservers = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (canRemoveObservers)
                            this.Application.Observer.Unsubscribe(this._cacheItems[index].DataKey);
                        return [4, this.AdquireLock()];
                    case 1:
                        _a.sent();
                        this._cacheItems.splice(index, 1);
                        this.ReleaseLock();
                        this.Application.Worker.Check();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.AppendCacheDataItemBySector = function (storageItems, sector) {
        for (var i = this._cacheItems.length - 1; i >= 0; i--) {
            var storageItem = this._cacheItems[i];
            if (storageItem == null)
                continue;
            if (storageItem.Sector !== sector)
                continue;
            storageItems.push(this._cacheItems[i]);
        }
    };
    DrapoStorage.prototype.AddCacheDataItems = function (storageItems) {
        return __awaiter(this, void 0, void 0, function () {
            var i, storageItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.AdquireLock()];
                    case 1:
                        _a.sent();
                        for (i = storageItems.length - 1; i >= 0; i--) {
                            storageItem = storageItems[i];
                            this._cacheItems.push(storageItem);
                        }
                        this.ReleaseLock();
                        this.Application.Worker.Check();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.GetCachedDataItemByDatePolling = function () {
        var item = null;
        for (var i = this._cacheItems.length - 1; i >= 0; i--) {
            var storageItem = this._cacheItems[i];
            if (storageItem.PollingDate == null)
                continue;
            if ((item == null) || (item.PollingDate > storageItem.PollingDate))
                item = storageItem;
        }
        return (item);
    };
    DrapoStorage.prototype.ExistCachedDataItem = function (item) {
        for (var i = this._cacheItems.length - 1; i >= 0; i--) {
            var storageItem = this._cacheItems[i];
            if (storageItem === item)
                return (true);
        }
        return (false);
    };
    DrapoStorage.prototype.ExecuteCachedDataItemPolling = function (item) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!item.IsTypeValue)
                            return [2];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(item.Sector, item.Element, item.Data)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.RemoveBySector = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var i, storageItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.AdquireLock()];
                    case 1:
                        _a.sent();
                        for (i = this._cacheItems.length - 1; i >= 0; i--) {
                            storageItem = this._cacheItems[i];
                            if (storageItem == null)
                                continue;
                            if (storageItem.Sector !== sector)
                                continue;
                            this._cacheItems.splice(i, 1);
                        }
                        this.ReleaseLock();
                        this.Application.Worker.Check();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.DiscardCacheData = function (dataKey, sector, canRemoveObservers) {
        if (canRemoveObservers === void 0) { canRemoveObservers = false; }
        return __awaiter(this, void 0, void 0, function () {
            var dataKeyIndex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataKeyIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (dataKeyIndex == null)
                            return [2, (false)];
                        return [4, this.RemoveCacheData(dataKeyIndex, canRemoveObservers)];
                    case 1:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.DiscardCacheDataBySector = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var removed, i, item, dataKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        removed = false;
                        i = this._cacheItems.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        item = this._cacheItems[i];
                        if (item == null)
                            return [3, 3];
                        if (item.Sector !== sector)
                            return [3, 3];
                        dataKey = item.DataKey;
                        return [4, this.DiscardCacheData(dataKey, item.Sector)];
                    case 2:
                        if (_a.sent())
                            removed = true;
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2, (removed)];
                }
            });
        });
    };
    DrapoStorage.prototype.DeleteDataItem = function (dataKey, dataPath, sector, item, notify) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, data, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        data = dataItem.Data;
                        if (data == null)
                            return [2, (false)];
                        if (dataPath != null)
                            data = this.Application.Solver.ResolveDataObjectPathObject(data, dataPath);
                        index = this.GetDataItemIndex(data, item);
                        if (index == null)
                            return [2, (false)];
                        if (dataItem.IsUnitOfWork)
                            dataItem.DataDeleted.push(item);
                        data.splice(index, 1);
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, index, dataPath)];
                    case 2:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.DeleteDataItemIndex = function (dataItem, index) {
        var data = dataItem.Data;
        if (data == null)
            return (false);
        var item = data[index];
        if (item == null)
            return (false);
        if (dataItem.IsUnitOfWork)
            dataItem.DataDeleted.push(item);
        data.splice(index, 1);
        return (true);
    };
    DrapoStorage.prototype.GetDataItemIndex = function (data, item) {
        for (var i = 0; i < data.length; i++)
            if (data[i] == item)
                return (i);
        return (null);
    };
    DrapoStorage.prototype.PostData = function (dataKey, sector, dataKeyResponse, notify, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, dataItemResponse, _a, _b, headers, url, object, headersResponse, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, this.RetrieveDataItemContext(dataKey, sector, executionContext)];
                    case 1:
                        dataItem = _c.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        if (dataItem.CookieName != null)
                            return [2, (this.Application.CookieHandler.SetCookieValue(dataItem))];
                        if (dataItem.Type === 'mapping')
                            return [2, (this.PostDataMapping(dataKey, sector, dataItem, notify, executionContext))];
                        if (!(dataKeyResponse == '')) return [3, 2];
                        _a = null;
                        return [3, 6];
                    case 2:
                        if (!(dataKey == dataKeyResponse)) return [3, 3];
                        _b = dataItem;
                        return [3, 5];
                    case 3: return [4, this.RetrieveDataItem(dataKeyResponse, sector)];
                    case 4:
                        _b = _c.sent();
                        _c.label = 5;
                    case 5:
                        _a = (_b);
                        _c.label = 6;
                    case 6:
                        dataItemResponse = _a;
                        return [4, this.ResolveDataHeaders(dataKey, sector, dataItem.HeadersSet, executionContext)];
                    case 7:
                        headers = _c.sent();
                        url = dataItem.UrlSet;
                        return [4, this.ResolveDataUrlMustaches(null, sector, url, executionContext)];
                    case 8:
                        url = _c.sent();
                        object = {};
                        if (dataItem.IsUnitOfWork) {
                            if (dataItem.DataInserted.length > 0)
                                object.Inserted = dataItem.DataInserted;
                            if (dataItem.DataUpdated.length > 0)
                                object.Updated = dataItem.DataUpdated;
                            if (dataItem.DataDeleted.length > 0)
                                object.Deleted = dataItem.DataDeleted;
                        }
                        else {
                            object.Entities = dataItem.Data;
                        }
                        headersResponse = dataItem.IsCookieChange ? [] : null;
                        return [4, this.Application.Server.GetJSON(url, "POST", this.Application.Serializer.Serialize(object), this.CONTENT_TYPE_JSON, null, headers)];
                    case 9:
                        data = _c.sent();
                        if (this.Application.Server.HasBadRequest)
                            return [2, (false)];
                        if ((data != null) && (dataItemResponse != null))
                            dataItemResponse.Data = data;
                        dataItem.DataInserted = [];
                        dataItem.DataUpdated = [];
                        dataItem.DataDeleted = [];
                        if (!(dataKey !== dataKeyResponse)) return [3, 11];
                        return [4, this.NotifyNoChanges(dataItem, notify, dataKey)];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11: return [4, this.NotifyChanges(dataItem, ((notify) && (dataItemResponse != null)), dataKeyResponse, null, null)];
                    case 12:
                        _c.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.PostDataItem = function (dataKey, sector, dataKeyResponse, notify, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, dataItemResponse, _a, _b, headers, url, object, headersResponse, data;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _c.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        if (dataItem.CookieName != null)
                            return [2, (this.Application.CookieHandler.SetCookieValue(dataItem))];
                        if (!(dataKeyResponse == '')) return [3, 2];
                        _a = null;
                        return [3, 6];
                    case 2:
                        if (!(dataKey == dataKeyResponse)) return [3, 3];
                        _b = dataItem;
                        return [3, 5];
                    case 3: return [4, this.RetrieveDataItem(dataKeyResponse, sector)];
                    case 4:
                        _b = _c.sent();
                        _c.label = 5;
                    case 5:
                        _a = (_b);
                        _c.label = 6;
                    case 6:
                        dataItemResponse = _a;
                        return [4, this.ResolveDataHeaders(dataKey, sector, dataItem.HeadersSet, executionContext)];
                    case 7:
                        headers = _c.sent();
                        url = dataItem.UrlSet;
                        return [4, this.ResolveDataUrlMustaches(null, sector, url, executionContext)];
                    case 8:
                        url = _c.sent();
                        object = dataItem.Data;
                        headersResponse = dataItem.IsCookieChange ? [] : null;
                        return [4, this.Application.Server.GetJSON(url, "POST", this.Application.Serializer.Serialize(object), this.CONTENT_TYPE_JSON, null, headers, headersResponse)];
                    case 9:
                        data = _c.sent();
                        if (this.Application.Server.HasBadRequest)
                            return [2, (false)];
                        if (dataItemResponse != null)
                            dataItemResponse.Data = data;
                        if (!(dataKey !== dataKeyResponse)) return [3, 11];
                        return [4, this.NotifyNoChanges(dataItem, notify, dataKey)];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11: return [4, this.NotifyChanges(dataItem, ((notify) && (dataItemResponse != null)), dataKeyResponse, null, null)];
                    case 12:
                        _c.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.PostDataMapping = function (dataKey, sector, dataItem, notify, executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var el, dataValue, updated, isReference, mustacheFullPartsReference, dataSectorReference, dataKeyReference, mustacheDataFieldsReference, mustachePartsReference, dataClone, dataValueResolved, storageItemMapped, dataMappingField, dataMappingSearchField, dataMappingSearchValue, dataMappingSearchHierarchyField, data, dataPath, dataMappingFieldResolved, dataPathFull, dataPathCurrent, updatedDataObject;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        el = this.Application.Searcher.FindDataKey(dataKey, sector);
                        if (el === null)
                            return [2, (false)];
                        dataValue = el.getAttribute('d-dataValue');
                        if (dataValue == null)
                            return [2, (false)];
                        updated = false;
                        isReference = el.getAttribute('d-dataLoadType') === 'reference';
                        if (!isReference) return [3, 2];
                        mustacheFullPartsReference = this.Application.Parser.ParseMustache(dataValue);
                        dataSectorReference = this.Application.Solver.ResolveSector(mustacheFullPartsReference, sector);
                        dataKeyReference = this.Application.Solver.ResolveDataKey(mustacheFullPartsReference);
                        mustacheDataFieldsReference = this.Application.Solver.ResolveDataFields(mustacheFullPartsReference);
                        mustachePartsReference = this.Application.Solver.CreateDataPath(dataKeyReference, mustacheDataFieldsReference);
                        dataClone = this.Application.Solver.Clone(dataItem.Data, true);
                        return [4, this.UpdateDataPath(dataSectorReference, null, mustachePartsReference, dataClone, notify)];
                    case 1:
                        updated = _a.sent();
                        return [2, (updated)];
                    case 2:
                        dataValueResolved = dataValue;
                        if (!this.Application.Parser.IsMustache(dataValue)) return [3, 4];
                        return [4, this.ResolveMustaches(sector, dataValue)];
                    case 3:
                        dataValueResolved = _a.sent();
                        _a.label = 4;
                    case 4: return [4, this.RetrieveDataItem(dataValueResolved, sector)];
                    case 5:
                        storageItemMapped = _a.sent();
                        if (storageItemMapped === null)
                            return [2, (null)];
                        dataMappingField = el.getAttribute('d-dataMappingField');
                        dataMappingSearchField = el.getAttribute('d-dataMappingSearchField');
                        dataMappingSearchValue = el.getAttribute('d-dataMappingSearchValue');
                        dataMappingSearchHierarchyField = el.getAttribute('d-dataMappingSearchHierarchyField');
                        if (((dataMappingField == null) || (dataMappingField == '')) && ((dataMappingSearchField == null) || (dataMappingSearchField == ''))) {
                            if (storageItemMapped.Data === dataItem.Data)
                                return [2, (false)];
                            updated = true;
                            storageItemMapped.Data = dataItem.Data;
                            storageItemMapped.HasChanges = true;
                        }
                        if (!!updated) return [3, 12];
                        data = storageItemMapped.Data;
                        dataPath = null;
                        if (!((dataMappingField != null) && (dataMappingField != ''))) return [3, 7];
                        return [4, this.ResolveMustaches(sector, dataMappingField)];
                    case 6:
                        dataMappingFieldResolved = _a.sent();
                        if ((dataMappingFieldResolved != null) && (dataMappingFieldResolved != '')) {
                            dataPath = this.Application.Parser.ParsePath(dataMappingFieldResolved);
                            dataPathFull = this.Application.Solver.CreateDataPath(dataValueResolved, dataPath);
                            data = this.Application.Solver.ResolveDataObjectPathObject(data, dataPathFull);
                            if (data === null)
                                return [2, (false)];
                        }
                        _a.label = 7;
                    case 7:
                        if (!((dataMappingSearchField != null) && (dataMappingSearchField != '') && (dataMappingSearchValue != null) && (dataMappingSearchValue != ''))) return [3, 10];
                        if (!this.Application.Parser.IsMustache(dataMappingSearchValue)) return [3, 9];
                        dataPathCurrent = this.Application.Parser.ParseMustache(dataMappingSearchValue);
                        return [4, this.Application.Solver.ResolveItemDataPathObject(sector, null, dataPathCurrent)];
                    case 8:
                        dataMappingSearchValue = _a.sent();
                        _a.label = 9;
                    case 9:
                        updatedDataObject = this.Application.Solver.UpdateDataObjectLookupHierarchy(data, dataMappingSearchField, dataMappingSearchValue, dataItem.Data, dataMappingSearchHierarchyField);
                        if (updatedDataObject == null)
                            return [2, (false)];
                        updated = updatedDataObject;
                        return [3, 12];
                    case 10: return [4, this.SetDataKeyField(dataValueResolved, sector, dataPath, dataItem.Data, false)];
                    case 11:
                        updated = _a.sent();
                        _a.label = 12;
                    case 12: return [4, this.NotifyChanges(dataItem, ((updated) && (notify)), dataValueResolved, null, null)];
                    case 13:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.ClearData = function (dataText, sector, notify) {
        return __awaiter(this, void 0, void 0, function () {
            var mustacheParts, dataKey, dataItem, data, i, item, dataKey, dataItem, i, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Application.Parser.IsMustache(dataText)) return [3, 3];
                        mustacheParts = this.Application.Parser.ParseMustache(dataText);
                        dataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        data = this.Application.Solver.ResolveItemStoragePathObject(dataItem, mustacheParts);
                        if ((data == null) || (data == undefined) || (data.length == undefined))
                            return [2, (false)];
                        for (i = data.length - 1; i >= 0; i--) {
                            item = data[i];
                            data.splice(i, 1);
                        }
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null)];
                    case 2:
                        _a.sent();
                        return [3, 6];
                    case 3:
                        dataKey = dataText;
                        return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 4:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        for (i = dataItem.Data.length - 1; i >= 0; i--) {
                            item = dataItem.Data[i];
                            if (dataItem.IsUnitOfWork)
                                dataItem.DataDeleted.push(item);
                            dataItem.Data.splice(i, 1);
                        }
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.UnloadData = function (dataKey, sector) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.DiscardCacheData(dataKey, sector, true)];
                    case 1: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoStorage.prototype.ClearDataToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var i, item, dataKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this._cacheItems.length)) return [3, 4];
                        item = this._cacheItems[i];
                        if (item == null)
                            return [3, 3];
                        if (!item.IsToken)
                            return [3, 3];
                        item.Data = [];
                        item.DataDeleted = [];
                        item.DataInserted = [];
                        item.DataUpdated = [];
                        dataKey = item.DataKey;
                        this.Application.Observer.SubscribeAuthorization(dataKey, 'notify');
                        return [4, this.NotifyChanges(item, true, dataKey, null, null)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.FireEventOnBeforeContainerUnload = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var i, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._cacheItems.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        if (i >= this._cacheItems.length)
                            return [3, 3];
                        item = this._cacheItems[i];
                        if (item == null)
                            return [3, 3];
                        if (item.Sector !== sector)
                            return [3, 3];
                        if (item.OnBeforeContainerUnload === null)
                            return [3, 3];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(item.Sector, item.Element, item.OnBeforeContainerUnload)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.FireEventOnAfterContainerLoad = function (sector) {
        return __awaiter(this, void 0, void 0, function () {
            var i, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._cacheItems.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        if (i >= this._cacheItems.length)
                            return [3, 3];
                        item = this._cacheItems[i];
                        if (item == null)
                            return [3, 3];
                        if (item.Sector !== sector)
                            return [3, 3];
                        if (item.OnAfterContainerLoad === null)
                            return [3, 3];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(item.Sector, item.Element, item.OnAfterContainerLoad)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.MoveDataItem = function (dataKey, sector, dataMove, dataPosition, notify) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, indexBefore, indexAfter, i, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        indexBefore = null;
                        indexAfter = null;
                        for (i = 0; i < dataItem.Data.length; i++) {
                            data = dataItem.Data[i];
                            if (data === dataMove)
                                indexBefore = i;
                            if (data === dataPosition)
                                indexAfter = i;
                        }
                        if ((indexBefore === null) || (indexAfter === null) || (indexBefore === indexAfter))
                            return [2, (false)];
                        return [4, this.FlagDataItemAsUpdated(dataKey, sector, indexBefore, false)];
                    case 2:
                        _a.sent();
                        return [4, this.FlagDataItemAsUpdated(dataKey, sector, indexAfter, false)];
                    case 3:
                        _a.sent();
                        dataItem.Data.splice(indexBefore, 1);
                        dataItem.Data.splice(indexAfter, 0, dataMove);
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null, true)];
                    case 4:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.MoveDataIndex = function (dataKey, sector, dataMove, index, notify) {
        return __awaiter(this, void 0, void 0, function () {
            var dataItem, indexBefore, i, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.RetrieveDataItem(dataKey, sector)];
                    case 1:
                        dataItem = _a.sent();
                        if (dataItem == null)
                            return [2, (false)];
                        indexBefore = null;
                        for (i = 0; i < dataItem.Data.length; i++) {
                            data = dataItem.Data[i];
                            if (data === dataMove)
                                indexBefore = i;
                        }
                        if ((indexBefore === null) || (index === null) || (indexBefore === index))
                            return [2, (false)];
                        return [4, this.FlagDataItemAsUpdated(dataKey, sector, indexBefore, false)];
                    case 2:
                        _a.sent();
                        return [4, this.FlagDataItemAsUpdated(dataKey, sector, index, false)];
                    case 3:
                        _a.sent();
                        dataItem.Data.splice(indexBefore, 1);
                        dataItem.Data.splice(index, 0, dataMove);
                        return [4, this.NotifyChanges(dataItem, notify, dataKey, null, null, true)];
                    case 4:
                        _a.sent();
                        return [2, (true)];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveData = function (executeNoCache, el) {
        if (el === void 0) { el = null; }
        return __awaiter(this, void 0, void 0, function () {
            var children, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el == null)
                            el = document.documentElement;
                        children = [].slice.call(el.children);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < children.length)) return [3, 4];
                        return [4, this.ResolveDataElement(executeNoCache, children[i])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveDataElement = function (executeNoCache, el) {
        return __awaiter(this, void 0, void 0, function () {
            var sector, children, hasChildren, i, child;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sector = el.getAttribute ? el.getAttribute('d-sector') : null;
                        if (sector != null)
                            return [2];
                        children = [].slice.call(el.children);
                        hasChildren = children.length > 0;
                        if (!hasChildren) return [3, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < children.length)) return [3, 4];
                        child = children[i];
                        return [4, this.ResolveDataElement(executeNoCache, child)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [3, 7];
                    case 5: return [4, this.ResolveDataLoadInternal(executeNoCache, el)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveDataLoadInternal = function (executeNoCache, el) {
        return __awaiter(this, void 0, void 0, function () {
            var dataLoadType, dataKey, sector, cacheIndex, canCache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dataLoadType = el.getAttribute('d-dataLoadType');
                        if (dataLoadType == null)
                            return [2];
                        if (dataLoadType !== 'startup')
                            return [2];
                        dataKey = el.getAttribute('d-dataKey');
                        if (dataKey == null)
                            return [2];
                        sector = this.Application.Document.GetSector(el);
                        if (!this.Application.Document.IsSectorReady(sector))
                            return [2];
                        cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
                        if (cacheIndex !== null)
                            return [2];
                        canCache = this.Application.Parser.ParseBoolean(el.getAttribute('d-dataCache'), true);
                        if ((!executeNoCache) && (!canCache))
                            return [2];
                        return [4, this.RetrieveDataItem(dataKey, sector, true, null)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.CreateErrorForStorage = function (type, message, content) {
        if (type === void 0) { type = null; }
        if (message === void 0) { message = null; }
        if (content === void 0) { content = null; }
        var object = {};
        object.Type = type;
        object.Message = message;
        object.Content = content;
        object.Date = new Date();
        return (object);
    };
    DrapoStorage.prototype.EnsureDataDelayLoaded = function (dataItem, dataPath) {
        return __awaiter(this, void 0, void 0, function () {
            var data, dataKey, dataField, item, dataFieldCurrent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = this.Application.Solver.ResolveDataObjectPathObject(dataItem.Data, dataPath);
                        if (data !== '')
                            return [2];
                        dataKey = dataPath[0];
                        dataField = dataPath[1];
                        return [4, this.RetrieveDataItemInternal(dataKey, null, true, [dataField])];
                    case 1:
                        item = _a.sent();
                        for (dataFieldCurrent in item.Data)
                            dataItem.Data[dataFieldCurrent] = item.Data[dataFieldCurrent];
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.HasChanges = function (sector, dataKey) {
        var cacheIndex = this.GetCacheKeyIndex(dataKey, sector);
        if (cacheIndex === null)
            return (false);
        var storageItem = this.GetCacheDataItem(cacheIndex);
        if (storageItem === null)
            return (false);
        return (storageItem.HasChanges);
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystem = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (dataKey === '__debugger')
                    return [2, (this.RetrieveDataItemInternalSystemDebugger(dataKey))];
                if (dataKey === '__sectors')
                    return [2, (this.RetrieveDataItemInternalSystemSectors(dataKey))];
                if (dataKey === '__datakeysfunction')
                    return [2, (this.RetrieveDataItemInternalSystemDataKeysFunction(dataKey))];
                if (dataKey === '__breakpoints')
                    return [2, (this.RetrieveDataItemInternalSystemBreakpoints(dataKey))];
                if (dataKey === '__notifys')
                    return [2, (this.RetrieveDataItemInternalSystemNotifys(dataKey))];
                if (dataKey === '__pipes')
                    return [2, (this.RetrieveDataItemInternalSystemPipes(dataKey))];
                if (dataKey === '__errors')
                    return [2, (this.RetrieveDataItemInternalSystemErrors(dataKey))];
                if (dataKey === '__functions')
                    return [2, (this.RetrieveDataItemInternalSystemFunctions(dataKey))];
                if (dataKey === '__components')
                    return [2, (this.RetrieveDataItemInternalSystemComponents(dataKey))];
                if (dataKey === '__requests')
                    return [2, (this.RetrieveDataItemInternalSystemRequests(dataKey))];
                if (dataKey === '__sectorsupdate')
                    return [2, (this.RetrieveDataItemInternalSystemSectorsUpdate(dataKey))];
                if (dataKey === '__runtime')
                    return [2, (this.RetrieveDataItemInternalSystemRuntime(dataKey))];
                if (dataKey === '__objects')
                    return [2, (this.RetrieveDataItemInternalSystemObjects(dataKey))];
                if (dataKey === '__objectsexpanded')
                    return [2, (this.RetrieveDataItemInternalSystemObjectsExpanded(dataKey))];
                if (dataKey === '__objectproperties')
                    return [2, (this.RetrieveDataItemInternalSystemObjectProperties(dataKey))];
                if (dataKey === '__objectdata')
                    return [2, (this.RetrieveDataItemInternalSystemObjectData(dataKey))];
                if (dataKey === '__objectwatch')
                    return [2, (this.RetrieveDataItemInternalSystemObjectWatch(dataKey))];
                if (dataKey === '__objectswatchs')
                    return [2, (this.RetrieveDataItemInternalSystemObjectsWatchs(dataKey))];
                if (dataKey === '__objectswatchsvalues')
                    return [2, (this.RetrieveDataItemInternalSystemObjectsWatchsValues(dataKey))];
                if (dataKey === '__browser')
                    return [2, (this.RetrieveDataItemInternalSystemBrowser(dataKey))];
                if (dataKey === '__debuggerProperties')
                    return [2, (this.RetrieveDataItemInternalSystemDebuggerProperties(dataKey))];
                return [2, (null)];
            });
        });
    };
    DrapoStorage.prototype.CreateDataItemInternal = function (dataKey, data, canCache) {
        if (canCache === void 0) { canCache = true; }
        var item = new DrapoStorageItem(dataKey, data.length != null ? 'array' : 'object', null, null, data, null, null, null, null, null, null, false, true, false, false, null, false, null, false, '', null, null, null, canCache, null, null, null, null, null, null, null, null, null, null, null);
        return (item);
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemDebugger = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = {};
                data.sector = '';
                data.datakey = '';
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemSectors = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = this.Application.Document.GetSectors();
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemDataKeysFunction = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var sector, data, i, itemCache, itemDataKey, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Observer.SubscribeStorage('__debugger', ['sector'], dataKey);
                        return [4, this.ResolveMustaches('', '{{__debugger.sector}}')];
                    case 1:
                        sector = _a.sent();
                        data = [];
                        data.push('');
                        for (i = 0; i < this._cacheItems.length; i++) {
                            itemCache = this._cacheItems[i];
                            if (itemCache == null)
                                continue;
                            if (!this.Application.Document.IsEqualSector(itemCache.Sector, sector))
                                continue;
                            itemDataKey = itemCache.DataKey;
                            if (this.Application.Document.IsSystemKey(itemDataKey))
                                continue;
                            if ((!itemCache.IsTypeFunction) && ((!itemCache.IsTypeValue)))
                                continue;
                            data.push(itemDataKey);
                        }
                        item = this.CreateDataItemInternal(dataKey, data);
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemBreakpoints = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemNotifys = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemPipes = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemErrors = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemFunctions = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemComponents = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Debugger.GetComponents()];
                    case 1:
                        data = _a.sent();
                        item = this.CreateDataItemInternal(dataKey, data);
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemRequests = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemSectorsUpdate = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemRuntime = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = {};
                data.sector = '';
                data.datakey = '';
                data.label = '';
                data.expression = '';
                data.functionValue = '';
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjects = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.Application.Observer.SubscribeStorage('__objectsexpanded', [], dataKey, DrapoStorageLinkType.Reload);
                        return [4, this.Application.Debugger.GetObjects()];
                    case 1:
                        data = _a.sent();
                        item = this.CreateDataItemInternal(dataKey, data);
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjectsExpanded = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                data.push('sector_null');
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjectProperties = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = {};
                data.sector = '';
                data.datakey = '';
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjectData = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Debugger.GetObjectData()];
                    case 1:
                        data = _a.sent();
                        item = this.CreateDataItemInternal(dataKey, data);
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjectWatch = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = {};
                data.Sector = '';
                data.Mustache = '';
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjectsWatchs = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = [];
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemObjectsWatchsValues = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Debugger.GetWatchsValues()];
                    case 1:
                        data = _a.sent();
                        item = this.CreateDataItemInternal(dataKey, data);
                        return [2, (item)];
                }
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemBrowser = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, width, height, item;
            return __generator(this, function (_a) {
                data = {};
                width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
                height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
                data.Width = width;
                data.Height = height;
                item = this.CreateDataItemInternal(dataKey, data);
                item.CanCache = false;
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.RetrieveDataItemInternalSystemDebuggerProperties = function (dataKey) {
        return __awaiter(this, void 0, void 0, function () {
            var data, item;
            return __generator(this, function (_a) {
                data = {};
                data.left = false;
                data.showobjects = false;
                data.showbreakpoints = false;
                data.shownotifys = false;
                data.showerrors = true;
                data.showpipes = true;
                data.showfunctions = false;
                data.showcomponents = false;
                data.showserver = false;
                data.showsectorsupdate = false;
                data.persist = false;
                item = this.CreateDataItemInternal(dataKey, data);
                return [2, (item)];
            });
        });
    };
    DrapoStorage.prototype.ExecuteQuery = function (sector, dataKey, query) {
        return __awaiter(this, void 0, void 0, function () {
            var objects, objectsId, objectsInformation, filters, hasFilters, i, querySource, querySourcePath, isQuerySourceMustache, sourceDataKey, sourceMustache, mustacheParts, mustacheDataKey, querySourceData, querySourceObjects, j, querySourceObject, objectIndexes, k, objectIndex, object, objectInformation, isAdd, filter, count, i, i, filter, objectsAggregations, outputArray, i, object;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        objects = [];
                        objectsId = [];
                        objectsInformation = [];
                        filters = [];
                        hasFilters = query.Filter !== null;
                        return [4, this.ResolveQueryConditionMustaches(sector, dataKey, query)];
                    case 1:
                        _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < query.Sources.length)) return [3, 5];
                        querySource = query.Sources[i];
                        querySourcePath = querySource.Source;
                        isQuerySourceMustache = this.Application.Parser.IsMustache(querySourcePath);
                        sourceDataKey = querySourcePath;
                        sourceMustache = sourceDataKey;
                        if (isQuerySourceMustache) {
                            mustacheParts = this.Application.Parser.ParseMustache(querySourcePath);
                            mustacheDataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                            sourceDataKey = mustacheDataKey;
                        }
                        else {
                            sourceMustache = this.Application.Solver.CreateMustache([sourceDataKey]);
                        }
                        this.Application.Observer.SubscribeStorage(sourceDataKey, null, dataKey);
                        return [4, this.RetrieveDataValue(sector, sourceMustache)];
                    case 3:
                        querySourceData = _a.sent();
                        querySourceObjects = this.GetQuerySourceObjects(query, querySourceData);
                        for (j = 0; j < querySourceObjects.length; j++) {
                            querySourceObject = querySourceObjects[j];
                            objectIndexes = this.EnsureQueryObject(query, querySource, i, objects, objectsId, objectsInformation, querySourceObject);
                            if ((objectIndexes === null) || (objectIndexes.length === 0))
                                continue;
                            for (k = 0; k < objectIndexes.length; k++) {
                                objectIndex = objectIndexes[k];
                                object = objects[objectIndex];
                                objectInformation = objectsInformation[objectIndex];
                                this.InjectQueryObjectProjections(query, querySource, object, objectInformation, querySourceObject);
                                if (hasFilters) {
                                    isAdd = (i === 0);
                                    filter = isAdd ? query.Filter.Clone() : filters[objectIndex];
                                    if (isAdd)
                                        filters.push(filter);
                                    this.ResolveQueryConditionSource(query, querySource, querySourceObject, filter);
                                }
                            }
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 2];
                    case 5:
                        count = query.Sources.length;
                        if ((count > 1) && (query.Sources[1].JoinType == 'INNER')) {
                            for (i = objects.length - 1; i >= 0; i--) {
                                if (objectsId[i].length === count)
                                    continue;
                                objects.splice(i, 1);
                                objectsInformation.splice(i, 1);
                                if (hasFilters)
                                    filters.splice(i, 1);
                            }
                        }
                        if (hasFilters) {
                            for (i = filters.length - 1; i >= 0; i--) {
                                filter = filters[i];
                                if (this.IsValidQueryCondition(filter))
                                    continue;
                                objects.splice(i, 1);
                                objectsInformation.splice(i, 1);
                            }
                        }
                        objectsAggregations = this.ResolveQueryAggregations(query, objects, objectsInformation);
                        if (objectsAggregations !== null)
                            return [2, (objectsAggregations)];
                        this.ResolveQueryFunctions(query, objects, objectsInformation);
                        if (query.OutputArray != null) {
                            outputArray = [];
                            for (i = 0; i < objects.length; i++) {
                                object = objects[i];
                                outputArray.push(object[query.OutputArray]);
                            }
                            objects = outputArray;
                        }
                        if (query.Sorts != null)
                            objects = this.ResolveQueryOrderBy(query, objects);
                        return [2, (objects)];
                }
            });
        });
    };
    DrapoStorage.prototype.GetQuerySourceObjects = function (query, querySourceData) {
        var querySourceObjects = Array.isArray(querySourceData) ? querySourceData : [querySourceData];
        if (query.Options.List != null)
            return (this.GetQuerySourceObjectsList(query, querySourceObjects));
        return (querySourceObjects);
    };
    DrapoStorage.prototype.GetQuerySourceObjectsList = function (query, querySourceObjects) {
        var items = [];
        for (var i = 0; i < querySourceObjects.length; i++)
            items.push(querySourceObjects[i]);
        for (var i = 0; i < items.length; i++) {
            var querySourceObject = items[i];
            var querySourceObjectIterator = querySourceObject[query.Options.List];
            if (querySourceObjectIterator == null)
                continue;
            var querySourceObjectIteratorObjects = Array.isArray(querySourceObjectIterator) ? querySourceObjectIterator : [querySourceObjectIterator];
            for (var j = 0; j < querySourceObjectIteratorObjects.length; j++)
                items.push(querySourceObjectIteratorObjects[j]);
        }
        return (items);
    };
    DrapoStorage.prototype.EnsureQueryObject = function (query, querySource, indexSource, objects, objectsIds, objectsInformation, querySourceObject) {
        var object = null;
        if (query.Sources.length == 1) {
            object = {};
            objects.push(object);
            objectsInformation.push({});
            return ([objects.length - 1]);
        }
        var joinCondition = query.Sources[1].JoinConditions[0];
        var column = joinCondition.SourceLeft == querySource.Alias ? joinCondition.ColumnLeft : joinCondition.ColumnRight;
        var isObject = typeof querySourceObject === 'object';
        var id = isObject ? querySourceObject[column] : querySourceObject;
        if (indexSource === 0) {
            object = {};
            objects.push(object);
            var ids = [];
            ids.push(id);
            objectsIds.push(ids);
            objectsInformation.push({});
            return ([objects.length - 1]);
        }
        var indexes = [];
        for (var i = 0; i < objects.length; i++) {
            var objectsId = objectsIds[i];
            if (objectsId.length > 1)
                continue;
            var objectId = objectsId[0];
            if (objectId != id)
                continue;
            objectsId.push(objectId);
            indexes.push(i);
        }
        if ((indexes.length == 0) && (querySource.JoinType === 'OUTER')) {
            object = {};
            objects.push(object);
            var ids = [];
            ids.push(id);
            objectsIds.push(ids);
            objectsInformation.push({});
            return ([objects.length - 1]);
        }
        return (indexes);
    };
    DrapoStorage.prototype.InjectQueryObjectProjections = function (query, querySource, object, objectInformation, sourceObject) {
        var _a, _b, _c, _d;
        var isObject = typeof sourceObject === 'object';
        for (var i = 0; i < query.Projections.length; i++) {
            var projection = query.Projections[i];
            if (projection.FunctionName !== null) {
                for (var j = 0; j < projection.FunctionParameters.length; j++) {
                    var functionParameter = projection.FunctionParameters[j];
                    var functionParameterName = this.ResolveQueryFunctionParameterName(functionParameter);
                    if (objectInformation[functionParameterName] != null)
                        continue;
                    var functionParameterValues = this.Application.Parser.ParseQueryProjectionFunctionParameterValue(functionParameterName);
                    var source = functionParameterValues[0];
                    if ((query.Sources.length > 1) && (((_a = querySource.Alias) !== null && _a !== void 0 ? _a : querySource.Source) !== source))
                        continue;
                    var value = isObject ? sourceObject[(_b = projection.Column) !== null && _b !== void 0 ? _b : functionParameterName] : sourceObject;
                    objectInformation[functionParameterName] = value;
                }
            }
            else {
                var source = projection.Source;
                if (source !== null) {
                    if ((querySource.Alias !== null) && (source !== querySource.Alias))
                        continue;
                    if ((querySource.Alias === null) && (source !== querySource.Source))
                        continue;
                }
                else {
                    if ((isObject) && (!sourceObject[projection.Column]))
                        continue;
                    if ((!isObject) && (((_c = querySource.Alias) !== null && _c !== void 0 ? _c : querySource.Source) !== projection.Column))
                        continue;
                }
                var value = isObject ? sourceObject[projection.Column] : sourceObject;
                object[(_d = projection.Alias) !== null && _d !== void 0 ? _d : projection.Column] = value;
            }
        }
    };
    DrapoStorage.prototype.ResolveQueryConditionSource = function (query, querySource, sourceObject, filter) {
        var valueLeft = this.ResolveQueryConditionSourceColumn(query, querySource, sourceObject, filter.SourceLeft, filter.ColumnLeft);
        if (valueLeft !== null)
            filter.ValueLeft = valueLeft;
        if (filter.IsNullRight)
            return;
        var valueRight = this.ResolveQueryConditionSourceColumn(query, querySource, sourceObject, filter.SourceRight, filter.ColumnRight);
        if (valueRight !== null)
            filter.ValueRight = valueRight;
    };
    DrapoStorage.prototype.ResolveQueryConditionSourceColumn = function (query, querySource, sourceObject, source, column) {
        var _a;
        var isObject = typeof sourceObject === 'object';
        if (source !== null) {
            if ((querySource.Alias !== null) && (source !== querySource.Alias))
                return (null);
            if ((querySource.Alias === null) && (source !== querySource.Source))
                return (null);
        }
        else {
            if ((isObject) && (!(column in sourceObject)))
                return (null);
            if ((!isObject) && (((_a = querySource.Alias) !== null && _a !== void 0 ? _a : querySource.Source) !== column))
                return (null);
        }
        var value = isObject ? sourceObject[column] : sourceObject;
        return (value == null ? null : this.Application.Solver.EnsureString(value));
    };
    DrapoStorage.prototype.ResolveQueryFunctionParameterName = function (value) {
        value = value.replace('.', '_');
        return (value);
    };
    DrapoStorage.prototype.ResolveQueryAggregations = function (query, objects, objectsInformation) {
        if (query.Projections[0].FunctionName === 'COUNT') {
            var objectAggregation = {};
            objectAggregation[query.Projections[0].Alias] = objects.length;
            return (objectAggregation);
        }
        if (query.Projections[0].FunctionName === 'MAX') {
            var objectAggregation = {};
            objectAggregation[query.Projections[0].Alias] = this.ResolveQueryAggregationsMax(query, query.Projections[0], objects, objectsInformation);
            return (objectAggregation);
        }
        if (query.Projections[0].FunctionName === 'MIN') {
            var objectAggregation = {};
            objectAggregation[query.Projections[0].Alias] = this.ResolveQueryAggregationsMin(query, query.Projections[0], objects, objectsInformation);
            return (objectAggregation);
        }
        return (null);
    };
    DrapoStorage.prototype.ResolveQueryAggregationsMax = function (query, projection, objects, objectsInformation) {
        var value = null;
        var functionParameter = projection.FunctionParameters[0];
        var functionParameterName = this.ResolveQueryFunctionParameterName(functionParameter);
        for (var i = 0; i < objectsInformation.length; i++) {
            var objectInformation = objectsInformation[i];
            var valueCurrent = objectInformation[functionParameterName];
            if ((value == null) || (value < valueCurrent))
                value = valueCurrent;
        }
        return (value);
    };
    DrapoStorage.prototype.ResolveQueryAggregationsMin = function (query, projection, objects, objectsInformation) {
        var value = null;
        var functionParameter = projection.FunctionParameters[0];
        var functionParameterName = this.ResolveQueryFunctionParameterName(functionParameter);
        for (var i = 0; i < objectsInformation.length; i++) {
            var objectInformation = objectsInformation[i];
            var valueCurrent = objectInformation[functionParameterName];
            if ((value == null) || (value > valueCurrent))
                value = valueCurrent;
        }
        return (value);
    };
    DrapoStorage.prototype.ResolveQueryFunctions = function (query, objects, objectsInformation) {
        for (var i = 0; i < query.Projections.length; i++) {
            var projection = query.Projections[i];
            if (projection.FunctionName !== null)
                this.ResolveQueryFunction(projection.Alias, projection.FunctionName, projection.FunctionParameters, objects, objectsInformation);
        }
    };
    DrapoStorage.prototype.ResolveQueryFunction = function (projectionAlias, functionName, functionParameters, objects, objectsInformation) {
        if (functionName === 'COALESCE')
            this.ResolveQueryFunctionCoalesce(projectionAlias, functionParameters, objects, objectsInformation);
    };
    DrapoStorage.prototype.ResolveQueryFunctionCoalesce = function (projectionAlias, functionParameters, objects, objectsInformation) {
        for (var i = 0; i < objects.length; i++) {
            var object = objects[i];
            var objectInformation = objectsInformation[i];
            for (var j = 0; j < functionParameters.length; j++) {
                var functionParameter = functionParameters[j];
                var functionParameterName = this.ResolveQueryFunctionParameterName(functionParameter);
                if (objectInformation[functionParameterName] == null)
                    continue;
                object[projectionAlias] = objectInformation[functionParameterName];
                break;
            }
        }
    };
    DrapoStorage.prototype.ResolveQueryConditionMustaches = function (sector, dataKey, query) {
        return __awaiter(this, void 0, void 0, function () {
            var i, source, j, filter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(query.Filter != null)) return [3, 2];
                        return [4, this.ResolveQueryConditionMustachesFilter(sector, dataKey, query.Filter)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        i = 0;
                        _a.label = 3;
                    case 3:
                        if (!(i < query.Sources.length)) return [3, 8];
                        source = query.Sources[i];
                        if (source.JoinConditions == null)
                            return [3, 7];
                        j = 0;
                        _a.label = 4;
                    case 4:
                        if (!(j < source.JoinConditions.length)) return [3, 7];
                        filter = source.JoinConditions[j];
                        return [4, this.ResolveQueryConditionMustachesFilter(sector, dataKey, filter)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        j++;
                        return [3, 4];
                    case 7:
                        i++;
                        return [3, 3];
                    case 8:
                        if (!(query.Sorts != null)) return [3, 10];
                        return [4, this.ResolveQuerySortsMustaches(sector, dataKey, query.Sorts)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveQueryConditionMustachesFilter = function (sector, dataKey, filter) {
        return __awaiter(this, void 0, void 0, function () {
            var valueLeft, valueRight;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.ResolveQueryConditionMustachesFilterValue(sector, dataKey, filter.ValueLeft)];
                    case 1:
                        valueLeft = _a.sent();
                        if (valueLeft !== undefined) {
                            filter.ColumnLeft = valueLeft;
                            filter.ValueLeft = valueLeft;
                        }
                        return [4, this.ResolveQueryConditionMustachesFilterValue(sector, dataKey, filter.ValueRight)];
                    case 2:
                        valueRight = _a.sent();
                        if (valueRight !== undefined) {
                            filter.ColumnRight = valueRight;
                            filter.ValueRight = valueRight;
                        }
                        return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveQueryConditionMustachesFilterValue = function (sector, dataKey, value) {
        return __awaiter(this, void 0, void 0, function () {
            var mustacheParts, mustacheDataKey, valueResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Application.Parser.IsMustache(value))
                            return [2, (undefined)];
                        mustacheParts = this.Application.Parser.ParseMustache(value);
                        mustacheDataKey = this.Application.Solver.ResolveDataKey(mustacheParts);
                        this.Application.Observer.SubscribeStorage(mustacheDataKey, null, dataKey);
                        return [4, this.RetrieveDataValue(sector, value)];
                    case 1:
                        valueResolved = _a.sent();
                        return [2, (valueResolved)];
                }
            });
        });
    };
    DrapoStorage.prototype.IsValidQueryCondition = function (filter) {
        if ((filter.Comparator === '=') && (filter.ValueLeft == filter.ValueRight))
            return (true);
        if ((filter.Comparator === 'IS') && (filter.IsNullRight) && (filter.ValueLeft == null))
            return (true);
        if ((filter.Comparator === 'IS NOT') && (filter.IsNullRight) && (filter.ValueLeft != null))
            return (true);
        if ((filter.Comparator === 'LIKE') && (this.IsValidQueryConditionLike(filter.ValueLeft, filter.ValueRight, filter.IsSearchStartRight, filter.IsSearchEndRight)))
            return (true);
        return (false);
    };
    DrapoStorage.prototype.IsValidQueryConditionLike = function (valueLeft, valueRight, isSearchStartRight, isSearchEndRight) {
        var valueLeftClean = this.CleanSingleQuote(valueLeft).toLowerCase();
        var valueRightClean = this.CleanSingleQuote(valueRight).toLowerCase();
        if (valueRightClean.length === 0)
            return (false);
        var isRightWildcardStart = (valueRightClean[0] === '%');
        var isRightWildcardEnd = (valueRightClean[valueRightClean.length - 1] === '%');
        var valueRightCleanWithoutWildcard = valueRightClean.substr(isRightWildcardStart ? 1 : 0, valueRightClean.length - (isRightWildcardEnd ? 1 : 0));
        var isEqual = valueLeftClean === valueRightCleanWithoutWildcard;
        if (isEqual)
            return (true);
        var isCheckStart = ((isSearchStartRight) || (isRightWildcardStart));
        var isCheckEnd = ((isSearchEndRight) || (isRightWildcardEnd));
        if ((isCheckStart) && (isCheckEnd) && (valueLeftClean.indexOf(valueRightCleanWithoutWildcard) >= 0))
            return (true);
        if ((isCheckStart) && (valueLeftClean.endsWith(valueRightCleanWithoutWildcard)))
            return (true);
        if ((isCheckEnd) && (valueLeftClean.startsWith(valueRightCleanWithoutWildcard)))
            return (true);
        return (false);
    };
    DrapoStorage.prototype.CleanSingleQuote = function (value) {
        if (value.length < 2)
            return (value);
        if ((value[0] !== "'") && ((value[value.length - 1] !== "'")))
            return (value);
        return (value.substr(1, value.length - 2));
    };
    DrapoStorage.prototype.ResolveQuerySortsMustaches = function (sector, dataKey, sorts) {
        return __awaiter(this, void 0, void 0, function () {
            var i, sort, column, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < sorts.length)) return [3, 5];
                        sort = sorts[i];
                        return [4, this.ResolveQueryConditionMustachesFilterValue(sector, dataKey, sort.Column)];
                    case 2:
                        column = _a.sent();
                        if (column !== undefined)
                            sort.Column = column;
                        return [4, this.ResolveQueryConditionMustachesFilterValue(sector, dataKey, sort.Type)];
                    case 3:
                        type = _a.sent();
                        if (type !== undefined)
                            sort.Type = type;
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3, 1];
                    case 5: return [2];
                }
            });
        });
    };
    DrapoStorage.prototype.ResolveQueryOrderBy = function (query, objects) {
        if ((query.Sorts == null) || (query.Sorts.length == 0))
            return (objects);
        var sorts = query.Sorts;
        var sorted = true;
        while (sorted) {
            sorted = false;
            for (var i = 0; i < (objects.length - 1); i++) {
                var objectCurrent = objects[i];
                var objectNext = objects[i + 1];
                if (!this.IsSwapQueryOrderBy(sorts, objectCurrent, objectNext))
                    continue;
                sorted = true;
                objects[i] = objectNext;
                objects[i + 1] = objectCurrent;
            }
        }
        return (objects);
    };
    DrapoStorage.prototype.IsSwapQueryOrderBy = function (sorts, objectCurrent, objectNext) {
        for (var i = 0; i < sorts.length; i++) {
            var sort = sorts[i];
            var value = this.GetSwapQueryOrderBy(sort, objectCurrent, objectNext);
            if (value == 0)
                continue;
            if (value < 0)
                return (true);
            return (false);
        }
        return (false);
    };
    DrapoStorage.prototype.GetSwapQueryOrderBy = function (sort, objectCurrent, objectNext) {
        var propertyCurrent = objectCurrent[sort.Column];
        var propertyNext = objectNext[sort.Column];
        if (propertyCurrent == propertyNext)
            return (0);
        var value = propertyNext > propertyCurrent ? 1 : -1;
        if (sort.Type == 'DESC')
            value = 0 - value;
        return (value);
    };
    return DrapoStorage;
}());

"use strict";
var DrapoStorageItem = (function () {
    function DrapoStorageItem(dataKey, type, access, element, data, urlGet, urlSet, urlParameters, postGet, start, increment, isIncremental, isFull, isUnitOfWork, isDelay, cookieName, isCookieChange, userConfig, isToken, sector, groups, pipes, channels, canCache, cacheKeys, onLoad, onAfterLoad, onAfterContainerLoad, onBeforeContainerUnload, onAfterCached, onNotify, headersGet, headersSet, pollingKey, pollingTimespan) {
        this._dataKey = null;
        this._type = null;
        this._access = null;
        this._data = [];
        this._dataInserted = [];
        this._dataUpdated = [];
        this._dataDeleted = [];
        this._urlGet = null;
        this._urlSet = null;
        this._urlParameters = null;
        this._postGet = null;
        this._start = null;
        this._increment = null;
        this._isIncremental = false;
        this._isFull = false;
        this._isGrowing = false;
        this._isUnitOfWork = false;
        this._isDelay = false;
        this._cookieName = null;
        this._isCookieChange = false;
        this._userConfig = null;
        this._isToken = false;
        this._sector = null;
        this._groups = null;
        this._pipes = null;
        this._channels = null;
        this._canCache = true;
        this._cacheKeys = null;
        this._onLoad = null;
        this._onAfterLoad = null;
        this._onAfterContainerLoad = null;
        this._onBeforeContainerUnload = null;
        this._onAfterCached = null;
        this._onNotify = null;
        this._headersGet = [];
        this._headersSet = [];
        this._hasChanges = false;
        this._pollingKey = null;
        this._pollingTimespan = null;
        this._pollingDate = null;
        this._pollingHash = null;
        this._dataKey = dataKey;
        this._type = type;
        this._access = access;
        this._element = element;
        this._data = data;
        this._urlGet = urlGet;
        this._urlSet = urlSet;
        this._urlParameters = urlParameters;
        this._postGet = postGet;
        this._start = start;
        this._increment = increment;
        this._isIncremental = isIncremental;
        this._isFull = isFull;
        this._isUnitOfWork = isUnitOfWork;
        this._isDelay = isDelay;
        this._cookieName = cookieName;
        this._isCookieChange = isCookieChange;
        this._userConfig = userConfig;
        this._isToken = isToken;
        this._sector = sector;
        this._groups = groups;
        this._pipes = pipes;
        this._channels = channels;
        this._canCache = canCache;
        this._cacheKeys = cacheKeys;
        this._onLoad = onLoad;
        this._onAfterLoad = onAfterLoad == null ? null : onAfterLoad;
        this._onAfterContainerLoad = onAfterContainerLoad == null ? null : onAfterContainerLoad;
        this._onBeforeContainerUnload = onBeforeContainerUnload == null ? null : onBeforeContainerUnload;
        this._onAfterCached = onAfterCached == null ? null : onAfterCached;
        this._onNotify = onNotify == null ? null : onNotify;
        this._headersGet = headersGet;
        this._headersSet = headersSet;
        this._pollingKey = pollingKey;
        this._pollingTimespan = pollingTimespan;
        this.Initialize();
    }
    Object.defineProperty(DrapoStorageItem.prototype, "DataKey", {
        get: function () {
            return (this._dataKey);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Type", {
        get: function () {
            return (this._type);
        },
        set: function (value) {
            this._type = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Access", {
        get: function () {
            return (this._access);
        },
        set: function (value) {
            this._access = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Element", {
        get: function () {
            return (this._element);
        },
        set: function (value) {
            this._element = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Data", {
        get: function () {
            return (this._data);
        },
        set: function (value) {
            this._data = value;
            this._isFull = false;
            this._isGrowing = false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "DataInserted", {
        get: function () {
            return (this._dataInserted);
        },
        set: function (value) {
            this._dataInserted = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "DataUpdated", {
        get: function () {
            return (this._dataUpdated);
        },
        set: function (value) {
            this._dataUpdated = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "DataDeleted", {
        get: function () {
            return (this._dataDeleted);
        },
        set: function (value) {
            this._dataDeleted = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "UrlGet", {
        get: function () {
            return (this._urlGet);
        },
        set: function (value) {
            this._urlGet = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "UrlSet", {
        get: function () {
            return (this._urlSet);
        },
        set: function (value) {
            this._urlSet = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "UrlParameters", {
        get: function () {
            return (this._urlParameters);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsUrlParametersRequired", {
        get: function () {
            return (this._urlParameters === 'required');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "PostGet", {
        get: function () {
            return (this._postGet);
        },
        set: function (value) {
            this._postGet = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Start", {
        get: function () {
            return (this._start);
        },
        set: function (value) {
            this._start = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Increment", {
        get: function () {
            return (this._increment);
        },
        set: function (value) {
            this._increment = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsIncremental", {
        get: function () {
            return (this._isIncremental);
        },
        set: function (value) {
            this._isIncremental = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsFull", {
        get: function () {
            return (this._isFull);
        },
        set: function (value) {
            this._isFull = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsGrowing", {
        get: function () {
            return (this._isGrowing);
        },
        set: function (value) {
            this._isGrowing = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsUnitOfWork", {
        get: function () {
            return (this._isUnitOfWork);
        },
        set: function (value) {
            this._isUnitOfWork = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsDelay", {
        get: function () {
            return (this._isDelay);
        },
        set: function (value) {
            this._isDelay = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "CookieName", {
        get: function () {
            return (this._cookieName);
        },
        set: function (value) {
            this._cookieName = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsCookieChange", {
        get: function () {
            return (this._isCookieChange);
        },
        set: function (value) {
            this._isCookieChange = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "UserConfig", {
        get: function () {
            return (this._userConfig);
        },
        set: function (value) {
            this._userConfig = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsTypeValue", {
        get: function () {
            return (this._type === 'value');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsTypeObject", {
        get: function () {
            return (this._type === 'object');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsTypeParent", {
        get: function () {
            return (this._type === 'parent');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsTypeArray", {
        get: function () {
            return ((this._type === 'array') || (Array.isArray(this.Data)));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsTypeFunction", {
        get: function () {
            return (this._type === 'function');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsAccessPublic", {
        get: function () {
            return (this._access === 'public');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsAccessPrivate", {
        get: function () {
            return (this._access === 'private');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "IsToken", {
        get: function () {
            return (this._isToken);
        },
        set: function (value) {
            this._isToken = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Pipes", {
        get: function () {
            return (this._pipes);
        },
        set: function (value) {
            this._pipes = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "Channels", {
        get: function () {
            return (this._channels);
        },
        set: function (value) {
            this._channels = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "CanCache", {
        get: function () {
            return (this._canCache);
        },
        set: function (value) {
            this._canCache = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "CacheKeys", {
        get: function () {
            return (this._cacheKeys);
        },
        set: function (value) {
            this._cacheKeys = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "OnLoad", {
        get: function () {
            return (this._onLoad);
        },
        set: function (value) {
            this._onLoad = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "OnAfterLoad", {
        get: function () {
            return (this._onAfterLoad);
        },
        set: function (value) {
            this._onAfterLoad = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "OnAfterContainerLoad", {
        get: function () {
            return (this._onAfterContainerLoad);
        },
        set: function (value) {
            this._onAfterContainerLoad = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "OnBeforeContainerUnload", {
        get: function () {
            return (this._onBeforeContainerUnload);
        },
        set: function (value) {
            this._onBeforeContainerUnload = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "OnAfterCached", {
        get: function () {
            return (this._onAfterCached);
        },
        set: function (value) {
            this._onAfterCached = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "OnNotify", {
        get: function () {
            return (this._onNotify);
        },
        set: function (value) {
            this._onNotify = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "HeadersGet", {
        get: function () {
            return (this._headersGet);
        },
        set: function (value) {
            this._headersGet = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "HeadersSet", {
        get: function () {
            return (this._headersSet);
        },
        set: function (value) {
            this._headersSet = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "HasChanges", {
        get: function () {
            return (this._hasChanges);
        },
        set: function (value) {
            this._hasChanges = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "PollingKey", {
        get: function () {
            return (this._pollingKey);
        },
        set: function (value) {
            this._pollingKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "PollingTimespan", {
        get: function () {
            return (this._pollingTimespan);
        },
        set: function (value) {
            this._pollingTimespan = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "PollingDate", {
        get: function () {
            return (this._pollingDate);
        },
        set: function (value) {
            this._pollingDate = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoStorageItem.prototype, "PollingHash", {
        get: function () {
            return (this._pollingHash);
        },
        set: function (value) {
            this._pollingHash = value;
        },
        enumerable: false,
        configurable: true
    });
    DrapoStorageItem.prototype.Initialize = function () {
        if (this._access == null)
            this._access = this.IsTypeParent ? 'private' : 'public';
        this.CheckpointPolling();
    };
    DrapoStorageItem.prototype.CheckpointPolling = function () {
        if (this._pollingTimespan === null)
            return;
        var currentDate = new Date();
        currentDate.setMilliseconds(currentDate.getMilliseconds() + this._pollingTimespan);
        this._pollingDate = currentDate;
    };
    DrapoStorageItem.prototype.ContainsGroup = function (group) {
        if (this._groups == null)
            return (false);
        for (var i = 0; i < this._groups.length; i++)
            if (this._groups[i] === group)
                return (true);
        return (false);
    };
    return DrapoStorageItem;
}());

"use strict";
var DrapoStorageLinkType;
(function (DrapoStorageLinkType) {
    DrapoStorageLinkType[DrapoStorageLinkType["Render"] = 0] = "Render";
    DrapoStorageLinkType[DrapoStorageLinkType["RenderClass"] = 1] = "RenderClass";
    DrapoStorageLinkType[DrapoStorageLinkType["Reload"] = 2] = "Reload";
    DrapoStorageLinkType[DrapoStorageLinkType["Pointer"] = 3] = "Pointer";
})(DrapoStorageLinkType || (DrapoStorageLinkType = {}));

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoStylist = (function () {
    function DrapoStylist(application) {
        this._application = application;
    }
    Object.defineProperty(DrapoStylist.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoStylist.prototype.Create = function (values, name) {
        if (name === void 0) { name = null; }
        var styleName = ((name === null) || (name === '')) ? this.CreateStyleName() : name;
        var elStyle = document.createElement('style');
        elStyle.id = styleName;
        elStyle.type = 'text/css';
        var style = this.StringfyValues(values);
        elStyle.innerHTML = '.' + styleName + ' \n{\n ' + style + ' }';
        document.head.appendChild(elStyle);
        return (styleName);
    };
    DrapoStylist.prototype.CreateStyleName = function () {
        return ('s-' + this.Application.Document.CreateGuid());
    };
    DrapoStylist.prototype.StringfyValues = function (values) {
        var valueText = '';
        for (var i = 0; i < values.length; i++) {
            var entry = values[i];
            var valueEntry = entry[0] + ':' + entry[1] + ';\n';
            valueText += valueEntry;
        }
        return (valueText);
    };
    DrapoStylist.prototype.ReloadStyles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var reloaded, length, i, childNode, link, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reloaded = [];
                        length = document.head.childNodes.length;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < length)) return [3, 4];
                        childNode = document.head.childNodes[i];
                        if (childNode.nodeName.toLowerCase() !== 'link')
                            return [3, 3];
                        link = childNode;
                        url = link.href;
                        if (reloaded.indexOf(url) >= 0)
                            return [3, 3];
                        reloaded.push(url);
                        document.head.removeChild(childNode);
                        return [4, this.AddStyleToDocument(url)];
                    case 2:
                        _a.sent();
                        if (i === length - 1)
                            return [3, 4];
                        i--;
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoStylist.prototype.AddStyleToDocument = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var link;
            return __generator(this, function (_a) {
                link = document.createElement('link');
                link.href = url;
                link.rel = 'stylesheet';
                document.head.appendChild(link);
                return [2];
            });
        });
    };
    DrapoStylist.prototype.GetElementStyleProperty = function (el, name) {
        var elStyle = window.getComputedStyle(el);
        var value = elStyle.getPropertyValue(name);
        return (value);
    };
    DrapoStylist.prototype.SetElementStyleProperty = function (el, name, value) {
        var elStyle = window.getComputedStyle(el);
        elStyle.setProperty(name, value);
    };
    return DrapoStylist;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoValidator = (function () {
    function DrapoValidator(application) {
        this._sectors = [];
        this._sectorsValidationRuleIDs = [];
        this._sectorsValidationRuleTypes = [];
        this._sectorsValidationRuleValues = [];
        this._sectorsValidationRuleTags = [];
        this._sectorsValidationRuleContexts = [];
        this._sectorsValidationGroupGroups = [];
        this._sectorsValidationGroupRules = [];
        this._sectorsValidationGroupContexts = [];
        this._sectorsValidationInterfaceIDs = [];
        this._sectorsValidationInterfaceElements = [];
        this._sectorsValidationInterfaceContexts = [];
        this._application = application;
    }
    Object.defineProperty(DrapoValidator.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoValidator.prototype.HasContentValidation = function (content) {
        return (content.indexOf('d-validation') > -1);
    };
    DrapoValidator.prototype.UnloadSectorHierarchy = function (sector) {
        var sectorChildren = this.Application.Document.GetSectorAndChildren(sector);
        for (var i = 0; i < sectorChildren.length; i++)
            this.UnloadSector(sectorChildren[i]);
    };
    DrapoValidator.prototype.UnloadSector = function (sector) {
        var index = this.GetSectorIndex(sector);
        if (index === null)
            return;
        this._sectors.splice(index, 1);
        this._sectorsValidationRuleIDs.splice(index, 1);
        this._sectorsValidationRuleTypes.splice(index, 1);
        this._sectorsValidationRuleValues.splice(index, 1);
        this._sectorsValidationRuleTags.splice(index, 1);
        this._sectorsValidationRuleContexts.splice(index, 1);
        this._sectorsValidationGroupGroups.splice(index, 1);
        this._sectorsValidationGroupRules.splice(index, 1);
        this._sectorsValidationGroupContexts.splice(index, 1);
        this._sectorsValidationInterfaceIDs.splice(index, 1);
        this._sectorsValidationInterfaceElements.splice(index, 1);
        this._sectorsValidationInterfaceContexts.splice(index, 1);
    };
    DrapoValidator.prototype.RegisterValidation = function (el, sector, context) {
        if (context === void 0) { context = null; }
        return __awaiter(this, void 0, void 0, function () {
            var validations, contextItem, validationID, validationIDResolved, validationType, validationValue, validationGroup, validationGroups, validationTag, validation, validationResolved, validatorUncheckedClass;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        validations = this.ExtractValidations(el);
                        if (validations.length === 0)
                            return [2];
                        if ((context == null) && (this.Application.Document.IsElementInsideControlFlowOrContext(el)))
                            return [2];
                        contextItem = context != null ? context.Item : null;
                        validationID = this.Application.Solver.Get(validations, 'id');
                        return [4, this.ResolveValidationID(sector, validationID, contextItem)];
                    case 1:
                        validationIDResolved = _a.sent();
                        if (validationIDResolved != null) {
                            validationType = this.Application.Solver.Get(validations, 'type');
                            validationValue = this.Application.Solver.Get(validations, 'value');
                            validationGroup = this.Application.Solver.Get(validations, 'group');
                            validationGroups = this.Application.Parser.ParseValidationGroups(validationGroup);
                            validationTag = this.GetValidationTag(validations, validationType);
                            this.AddValidationRule(sector, validationIDResolved, validationType, validationValue, validationTag, contextItem);
                            this.AddValidationGroups(sector, validationIDResolved, validationGroups, contextItem);
                        }
                        validation = this.Application.Solver.Get(validations, '');
                        return [4, this.ResolveValidationID(sector, validation, contextItem)];
                    case 2:
                        validationResolved = _a.sent();
                        if (!(validationResolved != null)) return [3, 4];
                        this.AddValidationInterface(sector, validationResolved, el, contextItem);
                        return [4, this.Application.Config.GetValidatorUncheckedClass()];
                    case 3:
                        validatorUncheckedClass = _a.sent();
                        if (validatorUncheckedClass != null) {
                            el.classList.add(validatorUncheckedClass);
                        }
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    DrapoValidator.prototype.ResolveValidationID = function (sector, validationID, contextItem) {
        return __awaiter(this, void 0, void 0, function () {
            var validationIDContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Application.Parser.HasMustache(validationID))
                            return [2, (validationID)];
                        if (!(contextItem == null)) return [3, 2];
                        return [4, this.Application.Storage.ResolveMustachesRecursive(sector, validationID)];
                    case 1: return [2, (_a.sent())];
                    case 2: return [4, this.Application.Barber.ResolveControlFlowMustacheString(contextItem.Context, null, null, validationID, null, sector, false)];
                    case 3:
                        validationIDContext = _a.sent();
                        return [2, (validationIDContext)];
                }
            });
        });
    };
    DrapoValidator.prototype.GetValidationTag = function (validations, validationType) {
        if (validationType === 'regex')
            return (this.Application.Solver.Get(validations, 'expression'));
        if (validationType === 'compare')
            return (this.Application.Solver.Get(validations, 'valuetocompare'));
        if (validationType === 'outside')
            return (this.Application.Solver.Get(validations, 'sector'));
        return (null);
    };
    DrapoValidator.prototype.IsValidationEventValid = function (el, sector, eventType, location, event, contextItem) {
        return __awaiter(this, void 0, void 0, function () {
            var attribute, validation, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (el.getAttribute == null)
                            return [2, (true)];
                        attribute = location == null ? 'd-validation-on-' + eventType : 'd-validation-on-' + location + '-' + eventType;
                        validation = el.getAttribute(attribute);
                        if (validation == null)
                            return [2, (true)];
                        return [4, this.IsValidationExpressionValid(el, sector, validation, contextItem, event)];
                    case 1:
                        isValid = _a.sent();
                        return [2, (isValid)];
                }
            });
        });
    };
    DrapoValidator.prototype.IsValidationExpressionValid = function (el, sector, validation, contextItem, event) {
        if (event === void 0) { event = null; }
        return __awaiter(this, void 0, void 0, function () {
            var uncheckedClass, validClass, invalidClass, validations, isValid, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetValidatorUncheckedClass()];
                    case 1:
                        uncheckedClass = _a.sent();
                        return [4, this.Application.Config.GetValidatorValidClass()];
                    case 2:
                        validClass = _a.sent();
                        return [4, this.Application.Config.GetValidatorInvalidClass()];
                    case 3:
                        invalidClass = _a.sent();
                        return [4, this.ResolveValidations(sector, validation, contextItem)];
                    case 4:
                        validations = _a.sent();
                        isValid = true;
                        i = 0;
                        _a.label = 5;
                    case 5:
                        if (!(i < validations.length)) return [3, 8];
                        return [4, this.IsValidationValid(sector, validations[i], el, event, isValid, uncheckedClass, validClass, invalidClass)];
                    case 6:
                        if (!(_a.sent()))
                            isValid = false;
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3, 5];
                    case 8: return [2, (isValid)];
                }
            });
        });
    };
    DrapoValidator.prototype.UncheckValidationExpression = function (el, sector, validation, contextItem) {
        return __awaiter(this, void 0, void 0, function () {
            var uncheckedClass, validClass, invalidClass, validations, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetValidatorUncheckedClass()];
                    case 1:
                        uncheckedClass = _a.sent();
                        return [4, this.Application.Config.GetValidatorValidClass()];
                    case 2:
                        validClass = _a.sent();
                        return [4, this.Application.Config.GetValidatorInvalidClass()];
                    case 3:
                        invalidClass = _a.sent();
                        return [4, this.ResolveValidations(sector, validation, contextItem)];
                    case 4:
                        validations = _a.sent();
                        for (i = 0; i < validations.length; i++)
                            this.UncheckValidation(sector, validations[i], uncheckedClass, validClass, invalidClass);
                        return [2];
                }
            });
        });
    };
    DrapoValidator.prototype.GetSectorIndex = function (sector) {
        for (var i = 0; i < this._sectors.length; i++)
            if (this._sectors[i] === sector)
                return (i);
        return (null);
    };
    DrapoValidator.prototype.GetIndex = function (list, value) {
        for (var i = 0; i < list.length; i++)
            if (list[i] === value)
                return (i);
        return (null);
    };
    DrapoValidator.prototype.GetElement = function (elements, element) {
        for (var i = 0; i < elements.length; i++)
            if (elements[i] === element)
                return (i);
        return (null);
    };
    DrapoValidator.prototype.EnsureSector = function (sector) {
        var index = this.GetSectorIndex(sector);
        if (index !== null)
            return (index);
        this._sectors.push(sector);
        this._sectorsValidationRuleIDs.push([]);
        this._sectorsValidationRuleTypes.push([]);
        this._sectorsValidationRuleValues.push([]);
        this._sectorsValidationRuleTags.push([]);
        this._sectorsValidationRuleContexts.push([]);
        this._sectorsValidationGroupGroups.push([]);
        this._sectorsValidationGroupRules.push([]);
        this._sectorsValidationGroupContexts.push([]);
        this._sectorsValidationInterfaceIDs.push([]);
        this._sectorsValidationInterfaceElements.push([]);
        this._sectorsValidationInterfaceContexts.push([]);
        return (this._sectors.length - 1);
    };
    DrapoValidator.prototype.AddValidationRule = function (sector, validationID, validationType, validationValue, validationTag, contextItem) {
        var index = this.EnsureSector(sector);
        var ruleIDs = this._sectorsValidationRuleIDs[index];
        var ruleIDIndex = this.GetIndex(ruleIDs, validationID);
        if (ruleIDIndex !== null)
            return;
        var ruleTypes = this._sectorsValidationRuleTypes[index];
        var ruleValues = this._sectorsValidationRuleValues[index];
        var ruleTags = this._sectorsValidationRuleTags[index];
        var ruleContexts = this._sectorsValidationRuleContexts[index];
        ruleIDs.push(validationID);
        ruleTypes.push(validationType);
        ruleValues.push(validationValue);
        ruleTags.push(validationTag);
        ruleContexts.push(contextItem);
    };
    DrapoValidator.prototype.AddValidationGroups = function (sector, validationID, validationGroups, contextItem) {
        for (var i = 0; i < validationGroups.length; i++)
            this.AddValidationGroup(sector, validationID, validationGroups[i], contextItem);
    };
    DrapoValidator.prototype.AddValidationGroup = function (sector, validationID, validationGroup, contextItem) {
        var index = this.EnsureSector(sector);
        var groups = this._sectorsValidationGroupGroups[index];
        var groupsRules = this._sectorsValidationGroupRules[index];
        var groupsContext = this._sectorsValidationGroupContexts[index];
        var groupIndex = this.GetIndex(groups, validationGroup);
        if (groupIndex === null) {
            groups.push(validationGroup);
            groupsRules.push([validationID]);
            groupsContext.push([contextItem]);
        }
        else {
            var groupRules = groupsRules[groupIndex];
            var groupContext = groupsContext[groupIndex];
            var ruleIndex = this.GetIndex(groupRules, validationID);
            if (ruleIndex === null) {
                groupRules.push(validationID);
                groupContext.push(contextItem);
            }
        }
    };
    DrapoValidator.prototype.AddValidationInterface = function (sector, validationID, el, contextItem) {
        var index = this.EnsureSector(sector);
        var interfacesIDs = this._sectorsValidationInterfaceIDs[index];
        var interfacesElements = this._sectorsValidationInterfaceElements[index];
        var interfacesContexts = this._sectorsValidationInterfaceContexts[index];
        var idIndex = this.GetIndex(interfacesIDs, validationID);
        if (idIndex === null) {
            interfacesIDs.push(validationID);
            interfacesElements.push([el]);
            interfacesContexts.push([contextItem]);
        }
        else {
            var interfaceElements = interfacesElements[idIndex];
            var interfaceContexts = interfacesContexts[idIndex];
            var elementIndex = this.GetElement(interfaceElements, el);
            if (elementIndex === null) {
                interfaceElements.push(el);
                interfaceContexts.push(contextItem);
            }
        }
    };
    DrapoValidator.prototype.ExtractValidations = function (el) {
        var attributes = [];
        for (var i = 0; i < el.attributes.length; i++) {
            var attribute = el.attributes[i];
            var attributeProperty = this.ExtractValidationProperty(attribute.nodeName);
            if (attributeProperty != null)
                attributes.push([attributeProperty, attribute.nodeValue]);
        }
        return (attributes);
    };
    DrapoValidator.prototype.ExtractValidationProperty = function (property) {
        var parse = this.Application.Parser.ParseProperty(property);
        if (parse[0] != 'd')
            return (null);
        if (parse[1].toLowerCase() != 'validation')
            return (null);
        if (parse.length === 2)
            return ('');
        return (parse[2]);
    };
    DrapoValidator.prototype.ResolveValidations = function (sector, validation, contextItem) {
        return __awaiter(this, void 0, void 0, function () {
            var validationResolved, validations, validatorsArray, i, validator, validatorConditional, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        validationResolved = null;
                        if (!this.Application.Parser.IsMustacheOnly(validation)) return [3, 2];
                        return [4, this.Application.Barber.ResolveControlFlowMustacheString(contextItem == null ? null : contextItem.Context, null, null, validation, null, sector, false)];
                    case 1:
                        validationResolved = _b.sent();
                        return [3, 3];
                    case 2:
                        validationResolved = validation;
                        _b.label = 3;
                    case 3:
                        validations = [];
                        if (!this.Application.Parser.IsValidatorArray(validationResolved)) return [3, 9];
                        validatorsArray = this.ExtractValidators(validationResolved);
                        i = 0;
                        _b.label = 4;
                    case 4:
                        if (!(i < validatorsArray.length)) return [3, 8];
                        validator = validatorsArray[i];
                        validatorConditional = validator[1];
                        _a = (validatorConditional != null);
                        if (!_a) return [3, 6];
                        return [4, this.IsValidConditional(sector, validatorConditional, contextItem)];
                    case 5:
                        _a = (!(_b.sent()));
                        _b.label = 6;
                    case 6:
                        if (_a)
                            return [3, 7];
                        validations.push(validator[0]);
                        _b.label = 7;
                    case 7:
                        i++;
                        return [3, 4];
                    case 8: return [3, 10];
                    case 9:
                        validations.push(validationResolved);
                        _b.label = 10;
                    case 10: return [2, (validations)];
                }
            });
        });
    };
    DrapoValidator.prototype.ExtractValidators = function (validation) {
        var validators = [];
        var parsedValidators = this.Application.Parser.ParseValidatorsArray(validation);
        for (var i = 0; i < parsedValidators.length; i++) {
            var parsedValidator = parsedValidators[i];
            var parseValidator = this.Application.Parser.ParseValidator(parsedValidator);
            if (parseValidator != null)
                validators.push(parseValidator);
        }
        return (validators);
    };
    DrapoValidator.prototype.IsValidationValid = function (sector, validation, el, event, canFocus, uncheckedClass, validClass, invalidClass) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.IsValidationGroup(sector, validation)) return [3, 2];
                        return [4, this.IsValidationGroupValid(sector, validation, el, event, canFocus, uncheckedClass, validClass, invalidClass)];
                    case 1: return [2, (_a.sent())];
                    case 2: return [4, this.IsValidationRuleValid(sector, validation, el, event, canFocus, uncheckedClass, validClass, invalidClass)];
                    case 3: return [2, (_a.sent())];
                }
            });
        });
    };
    DrapoValidator.prototype.IsValidationGroup = function (sector, validation) {
        var index = this.GetSectorIndex(sector);
        if (index === null)
            return (false);
        var groups = this._sectorsValidationGroupGroups[index];
        var groupIndex = this.GetIndex(groups, validation);
        return (groupIndex !== null);
    };
    DrapoValidator.prototype.IsValidationGroupValid = function (sector, validation, el, event, canFocus, uncheckedClass, validClass, invalidClass) {
        return __awaiter(this, void 0, void 0, function () {
            var rules, isValid, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rules = this.GetValidationGroupRules(sector, validation);
                        isValid = true;
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < rules.length)) return [3, 4];
                        return [4, this.IsValidationRuleValid(sector, rules[i], el, event, (canFocus && isValid), uncheckedClass, validClass, invalidClass)];
                    case 2:
                        if (!(_a.sent()))
                            isValid = false;
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [2, (isValid)];
                }
            });
        });
    };
    DrapoValidator.prototype.GetValidationGroupRules = function (sector, validation) {
        var index = this.GetSectorIndex(sector);
        if (index === null)
            return ([]);
        var groups = this._sectorsValidationGroupGroups[index];
        var groupIndex = this.GetIndex(groups, validation);
        if (groupIndex === null)
            return ([]);
        var groupsRules = this._sectorsValidationGroupRules[index];
        var rules = groupsRules[groupIndex];
        return (rules);
    };
    DrapoValidator.prototype.IsValidationRuleValid = function (sector, validation, el, event, canFocus, uncheckedClass, validClass, invalidClass) {
        return __awaiter(this, void 0, void 0, function () {
            var isValid, addClass, removeClass, elements, i, element;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.IsRuleValid(sector, validation, canFocus, el, event)];
                    case 1:
                        isValid = _a.sent();
                        addClass = isValid ? validClass : invalidClass;
                        removeClass = (!isValid) ? validClass : invalidClass;
                        elements = this.GetValidationRuleElements(sector, validation);
                        for (i = 0; i < elements.length; i++) {
                            element = elements[i];
                            if (uncheckedClass != null)
                                element.classList.remove(uncheckedClass);
                            element.classList.remove(removeClass);
                            element.classList.add(addClass);
                        }
                        return [2, (isValid)];
                }
            });
        });
    };
    DrapoValidator.prototype.GetValidationRuleElements = function (sector, validation) {
        var index = this.GetSectorIndex(sector);
        if (index === null)
            return ([]);
        var interfacesIDs = this._sectorsValidationInterfaceIDs[index];
        var interfacesElements = this._sectorsValidationInterfaceElements[index];
        var idIndex = this.GetIndex(interfacesIDs, validation);
        if (idIndex === null)
            return ([]);
        var interfaceElements = interfacesElements[idIndex];
        return (interfaceElements);
    };
    DrapoValidator.prototype.IsRuleValid = function (sector, validation, canFocus, el, event) {
        return __awaiter(this, void 0, void 0, function () {
            var index, ruleIDs, ruleIDIndex, ruleTypes, type, ruleValues, value, ruleTags, tag, ruleContexts, itemContext, isValid, element;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        index = this.GetSectorIndex(sector);
                        if (index === null)
                            return [2, (true)];
                        ruleIDs = this._sectorsValidationRuleIDs[index];
                        ruleIDIndex = this.GetIndex(ruleIDs, validation);
                        if (ruleIDIndex === null)
                            return [2, (true)];
                        ruleTypes = this._sectorsValidationRuleTypes[index];
                        type = ruleTypes[ruleIDIndex];
                        ruleValues = this._sectorsValidationRuleValues[index];
                        value = ruleValues[ruleIDIndex];
                        ruleTags = this._sectorsValidationRuleTags[index];
                        tag = ruleTags[ruleIDIndex];
                        ruleContexts = this._sectorsValidationRuleContexts[index];
                        itemContext = ruleContexts[ruleIDIndex];
                        return [4, this.IsValid(sector, type, value, tag, itemContext, el, event)];
                    case 1:
                        isValid = _a.sent();
                        if ((!isValid) && (canFocus)) {
                            element = this.Application.Observer.GetElementByModel(sector, value);
                            if (element != null)
                                element.focus();
                        }
                        return [2, (isValid)];
                }
            });
        });
    };
    DrapoValidator.prototype.IsValid = function (sector, type, value, tag, itemContext, el, event) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!((type == null) || (type == 'conditional'))) return [3, 2];
                        return [4, this.IsValidConditional(sector, value, itemContext)];
                    case 1: return [2, (_a.sent())];
                    case 2:
                        if (!(type === 'regex')) return [3, 4];
                        return [4, this.IsValidRegex(sector, value, tag, itemContext)];
                    case 3: return [2, (_a.sent())];
                    case 4:
                        if (!(type === 'compare')) return [3, 6];
                        return [4, this.IsValidCompare(sector, value, tag, itemContext)];
                    case 5: return [2, (_a.sent())];
                    case 6:
                        if (!(type === 'outside')) return [3, 8];
                        return [4, this.IsValidOutside(el, event, tag)];
                    case 7: return [2, (_a.sent())];
                    case 8: return [4, this.Application.ExceptionHandler.HandleError('Drapo: There is no validation rule of type: {0}', type)];
                    case 9:
                        _a.sent();
                        return [2, (false)];
                }
            });
        });
    };
    DrapoValidator.prototype.IsValidConditional = function (sector, value, itemContext) {
        return __awaiter(this, void 0, void 0, function () {
            var context, valueResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = this.CreateContext(itemContext);
                        return [4, this.Application.Solver.ResolveConditional(value, null, sector, context)];
                    case 1:
                        valueResult = _a.sent();
                        return [2, (valueResult)];
                }
            });
        });
    };
    DrapoValidator.prototype.IsValidRegex = function (sector, value, expression, itemContext) {
        return __awaiter(this, void 0, void 0, function () {
            var context, expressionsResolved, valueResolved, regex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = this.CreateContext(itemContext);
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, expression, null, false)];
                    case 1:
                        expressionsResolved = _a.sent();
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, value, null, false)];
                    case 2:
                        valueResolved = _a.sent();
                        regex = new RegExp(expressionsResolved);
                        return [2, (regex.test(valueResolved))];
                }
            });
        });
    };
    DrapoValidator.prototype.IsValidCompare = function (sector, value, valueToCompare, itemContext) {
        return __awaiter(this, void 0, void 0, function () {
            var context, valueResolved, valueToCompareResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context = this.CreateContext(itemContext);
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, value, null, false)];
                    case 1:
                        valueResolved = _a.sent();
                        return [4, this.Application.Barber.ResolveControlFlowMustacheStringFunction(sector, context, null, null, valueToCompare, null, false)];
                    case 2:
                        valueToCompareResolved = _a.sent();
                        return [2, (valueResolved == valueToCompareResolved)];
                }
            });
        });
    };
    DrapoValidator.prototype.CreateContext = function (itemContext) {
        var context = new DrapoContext(itemContext);
        return (context);
    };
    DrapoValidator.prototype.IsValidOutside = function (el, event, validSectors) {
        return __awaiter(this, void 0, void 0, function () {
            var target, sectorsAllowed, sectorTarget, sectors, i;
            return __generator(this, function (_a) {
                target = event.target;
                if (validSectors != null) {
                    sectorsAllowed = [];
                    sectorTarget = this.Application.Document.GetSector(target);
                    sectors = this.Application.Parser.ParseTags(validSectors);
                    for (i = 0; i < sectors.length; i++)
                        sectorsAllowed = this.Application.Solver.Join(sectorsAllowed, this.Application.Document.GetSectorAndChildren(sectors[i]));
                    if (!this.Application.Solver.Contains(sectorsAllowed, sectorTarget))
                        return [2, (false)];
                }
                while (target != null) {
                    if (el === target)
                        return [2, (false)];
                    if (target.parentElement)
                        target = target.parentElement;
                    else
                        target = null;
                }
                return [2, (true)];
            });
        });
    };
    DrapoValidator.prototype.UncheckValidation = function (sector, validation, uncheckedClass, validClass, invalidClass) {
        if (this.IsValidationGroup(sector, validation))
            this.UncheckValidationGroup(sector, validation, uncheckedClass, validClass, invalidClass);
        else
            this.UncheckValidationRule(sector, validation, uncheckedClass, validClass, invalidClass);
    };
    DrapoValidator.prototype.UncheckValidationGroup = function (sector, validation, uncheckedClass, validClass, invalidClass) {
        var rules = this.GetValidationGroupRules(sector, validation);
        for (var i = 0; i < rules.length; i++)
            this.UncheckValidationRule(sector, rules[i], uncheckedClass, validClass, invalidClass);
    };
    DrapoValidator.prototype.UncheckValidationRule = function (sector, validation, uncheckedClass, validClass, invalidClass) {
        var elements = this.GetValidationRuleElements(sector, validation);
        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            element.classList.remove(validClass);
            element.classList.remove(invalidClass);
            if (uncheckedClass != null)
                element.classList.add(uncheckedClass);
        }
    };
    DrapoValidator.prototype.IsValidatorInterface = function (el) {
        var attributeValidation = el.getAttribute('d-validation');
        return ((attributeValidation != null) && (attributeValidation != ''));
    };
    return DrapoValidator;
}());

"use strict";
var DrapoView = (function () {
    function DrapoView() {
        this._name = null;
        this._tag = null;
        this._condition = null;
    }
    Object.defineProperty(DrapoView.prototype, "Name", {
        get: function () {
            return (this._name);
        },
        set: function (value) {
            this._name = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoView.prototype, "Tag", {
        get: function () {
            return (this._tag);
        },
        set: function (value) {
            this._tag = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoView.prototype, "Condition", {
        get: function () {
            return (this._condition);
        },
        set: function (value) {
            this._condition = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoView;
}());

"use strict";
var DrapoViewport = (function () {
    function DrapoViewport() {
        this._busy = false;
        this._sector = null;
        this._dataKey = null;
        this._key = null;
        this._dataKeyIteratorRange = null;
        this._data = null;
        this._el = null;
        this._elScroll = null;
        this._elTemplate = null;
        this._elBallonBefore = null;
        this._elBallonAfter = null;
        this._heightScroll = null;
        this._heightScrollScroll = null;
        this._heightBefore = null;
        this._heightAfter = null;
        this._heightItem = null;
        this._heightBallonBefore = null;
        this._heightBallonAfter = null;
        this._dataStart = null;
        this._dataEnd = null;
        this._dataLength = null;
        this._factor = 4;
        this._eventScrollTimeout = null;
        this._scrollTop = null;
        this._isActive = false;
    }
    Object.defineProperty(DrapoViewport.prototype, "Busy", {
        get: function () {
            return (this._busy);
        },
        set: function (value) {
            this._busy = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "Sector", {
        get: function () {
            return (this._sector);
        },
        set: function (value) {
            this._sector = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "DataKey", {
        get: function () {
            return (this._dataKey);
        },
        set: function (value) {
            this._dataKey = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "Key", {
        get: function () {
            return (this._key);
        },
        set: function (value) {
            this._key = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "DataKeyIteratorRange", {
        get: function () {
            return (this._dataKeyIteratorRange);
        },
        set: function (value) {
            this._dataKeyIteratorRange = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "Data", {
        get: function () {
            return (this._data);
        },
        set: function (value) {
            this._data = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "Element", {
        get: function () {
            return (this._el);
        },
        set: function (value) {
            this._el = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "ElementTemplate", {
        get: function () {
            return (this._elTemplate);
        },
        set: function (value) {
            this._elTemplate = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "ElementBallonBefore", {
        get: function () {
            return (this._elBallonBefore);
        },
        set: function (value) {
            this._elBallonBefore = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "ElementBallonAfter", {
        get: function () {
            return (this._elBallonAfter);
        },
        set: function (value) {
            this._elBallonAfter = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "ElementScroll", {
        get: function () {
            return (this._elScroll);
        },
        set: function (value) {
            this._elScroll = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightScroll", {
        get: function () {
            return (this._heightScroll);
        },
        set: function (value) {
            this._heightScroll = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightScrollScroll", {
        get: function () {
            return (this._heightScrollScroll);
        },
        set: function (value) {
            this._heightScrollScroll = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightBefore", {
        get: function () {
            return (this._heightBefore);
        },
        set: function (value) {
            this._heightBefore = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightAfter", {
        get: function () {
            return (this._heightAfter);
        },
        set: function (value) {
            this._heightAfter = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightItem", {
        get: function () {
            return (this._heightItem);
        },
        set: function (value) {
            this._heightItem = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightBallonBefore", {
        get: function () {
            return (this._heightBallonBefore);
        },
        set: function (value) {
            this._heightBallonBefore = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "HeightBallonAfter", {
        get: function () {
            return (this._heightBallonAfter);
        },
        set: function (value) {
            this._heightBallonAfter = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "DataStart", {
        get: function () {
            return (this._dataStart);
        },
        set: function (value) {
            this._dataStart = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "DataEnd", {
        get: function () {
            return (this._dataEnd);
        },
        set: function (value) {
            this._dataEnd = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "DataLength", {
        get: function () {
            return (this._dataLength);
        },
        set: function (value) {
            this._dataLength = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "Factor", {
        get: function () {
            return (this._factor);
        },
        set: function (value) {
            this._factor = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "EventScrollTimeout", {
        get: function () {
            return (this._eventScrollTimeout);
        },
        set: function (value) {
            this._eventScrollTimeout = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "ScrollTop", {
        get: function () {
            return (this._scrollTop);
        },
        set: function (value) {
            this._scrollTop = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoViewport.prototype, "IsActive", {
        get: function () {
            return (this._isActive);
        },
        set: function (value) {
            this._isActive = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoViewport;
}());

"use strict";
var DrapoViewportHandler = (function () {
    function DrapoViewportHandler(application) {
        this._viewportPropertyName = 'viewport';
        this.MAX_SIZE = 10000;
        this._application = application;
    }
    Object.defineProperty(DrapoViewportHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoViewportHandler.prototype.CreateViewportControlFlow = function (sector, el, elTemplate, dataKey, key, dataKeyIteratorRange, data) {
        var scroll = this.GetScrollViewport(el);
        if (scroll == null)
            return (null);
        var viewportBefore = this.GetElementViewport(el);
        if (viewportBefore != null) {
            viewportBefore.IsActive = true;
            return (viewportBefore);
        }
        var elScroll = scroll[0];
        var height = this.GetElementHeight(elScroll);
        if (height == null)
            return (null);
        var viewport = new DrapoViewport();
        viewport.Sector = sector;
        viewport.Element = el;
        viewport.ElementTemplate = elTemplate;
        viewport.ElementScroll = elScroll;
        viewport.DataKey = dataKey;
        viewport.Key = key;
        viewport.DataKeyIteratorRange = dataKeyIteratorRange;
        viewport.Data = data;
        viewport.HeightScroll = height;
        viewport.HeightBefore = scroll[1];
        viewport.HeightAfter = scroll[2];
        viewport.HeightBallonBefore = 0;
        viewport.HeightBallonAfter = 0;
        viewport.DataStart = 0;
        viewport.DataEnd = data.length;
        viewport.DataLength = data.length;
        if ((elScroll.scrollTop) && elScroll.scrollTop > 0) {
            this.Application.Binder.UnbindControlFlowViewport(viewport);
            viewport.ScrollTop = viewport.ElementScroll.scrollTop;
            viewport.HeightItem = this.GetElementItemHeight(el);
            if (viewport.HeightItem != null) {
                var view = this.GetViewFactorCurrent(viewport);
                viewport.DataStart = view[0];
                viewport.DataEnd = view[1];
            }
        }
        return (viewport);
    };
    DrapoViewportHandler.prototype.GetElementViewport = function (el) {
        var elAny = el;
        var viewportBefore = elAny[this._viewportPropertyName];
        if (viewportBefore != null) {
            return (viewportBefore);
        }
        return (null);
    };
    DrapoViewportHandler.prototype.HasElementViewport = function (el) {
        return (this.GetElementViewport(el) != null);
    };
    DrapoViewportHandler.prototype.CreateViewportControlFlowBallonBefore = function (viewport, lastInserted) {
        if (viewport === null)
            return (lastInserted);
        var elBallonBeforeInDOM = this.GetBallonBefore(lastInserted);
        if (elBallonBeforeInDOM == null) {
            var elBallonBefore = document.createElement('div');
            elBallonBefore.setAttribute('d-ballon', 'before');
            elBallonBefore.style.width = '100%';
            this.FillBallon(elBallonBefore, viewport.HeightBallonBefore);
            viewport.ElementBallonBefore = elBallonBefore;
            lastInserted.after(elBallonBefore);
            return (elBallonBefore);
        }
        else {
            if (viewport.IsActive)
                return (elBallonBeforeInDOM);
            this.FillBallon(elBallonBeforeInDOM, viewport.HeightBallonBefore);
            viewport.ElementBallonBefore = elBallonBeforeInDOM;
            var elParent = elBallonBeforeInDOM.parentElement;
            while (elParent.children.length > 2)
                elParent.lastElementChild.remove();
            return (elBallonBeforeInDOM);
        }
    };
    DrapoViewportHandler.prototype.FillBallon = function (elBallon, height, isFull) {
        if (isFull === void 0) { isFull = true; }
        if (isFull) {
            elBallon.style.height = height + 'px';
        }
        else {
            while (elBallon.childNodes.length > 0)
                elBallon.childNodes[0].remove();
            if (height < this.MAX_SIZE) {
                elBallon.style.height = height + 'px';
            }
            else {
                elBallon.style.height = 'auto';
                while (height > 0) {
                    var elBallonItem = document.createElement('div');
                    elBallonItem.style.width = '100%';
                    elBallonItem.style.height = (height > this.MAX_SIZE ? this.MAX_SIZE : height) + 'px';
                    elBallon.appendChild(elBallonItem);
                    height = height - this.MAX_SIZE;
                    if (height <= 0)
                        height = 0;
                }
            }
        }
    };
    DrapoViewportHandler.prototype.GetBallonBefore = function (elTemplate) {
        var elTemplateNext = elTemplate.nextElementSibling;
        if (elTemplateNext == null)
            return (null);
        var isBallonBefore = elTemplateNext.getAttribute('d-ballon') === 'before';
        if (!isBallonBefore)
            return (null);
        return (elTemplateNext);
    };
    DrapoViewportHandler.prototype.GetElementItemHeight = function (elTemplate) {
        var elParent = elTemplate.parentElement;
        if (elParent == null)
            return (null);
        if (elParent.children.length < 4)
            return (null);
        var elBallonBefore = elTemplate.nextElementSibling;
        var elItem = elBallonBefore.nextElementSibling;
        var height = this.GetElementHeight(elItem);
        return (height);
    };
    DrapoViewportHandler.prototype.AppendViewportControlFlowBallonAfter = function (viewport, fragment) {
        if ((viewport === null) || (viewport.IsActive))
            return;
        var elBallonAfter = document.createElement('div');
        elBallonAfter.style.width = '100%';
        this.FillBallon(elBallonAfter, viewport.HeightBallonAfter);
        viewport.ElementBallonAfter = elBallonAfter;
        fragment.appendChild(elBallonAfter);
    };
    DrapoViewportHandler.prototype.ActivateViewportControlFlow = function (viewport, elItem) {
        if ((viewport === null) || (viewport.IsActive))
            return;
        if (viewport.ScrollTop != null) {
            this.UpdateValuesBallon(viewport);
            this.UpdateElementsBallon(viewport);
            viewport.ElementScroll.scrollTop = viewport.ScrollTop;
        }
        this.UpdateHeightItem(viewport, elItem, false);
        var viewportElementAny = viewport.Element;
        viewportElementAny[this._viewportPropertyName] = viewport;
        this.Application.Binder.BindControlFlowViewport(viewport);
    };
    DrapoViewportHandler.prototype.DestroyViewportControlFlow = function (viewport) {
        this.Application.Binder.UnbindControlFlowViewport(viewport);
        var viewportElementAny = viewport.Element;
        viewportElementAny[this._viewportPropertyName] = null;
    };
    DrapoViewportHandler.prototype.GetViewportControlFlowStart = function (viewport, start) {
        if (viewport === null)
            return (start);
        return (viewport.DataStart);
    };
    DrapoViewportHandler.prototype.GetViewportControlFlowEnd = function (viewport, length) {
        if (viewport === null)
            return (length);
        return (viewport.DataEnd);
    };
    DrapoViewportHandler.prototype.UpdateHeightItem = function (viewport, elItem, updateValues) {
        if (updateValues === void 0) { updateValues = true; }
        if (viewport === null)
            return (false);
        if (viewport.HeightItem !== null)
            return (false);
        if (elItem === null)
            return (false);
        var height = this.GetElementHeight(elItem);
        if (height === null)
            return (false);
        viewport.HeightItem = height;
        if (updateValues)
            this.UpdateValues(viewport);
        return (true);
    };
    DrapoViewportHandler.prototype.HasHeightChanged = function (viewport) {
        if (viewport == null)
            return (false);
        var height = this.GetElementHeight(viewport.ElementScroll);
        if (height < 100) {
            var scrollHeight = viewport.ElementScroll.scrollHeight;
            if (viewport.HeightScrollScroll == scrollHeight)
                return (false);
            viewport.HeightScrollScroll = scrollHeight;
            return (true);
        }
        if (viewport.HeightScroll == height)
            return (false);
        viewport.HeightScroll = height;
        return (true);
    };
    DrapoViewportHandler.prototype.UpdateValues = function (viewport) {
        var heightData = viewport.HeightScroll;
        if (heightData < 0)
            return;
        var heightDataFactor = heightData * viewport.Factor;
        var dataItems = Math.floor(heightDataFactor / viewport.HeightItem);
        viewport.DataEnd = dataItems < viewport.DataEnd ? dataItems : viewport.DataEnd;
        this.UpdateValuesBallon(viewport);
    };
    DrapoViewportHandler.prototype.UpdateValuesBallon = function (viewport) {
        viewport.HeightBallonBefore = viewport.DataStart * viewport.HeightItem;
        viewport.HeightBallonAfter = (viewport.DataLength - viewport.DataEnd) * viewport.HeightItem;
    };
    DrapoViewportHandler.prototype.UpdateElementsBallon = function (viewport) {
        this.FillBallon(viewport.ElementBallonBefore, viewport.HeightBallonBefore);
        this.FillBallon(viewport.ElementBallonAfter, viewport.HeightBallonAfter);
    };
    DrapoViewportHandler.prototype.GetElementHeightRect = function (el) {
        var rect = el.getBoundingClientRect();
        return (rect.height);
    };
    DrapoViewportHandler.prototype.GetElementStyleHeight = function (el) {
        var elStyle = window.getComputedStyle(el);
        var heightString = elStyle.getPropertyValue('height');
        if (heightString.indexOf('px') < 0)
            return (0);
        var height = this.Application.Parser.ParsePixels(heightString);
        return (height);
    };
    DrapoViewportHandler.prototype.GetElementHeight = function (el) {
        var height = this.GetElementHeightRect(el);
        if (height != 0)
            return (height);
        height = this.GetElementStyleHeight(el);
        if (height != 0)
            return (height);
        return (0);
    };
    DrapoViewportHandler.prototype.GetScrollViewport = function (el) {
        var elCurrent = el;
        var isFirst = true;
        var heightBefore = 0;
        var heightAfter = 0;
        while (elCurrent != null) {
            if (this.HasOverflowY(elCurrent))
                return ([elCurrent, heightBefore, heightAfter]);
            var elParent = elCurrent.parentElement;
            if (elParent != null) {
                if (isFirst) {
                    isFirst = false;
                }
                else {
                    var isBefore = true;
                    for (var i = 0; i < elParent.children.length; i++) {
                        var elChild = elParent.children[i];
                        if (elChild === elCurrent) {
                            isBefore = false;
                        }
                        else {
                            var height = this.GetElementHeight(elChild);
                            if (isBefore)
                                heightBefore = heightBefore + height;
                            else
                                heightAfter = heightAfter + height;
                        }
                    }
                }
            }
            elCurrent = elParent;
        }
        return (null);
    };
    DrapoViewportHandler.prototype.HasOverflowY = function (el) {
        var style = window.getComputedStyle(el);
        var overflow = style.getPropertyValue('overflow');
        if (this.IsOverflowEnabled(overflow))
            return (true);
        var overflowY = style.getPropertyValue('overflow-y');
        if (this.IsOverflowEnabled(overflowY))
            return (true);
        return (false);
    };
    DrapoViewportHandler.prototype.IsOverflowEnabled = function (value) {
        if (value === 'auto')
            return (true);
        if (value === 'scroll')
            return (true);
        if (value === 'hidden')
            return (true);
        return (false);
    };
    DrapoViewportHandler.prototype.GetView = function (viewport) {
        var rowsBeforeRemove = null;
        var rowsBeforeInsertStart = null;
        var rowsBeforeInsertEnd = null;
        var rowsAfterRemove = null;
        var rowsAfterInsertStart = null;
        var rowsAfterInsertEnd = null;
        var view = this.GetViewFactorCurrent(viewport);
        var viewStart = view[0];
        var viewEnd = view[1];
        if ((viewStart >= viewport.DataStart) && (viewEnd <= viewport.DataEnd))
            return (null);
        if ((viewport.DataStart === viewStart) && (viewport.DataEnd === viewEnd))
            return (null);
        if ((viewStart > viewport.DataEnd) || (viewEnd < viewport.DataStart)) {
            rowsBeforeRemove = -1;
            rowsAfterInsertStart = viewStart;
            rowsAfterInsertEnd = viewEnd;
        }
        else {
            if (viewport.DataStart < viewStart) {
                rowsBeforeRemove = viewStart - viewport.DataStart;
            }
            else if (viewStart < viewport.DataStart) {
                rowsBeforeInsertStart = viewStart;
                rowsBeforeInsertEnd = viewport.DataStart;
            }
            if (viewport.DataEnd > viewEnd) {
                rowsAfterRemove = viewport.DataEnd - viewEnd;
            }
            else if (viewEnd > viewport.DataEnd) {
                rowsAfterInsertStart = viewport.DataEnd;
                rowsAfterInsertEnd = viewEnd;
            }
        }
        viewport.DataStart = viewStart;
        viewport.DataEnd = viewEnd;
        this.UpdateValuesBallon(viewport);
        return ([rowsBeforeRemove, rowsBeforeInsertStart, rowsBeforeInsertEnd, rowsAfterRemove, rowsAfterInsertStart, rowsAfterInsertEnd]);
    };
    DrapoViewportHandler.prototype.GetViewFactorCurrent = function (viewport) {
        var viewHeight = viewport.HeightScroll;
        var viewItems = viewHeight / viewport.HeightItem;
        var scrollTop = viewport.ElementScroll.scrollTop + viewHeight;
        var scrollTopLessBefore = scrollTop - viewport.HeightBefore;
        var scrollTopLessBeforeValid = scrollTopLessBefore > 0 ? scrollTopLessBefore : 0;
        var views = scrollTopLessBeforeValid / viewHeight;
        var viewsStart = views - viewport.Factor;
        if (viewsStart < 0)
            viewsStart = 0;
        var viewsEnd = views + viewport.Factor;
        var rowStart = Math.round(viewsStart * viewItems);
        var rowEnd = Math.ceil(viewsEnd * viewItems);
        if (rowEnd > viewport.DataLength)
            rowEnd = viewport.DataLength;
        return ([rowStart, rowEnd]);
    };
    return DrapoViewportHandler;
}());

"use strict";
var DrapoWindow = (function () {
    function DrapoWindow() {
        this._did = null;
        this._uri = null;
        this._element = null;
        this._visible = true;
        this._code = null;
    }
    Object.defineProperty(DrapoWindow.prototype, "Did", {
        get: function () {
            return (this._did);
        },
        set: function (value) {
            this._did = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoWindow.prototype, "Uri", {
        get: function () {
            return (this._uri);
        },
        set: function (value) {
            this._uri = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoWindow.prototype, "Element", {
        get: function () {
            return (this._element);
        },
        set: function (value) {
            this._element = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoWindow.prototype, "Visible", {
        get: function () {
            return (this._visible);
        },
        set: function (value) {
            this._visible = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DrapoWindow.prototype, "Code", {
        get: function () {
            return (this._code);
        },
        set: function (value) {
            this._code = value;
        },
        enumerable: false,
        configurable: true
    });
    return DrapoWindow;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoWindowHandler = (function () {
    function DrapoWindowHandler(application) {
        this._windows = [];
        this._application = application;
    }
    Object.defineProperty(DrapoWindowHandler.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoWindowHandler.prototype.CreateAndShowWindowDefinition = function (name, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var windowDefinition, uri, did, parametersDefault;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.GetWindowDefinition(name)];
                    case 1:
                        windowDefinition = _a.sent();
                        if (windowDefinition === null)
                            return [2];
                        uri = windowDefinition.Path;
                        did = windowDefinition.Did;
                        parametersDefault = windowDefinition.Parameters;
                        return [4, this.CreateAndShowWindow(uri, did, parameters, parametersDefault)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoWindowHandler.prototype.CreateAndShowWindow = function (uri, did, parameters, parametersDefault) {
        if (parametersDefault === void 0) { parametersDefault = null; }
        return __awaiter(this, void 0, void 0, function () {
            var elWindowsDid, allowMultipleInstanceUrl, windowContent, elContent, content, i, parameter, parameterCode, parameterValue, windowElement, attributes, templateUrl, template, onLoad, templateUrlContent, _a, templateContent, windowElementTemplate, elTemplate, elWindow, sector, elSector, window;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        elWindowsDid = this.Application.Searcher.FindByAttributeAndValue('d-id', did);
                        if (elWindowsDid == null)
                            return [2];
                        allowMultipleInstanceUrl = (!(elWindowsDid.getAttribute('d-window-allowMultipleInstanceUrl') === 'false'));
                        if ((!allowMultipleInstanceUrl) && (this.IsWindowLoaded(uri, did)))
                            return [2];
                        return [4, this.Application.Server.GetViewHTML(uri)];
                    case 1:
                        windowContent = _b.sent();
                        if (windowContent === null)
                            return [2];
                        elContent = this.Application.Document.CreateHTMLElement(windowContent, true);
                        content = elContent.outerHTML;
                        for (i = 0; i < parameters.length; i++) {
                            parameter = parameters[i];
                            content = content.replace(parameter[0], parameter[1]);
                        }
                        if (parametersDefault != null) {
                            for (parameterCode in parametersDefault) {
                                parameterValue = parametersDefault[parameterCode];
                                content = content.replace(parameterCode, parameterValue);
                            }
                        }
                        windowElement = null;
                        attributes = this.Application.Parser.ParseElementAttributes(content);
                        templateUrl = this.Application.Solver.Get(attributes, 'd-templateurl');
                        template = templateUrl === null ? null : this.Application.Solver.Get(attributes, 'd-template');
                        if (template === null)
                            template = 'template';
                        onLoad = null;
                        if (!(templateUrl === null)) return [3, 2];
                        _a = null;
                        return [3, 4];
                    case 2: return [4, this.Application.Server.GetViewHTML(templateUrl)];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4:
                        templateUrlContent = _a;
                        templateContent = templateUrlContent === null ? null : this.Application.Parser.ParseDocumentContent(templateUrlContent);
                        if (templateContent !== null) {
                            elWindowsDid.append(this.Application.Document.CreateHTMLElement(templateContent));
                            windowElement = elWindowsDid.children[elWindowsDid.children.length - 1];
                            windowElementTemplate = this.Application.Searcher.FindByAttributeAndValueFromParent('d-template', template, windowElement);
                            if (windowElementTemplate === null) {
                                this.Application.Document.SetHTML(windowElement, content);
                            }
                            else {
                                this.Application.Document.SetHTML(windowElementTemplate, content);
                                elTemplate = windowElementTemplate;
                                onLoad = elTemplate.getAttribute('d-on-load');
                            }
                        }
                        else {
                            elWindowsDid.append(this.Application.Document.CreateHTMLElement(content));
                            windowElement = elWindowsDid.children[elWindowsDid.children.length - 1];
                        }
                        elWindow = windowElement;
                        sector = this.Application.Document.GetSectorParent(elWindow);
                        elSector = elWindow.getAttribute('d-sector');
                        if (!(elSector === "@")) return [3, 6];
                        elSector = this.Application.Document.CreateGuid();
                        elWindow.setAttribute('d-sector', elSector);
                        return [4, this.Application.Document.AddSectorHierarchy(elSector, sector)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        window = new DrapoWindow();
                        window.Code = this.Application.Document.CreateGuid();
                        window.Did = did;
                        window.Uri = uri;
                        window.Element = windowElement;
                        this._windows.push(window);
                        return [4, this.Application.Document.ResolveWindow(window.Element)];
                    case 7:
                        _b.sent();
                        if (!(onLoad != null)) return [3, 9];
                        return [4, this.Application.FunctionHandler.ResolveFunctionWithoutContext(elSector, elWindow, onLoad)];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9: return [2];
                }
            });
        });
    };
    DrapoWindowHandler.prototype.IsWindowLoaded = function (uri, did) {
        for (var i = this._windows.length - 1; i >= 0; i--) {
            var window_1 = this._windows[i];
            if ((window_1.Did === did) && (window_1.Uri === uri))
                return (true);
        }
        return (false);
    };
    DrapoWindowHandler.prototype.CloseWindow = function (did, all, type) {
        return __awaiter(this, void 0, void 0, function () {
            var isTypeHidden, i, window_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._windows.length == 0)
                            return [2];
                        isTypeHidden = type === 'hidden';
                        i = this._windows.length - 1;
                        _a.label = 1;
                    case 1:
                        if (!(i >= 0)) return [3, 4];
                        window_2 = this._windows[i];
                        if ((did !== null) && (did !== '') && (window_2.Did !== did) && (window_2.Code !== did))
                            return [3, 3];
                        if ((isTypeHidden) && (window_2.Visible))
                            return [3, 3];
                        return [4, this.DestroyWindowElement(window_2)];
                    case 2:
                        _a.sent();
                        this._windows.splice(i, 1);
                        if (!all)
                            return [3, 4];
                        _a.label = 3;
                    case 3:
                        i--;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    DrapoWindowHandler.prototype.TryClose = function (window) {
        return __awaiter(this, void 0, void 0, function () {
            var parent, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        parent = window.Element.parentElement;
                        if (parent == null)
                            return [2];
                        return [4, this.DestroyWindowElement(window)];
                    case 1:
                        _a.sent();
                        for (i = this._windows.length - 1; i >= 0; i--) {
                            if (window !== this._windows[i])
                                continue;
                            this._windows.splice(i, 1);
                            break;
                        }
                        return [2];
                }
            });
        });
    };
    DrapoWindowHandler.prototype.DestroyWindowElement = function (window) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Document.RemoveElement(window.Element)];
                    case 1:
                        _a.sent();
                        return [4, this.Application.ComponentHandler.UnloadComponentInstancesDetachedFullCheck()];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    DrapoWindowHandler.prototype.HideWindow = function (did, all) {
        return __awaiter(this, void 0, void 0, function () {
            var windowHidden, i, window_3;
            return __generator(this, function (_a) {
                if (this._windows.length == 0)
                    return [2];
                windowHidden = null;
                for (i = this._windows.length - 1; i >= 0; i--) {
                    window_3 = this._windows[i];
                    if ((did !== null) && (did !== '') && (window_3.Did !== did))
                        continue;
                    if (!window_3.Visible)
                        continue;
                    window_3.Visible = false;
                    windowHidden = window_3;
                    this.Application.Document.Hide(window_3.Element);
                    if (!all)
                        break;
                }
                return [2, (windowHidden)];
            });
        });
    };
    DrapoWindowHandler.prototype.GetWindowDefinition = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var windows, i, window_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.Application.Config.GetSector("Windows")];
                    case 1:
                        windows = _a.sent();
                        if (windows === null)
                            return [2, (null)];
                        for (i = 0; i < windows.length; i++) {
                            window_4 = windows[i];
                            if (window_4.Name === name)
                                return [2, (window_4)];
                        }
                        return [2, (null)];
                }
            });
        });
    };
    DrapoWindowHandler.prototype.GetWindowByElement = function (el) {
        while (el !== null) {
            for (var i = this._windows.length - 1; i >= 0; i--) {
                var window_5 = this._windows[i];
                if (window_5.Element === el)
                    return (window_5);
            }
            el = el.parentElement;
        }
        return (null);
    };
    return DrapoWindowHandler;
}());

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var DrapoWorker = (function () {
    function DrapoWorker(application) {
        this._pollingItem = null;
        this._pollingTimeout = null;
        this._application = application;
    }
    Object.defineProperty(DrapoWorker.prototype, "Application", {
        get: function () {
            return (this._application);
        },
        enumerable: false,
        configurable: true
    });
    DrapoWorker.prototype.Check = function () {
        var _this = this;
        var item = this.Application.Storage.GetCachedDataItemByDatePolling();
        if (item == null) {
            this.Destroy(true);
            return;
        }
        if ((this._pollingItem != null) && (this._pollingItem === item))
            return;
        this._pollingItem = item;
        var application = this.Application;
        this._pollingTimeout = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        application.Worker.Destroy(false);
                        return [4, application.Worker.Work(item)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); }, item.PollingTimespan);
    };
    DrapoWorker.prototype.Destroy = function (cleanItem) {
        if (this._pollingTimeout !== null) {
            clearTimeout(this._pollingTimeout);
            this._pollingTimeout = null;
        }
        if (cleanItem)
            this._pollingItem = null;
    };
    DrapoWorker.prototype.Work = function (item) {
        return __awaiter(this, void 0, void 0, function () {
            var pollingHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.Application.Storage.ExistCachedDataItem(item)) {
                            this.Check();
                            return [2];
                        }
                        return [4, this.Application.Plumber.SendPolling(item.PollingKey)];
                    case 1:
                        pollingHash = _a.sent();
                        if (!this.Application.Storage.ExistCachedDataItem(item)) {
                            this.Check();
                            return [2];
                        }
                        if (!(item.PollingHash !== pollingHash)) return [3, 3];
                        item.PollingHash = pollingHash;
                        return [4, this.Application.Storage.ExecuteCachedDataItemPolling(item)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        item.CheckpointPolling();
                        this._pollingItem = null;
                        this.Check();
                        return [2];
                }
            });
        });
    };
    return DrapoWorker;
}());
