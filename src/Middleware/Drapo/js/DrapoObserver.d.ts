declare class DrapoObserver {
    private _application;
    private _dataBarberDataKeys;
    private _dataBarberFields;
    private _dataBarberElements;
    private _dataForDataKey;
    private _dataForElement;
    private _dataIncrementalKey;
    private _dataIncrementalElements;
    private _IsEnabledNotifyIncremental;
    private _dataDelayKey;
    private _dataDelayField;
    private _dataDelayElements;
    private _dataStorageKey;
    private _dataStorageKeyFields;
    private _dataStorageKeyReferenceKey;
    private _dataStorageType;
    private _dataAuthorizationKey;
    private _dataAuthorizationType;
    private _dataLinkDataKey;
    private _dataLinkReferenceKey;
    private _dataLinkDataFields;
    private _dataComponentKey;
    private _dataComponentField;
    private _dataComponentElements;
    private _dataComponentFunction;
    private _dataComponentElementsFocus;
    get Application(): DrapoApplication;
    get IsEnabledNotifyIncremental(): boolean;
    set IsEnabledNotifyIncremental(value: boolean);
    constructor(application: DrapoApplication);
    private GetBarberDataKeyIndex;
    private GetForDataKeyIndex;
    private GetDataIncrementalKeyIndex;
    private CreateBarberDataKeyIndex;
    private CreateForDataKeyIndex;
    private CreateDataIncrementalKeyIndex;
    SubscribeBarber(element: HTMLElement, dataKey: string, dataFields: string[]): boolean;
    private UnsubscribeBarber;
    SubscribeFor(elementForTemplate: HTMLElement, dataKey: string): void;
    SubscribeStorage(dataKey: string, dataFields: string[], dataReferenceKey: string, type?: DrapoStorageLinkType): void;
    private UnsubscribeStorage;
    private UnsubscribeStorageReferenceKey;
    UnsubscribeFor(dataKey: string, elementForTemplate?: HTMLElement): void;
    Notify(dataKey: string, dataIndex: number, dataFields: string[], canUseDifference?: boolean, canNotifyStorage?: boolean): Promise<void>;
    NotifyFor(dataKey: string, dataIndex: number, dataFields: string[], canUseDifference?: boolean, type?: DrapoStorageLinkType): Promise<void>;
    NotifyBarber(dataKey: string, dataFields: string[]): Promise<void>;
    NotifyStorage(dataKey: string, dataFields: string[]): Promise<void>;
    NotifyStorageRenderClass(dataKey: string): Promise<void>;
    SubscribeIncremental(el: HTMLElement, dataKey: string): void;
    NotifyIncremental(dataKey: string): Promise<void>;
    SubscribeDelay(el: HTMLElement, dataKey: string, dataFields: string[]): void;
    NotifyDelay(dataKey: string, dataFields: string[]): Promise<void>;
    SubscribeAuthorization(dataKey: string, type: string): void;
    HasDataKeyAuthorization(dataKey: string): boolean;
    private GetDataKeyAuthorizationIndex;
    NotifyAuthorization(): Promise<void>;
    HasPendingAuthorization(): boolean;
    GetPendingAuthorization(): number;
    HasDelayKeys(): boolean;
    GetDelayKeys(): string[];
    GetDelayFields(dataKey: string): string[];
    private GetDelayKeyIndex;
    private GetDelayFieldKeyIndex;
    private GetStorageKeyIndex;
    private CreateStorageDataKeyIndex;
    SubscribeLink(dataKey: string, referenceKey: string, dataFields?: string[]): boolean;
    SubscribeLinkMustache(mustache: string, referenceKey: string): boolean;
    UnsubscribeLink(dataKey: string, referenceKey?: string): boolean;
    private GetLinkIndex;
    private NotifyLink;
    Unsubscribe(dataKey: string): void;
    UnsubscribeDetached(sector: string): void;
    private GetComponentDataKeyIndex;
    private CreateComponentDataKeyIndex;
    SubscribeComponent(value: string, el: HTMLElement, notifyFunction: Function, elFocus?: HTMLElement): void;
    private UnsubscribeComponent;
    private UnsubscribeComponentDetached;
    private NotifyComponent;
    GetElementByModel(sector: string, model: string): HTMLElement;
    private GetElementByModelComponent;
    private GetElementByModelBarber;
    private IsCompatibleDataFields;
    private IsEqualDataFields;
}
