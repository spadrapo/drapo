declare class DrapoEventHandler {
    private _application;
    private readonly _debounceDefault;
    private readonly _debounceDefaultClick;
    private readonly _debounce;
    private readonly _detach;
    private _eventsRunning;
    get Application(): DrapoApplication;
    constructor(application: DrapoApplication);
    HasContentEventContext(content: string): boolean;
    CreateEventNamespace(el: HTMLElement, location: string, eventType: string, namespace?: string): string;
    GetEventPropagation(el: HTMLElement, eventType: string): boolean;
    private RetrieveEventBinder;
    private IsLocationBody;
    GetElementParent(element: HTMLElement, levels?: number): HTMLElement;
    Attach(el: HTMLElement, renderContext: DrapoRenderContext): Promise<void>;
    AttachContext(context: DrapoContext, el: HTMLElement, sector: string, renderContext: DrapoRenderContext): Promise<void>;
    private HasEventContext;
    AttachEventListener(el: HTMLElement | Window, eventType: string, eventNamespace: string, callback: Function): void;
    DetachEventListener(el: HTMLElement | Window, eventNamespace: string): boolean;
    private SetElementEventListenerContainer;
    private GetElementEventListenerContainer;
    private ExecuteEvent;
    private IsEventRunning;
    private AddEventRunning;
    private RemoveEventRunning;
    private IsEventTypeValid;
    private IsEventDelay;
    GetEventDebounce(el: HTMLElement, eventType: string): number;
    GetEventDetach(el: HTMLElement, eventType: string): string[];
    private HasEventDoubleClickInParent;
    private IsEventTypeKeyboard;
    IsValidEventFilter(e: Event, eventFilter: string): boolean;
    private IsValidEventFilterKeyboard;
    private GetKeyboardMapping;
    private RetrieveElementEvents;
    TriggerClick(el: HTMLElement): Promise<boolean>;
    Trigger(el: HTMLElement, type: string): Promise<boolean>;
    TriggerEvent(el: HTMLElement, event: Event): Promise<boolean>;
    SyncNodeEventsDifferences(nodeOld: HTMLElement, nodeNew: HTMLElement): void;
    private GetEventListener;
}
