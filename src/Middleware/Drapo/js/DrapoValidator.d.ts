declare class DrapoValidator {
    private _application;
    private _sectors;
    private _sectorsValidationRuleIDs;
    private _sectorsValidationRuleTypes;
    private _sectorsValidationRuleValues;
    private _sectorsValidationRuleTags;
    private _sectorsValidationRuleContexts;
    private _sectorsValidationGroupGroups;
    private _sectorsValidationGroupRules;
    private _sectorsValidationGroupContexts;
    private _sectorsValidationInterfaceIDs;
    private _sectorsValidationInterfaceElements;
    private _sectorsValidationInterfaceContexts;
    get Application(): DrapoApplication;
    constructor(application: DrapoApplication);
    HasContentValidation(content: string): boolean;
    UnloadSectorHierarchy(sector: string): void;
    UnloadSector(sector: string): void;
    RegisterValidation(el: HTMLElement, sector: string, context?: DrapoContext): Promise<void>;
    private ResolveValidationID;
    private GetValidationTag;
    IsValidationEventValid(el: HTMLElement, sector: string, eventType: string, location: string, event: Event, contextItem: DrapoContextItem): Promise<boolean>;
    IsValidationExpressionValid(el: HTMLElement, sector: string, validation: string, contextItem: DrapoContextItem, event?: Event): Promise<boolean>;
    UncheckValidationExpression(el: HTMLElement, sector: string, validation: string, contextItem: DrapoContextItem): Promise<void>;
    private GetSectorIndex;
    private GetIndex;
    private GetElement;
    private EnsureSector;
    private AddValidationRule;
    private AddValidationGroups;
    private AddValidationGroup;
    private AddValidationInterface;
    private ExtractValidations;
    private ExtractValidationProperty;
    private ResolveValidations;
    private ExtractValidators;
    private IsValidationValid;
    private IsValidationGroup;
    private IsValidationGroupValid;
    private GetValidationGroupRules;
    private IsValidationRuleValid;
    private GetValidationRuleElements;
    private IsRuleValid;
    private IsValid;
    private IsValidConditional;
    private IsValidRegex;
    private IsValidCompare;
    private CreateContext;
    private IsValidOutside;
    private UncheckValidation;
    private UncheckValidationGroup;
    private UncheckValidationRule;
    IsValidatorInterface(el: HTMLElement): boolean;
}
